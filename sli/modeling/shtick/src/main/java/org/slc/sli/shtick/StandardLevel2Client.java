package org.slc.sli.shtick;import java.io.IOException;import java.net.URI;import java.net.URISyntaxException;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;public final class StandardLevel2Client implements Level2Client {    private final String baseUri;    private final Level1Client client;    public StandardLevel2Client(final String baseUri, final Level1Client client) {        this.baseUri = baseUri;        this.client = client;    }    public StandardLevel2Client(final String baseUri) {        this(baseUri, new JsonLevel1Client());    }    /**     * postStudentAcademicRecords     */    @Override    public String postStudentAcademicRecords(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentAcademicRecords";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentAcademicRecords     */    @Override    public List<Entity> getStudentAcademicRecords(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentAcademicRecordsById     */    @Override    public void deleteStudentAcademicRecordsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentAcademicRecordsById     */    @Override    public List<Entity> getStudentAcademicRecordsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentAcademicRecordsById     */    @Override    public void putStudentAcademicRecordsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentAcademicRecordsById     */    @Override    public void deleteCustomForStudentAcademicRecordsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentAcademicRecordsById     */    @Override    public List<Entity> getCustomForStudentAcademicRecordsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentAcademicRecordsById     */    @Override    public void putCustomForStudentAcademicRecordsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentAcademicRecordsById     */    @Override    public String postCustomForStudentAcademicRecordsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAcademicRecords/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentGradebookEntries     */    @Override    public String postStudentGradebookEntries(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentGradebookEntries";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentGradebookEntries     */    @Override    public List<Entity> getStudentGradebookEntries(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentGradebookEntriesById     */    @Override    public void deleteStudentGradebookEntriesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentGradebookEntriesById     */    @Override    public List<Entity> getStudentGradebookEntriesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentGradebookEntriesById     */    @Override    public void putStudentGradebookEntriesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentGradebookEntriesById     */    @Override    public void deleteCustomForStudentGradebookEntriesById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentGradebookEntriesById     */    @Override    public List<Entity> getCustomForStudentGradebookEntriesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentGradebookEntriesById     */    @Override    public void putCustomForStudentGradebookEntriesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentGradebookEntriesById     */    @Override    public String postCustomForStudentGradebookEntriesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentGradebookEntries/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postGradebookEntries     */    @Override    public String postGradebookEntries(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "gradebookEntries";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGradebookEntries     */    @Override    public List<Entity> getGradebookEntries(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("gradebookEntries");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteGradebookEntriesById     */    @Override    public void deleteGradebookEntriesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGradebookEntriesById     */    @Override    public List<Entity> getGradebookEntriesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putGradebookEntriesById     */    @Override    public void putGradebookEntriesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForGradebookEntriesById     */    @Override    public void deleteCustomForGradebookEntriesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForGradebookEntriesById     */    @Override    public List<Entity> getCustomForGradebookEntriesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForGradebookEntriesById     */    @Override    public void putCustomForGradebookEntriesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForGradebookEntriesById     */    @Override    public String postCustomForGradebookEntriesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("gradebookEntries/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentDisciplineIncidentAssociations     */    @Override    public String postStudentDisciplineIncidentAssociations(final String token, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = "studentDisciplineIncidentAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentDisciplineIncidentAssociations     */    @Override    public List<Entity> getStudentDisciplineIncidentAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId     */    @Override    public void deleteStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId(final String token,            final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId     */    @Override    public List<Entity> getStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId(            final String token, final List<String> studentDisciplineIncidentAssociationId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s",                    StringUtils.join(studentDisciplineIncidentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId     */    @Override    public void putStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId(final String token,            final String studentDisciplineIncidentAssociationId, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s",                    studentDisciplineIncidentAssociationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId     */    @Override    public List<Entity> getStudentsForStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId(            final String token, final List<String> studentDisciplineIncidentAssociationId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s/students",                    StringUtils.join(studentDisciplineIncidentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getDisciplineIncidentsForStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId     */    @Override    public List<Entity> getDisciplineIncidentsForStudentDisciplineIncidentAssociationsByStudentDisciplineIncidentAssociationId(            final String token, final List<String> studentDisciplineIncidentAssociationId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s/disciplineIncidents",                    StringUtils.join(studentDisciplineIncidentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentDisciplineIncidentAssociationsById     */    @Override    public void deleteCustomForStudentDisciplineIncidentAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentDisciplineIncidentAssociationsById     */    @Override    public List<Entity> getCustomForStudentDisciplineIncidentAssociationsById(final String token,            final List<String> id, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s/custom",                    StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentDisciplineIncidentAssociationsById     */    @Override    public void putCustomForStudentDisciplineIncidentAssociationsById(final String token, final String id,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentDisciplineIncidentAssociationsById     */    @Override    public String postCustomForStudentDisciplineIncidentAssociationsById(final String token, final String id,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("studentDisciplineIncidentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postAssessments     */    @Override    public String postAssessments(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "assessments";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAssessments     */    @Override    public List<Entity> getAssessments(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentAssessmentsForAssessmentsByAssessmentId     */    @Override    public List<Entity> getStudentAssessmentsForAssessmentsByAssessmentId(final String token,            final List<String> assessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/studentAssessments", StringUtils.join(assessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentAssessmentsForAssessmentsByAssessmentId     */    @Override    public List<Entity> getStudentsForStudentAssessmentsForAssessmentsByAssessmentId(final String token,            final List<String> assessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/studentAssessments/students",                    StringUtils.join(assessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionAssessmentAssociationsForAssessmentsByAssessmentId     */    @Override    public List<Entity> getSectionAssessmentAssociationsForAssessmentsByAssessmentId(final String token,            final List<String> assessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/sectionAssessmentAssociations",                    StringUtils.join(assessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForSectionAssessmentAssociationsForAssessmentsByAssessmentId     */    @Override    public List<Entity> getSectionsForSectionAssessmentAssociationsForAssessmentsByAssessmentId(final String token,            final List<String> assessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/sectionAssessmentAssociations/sections",                    StringUtils.join(assessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningStandardsForAssessmentsByAssessmentId     */    @Override    public List<Entity> getLearningStandardsForAssessmentsByAssessmentId(final String token,            final List<String> assessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/learningStandards", StringUtils.join(assessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningObjectivesForAssessmentsByAssessmentId     */    @Override    public List<Entity> getLearningObjectivesForAssessmentsByAssessmentId(final String token,            final List<String> assessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/learningObjectives", StringUtils.join(assessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteAssessmentsById     */    @Override    public void deleteAssessmentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAssessmentsById     */    @Override    public List<Entity> getAssessmentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("assessments/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putAssessmentsById     */    @Override    public void putAssessmentsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForAssessmentsById     */    @Override    public void deleteCustomForAssessmentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("assessments/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForAssessmentsById     */    @Override    public List<Entity> getCustomForAssessmentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("assessments/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForAssessmentsById     */    @Override    public void putCustomForAssessmentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("assessments/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForAssessmentsById     */    @Override    public String postCustomForAssessmentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("assessments/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCompetencyLevelDescriptorTypes     */    @Override    public String postCompetencyLevelDescriptorTypes(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "competencyLevelDescriptorTypes";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCompetencyLevelDescriptorTypes     */    @Override    public List<Entity> getCompetencyLevelDescriptorTypes(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCompetencyLevelDescriptorTypesById     */    @Override    public void deleteCompetencyLevelDescriptorTypesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCompetencyLevelDescriptorTypesById     */    @Override    public List<Entity> getCompetencyLevelDescriptorTypesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCompetencyLevelDescriptorTypesById     */    @Override    public void putCompetencyLevelDescriptorTypesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForCompetencyLevelDescriptorTypesById     */    @Override    public void deleteCustomForCompetencyLevelDescriptorTypesById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForCompetencyLevelDescriptorTypesById     */    @Override    public List<Entity> getCustomForCompetencyLevelDescriptorTypesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForCompetencyLevelDescriptorTypesById     */    @Override    public void putCustomForCompetencyLevelDescriptorTypesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForCompetencyLevelDescriptorTypesById     */    @Override    public String postCustomForCompetencyLevelDescriptorTypesById(final String token, final String id,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptorTypes/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getHome     */    @Override    public List<Entity> getHome(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("home");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentParentAssociations     */    @Override    public String postStudentParentAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentParentAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentParentAssociations     */    @Override    public List<Entity> getStudentParentAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getParentsForStudentParentAssociationsByStudentParentAssociationId     */    @Override    public List<Entity> getParentsForStudentParentAssociationsByStudentParentAssociationId(final String token,            final List<String> studentParentAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s/parents",                    StringUtils.join(studentParentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentParentAssociationsByStudentParentAssociationId     */    @Override    public List<Entity> getStudentsForStudentParentAssociationsByStudentParentAssociationId(final String token,            final List<String> studentParentAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s/students",                    StringUtils.join(studentParentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentParentAssociationsById     */    @Override    public void deleteStudentParentAssociationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentParentAssociationsById     */    @Override    public List<Entity> getStudentParentAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentParentAssociationsById     */    @Override    public void putStudentParentAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentParentAssociationsById     */    @Override    public void deleteCustomForStudentParentAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentParentAssociationsById     */    @Override    public List<Entity> getCustomForStudentParentAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentParentAssociationsById     */    @Override    public void putCustomForStudentParentAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentParentAssociationsById     */    @Override    public String postCustomForStudentParentAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentParentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStaffProgramAssociations     */    @Override    public String postStaffProgramAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "staffProgramAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffProgramAssociations     */    @Override    public List<Entity> getStaffProgramAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStaffProgramAssociationsByProgramId     */    @Override    public void deleteStaffProgramAssociationsByProgramId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffProgramAssociationsByStaffProgramAssociationId     */    @Override    public List<Entity> getStaffProgramAssociationsByStaffProgramAssociationId(final String token,            final List<String> staffProgramAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s",                    StringUtils.join(staffProgramAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStaffProgramAssociationsByStaffProgramAssociationId     */    @Override    public void putStaffProgramAssociationsByStaffProgramAssociationId(final String token,            final String staffProgramAssociationId, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s", staffProgramAssociationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffForStaffProgramAssociationsByStaffProgramAssociationId     */    @Override    public List<Entity> getStaffForStaffProgramAssociationsByStaffProgramAssociationId(final String token,            final List<String> staffProgramAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s/staff",                    StringUtils.join(staffProgramAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getProgramsForStaffProgramAssociationsByStaffProgramAssociationId     */    @Override    public List<Entity> getProgramsForStaffProgramAssociationsByStaffProgramAssociationId(final String token,            final List<String> staffProgramAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s/programs",                    StringUtils.join(staffProgramAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStaffProgramAssociationsById     */    @Override    public void deleteCustomForStaffProgramAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStaffProgramAssociationsById     */    @Override    public List<Entity> getCustomForStaffProgramAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStaffProgramAssociationsById     */    @Override    public void putCustomForStaffProgramAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStaffProgramAssociationsById     */    @Override    public String postCustomForStaffProgramAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffProgramAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCohorts     */    @Override    public String postCohorts(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "cohorts";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCohorts     */    @Override    public List<Entity> getCohorts(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCohortsByCohortIdentifier     */    @Override    public void deleteCohortsByCohortIdentifier(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCohortsByCohortIdentifier     */    @Override    public List<Entity> getCohortsByCohortIdentifier(final String token, final List<String> cohortIdentifier,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("cohorts/%s", StringUtils.join(cohortIdentifier, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCohortsByCohortIdentifier     */    @Override    public void putCohortsByCohortIdentifier(final String token, final String cohortIdentifier, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("cohorts/%s", cohortIdentifier);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffCohortAssociationsForCohortsByCohortIdentifier     */    @Override    public List<Entity> getStaffCohortAssociationsForCohortsByCohortIdentifier(final String token,            final List<String> cohortIdentifier, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s/staffCohortAssociations",                    StringUtils.join(cohortIdentifier, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffForStaffCohortAssociationsForCohortsByCohortIdentifier     */    @Override    public List<Entity> getStaffForStaffCohortAssociationsForCohortsByCohortIdentifier(final String token,            final List<String> cohortIdentifier, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s/staffCohortAssociations/staff",                    StringUtils.join(cohortIdentifier, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCohortAssociationsForCohortsByCohortIdentifier     */    @Override    public List<Entity> getStudentCohortAssociationsForCohortsByCohortIdentifier(final String token,            final List<String> cohortIdentifier, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s/studentCohortAssociations",                    StringUtils.join(cohortIdentifier, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentCohortAssociationsForCohortsByCohortIdentifier     */    @Override    public List<Entity> getStudentsForStudentCohortAssociationsForCohortsByCohortIdentifier(final String token,            final List<String> cohortIdentifier, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s/studentCohortAssociations/students",                    StringUtils.join(cohortIdentifier, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForCohortsById     */    @Override    public void deleteCustomForCohortsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForCohortsById     */    @Override    public List<Entity> getCustomForCohortsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("cohorts/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForCohortsById     */    @Override    public void putCustomForCohortsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("cohorts/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForCohortsById     */    @Override    public String postCustomForCohortsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("cohorts/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentCompetencies     */    @Override    public String postStudentCompetencies(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentCompetencies";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCompetencies     */    @Override    public List<Entity> getStudentCompetencies(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencies");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getReportCardsForStudentCompetenciesByStudentCompetencyId     */    @Override    public List<Entity> getReportCardsForStudentCompetenciesByStudentCompetencyId(final String token,            final List<String> studentCompetencyId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s/reportCards",                    StringUtils.join(studentCompetencyId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentCompetenciesById     */    @Override    public void deleteStudentCompetenciesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCompetenciesById     */    @Override    public List<Entity> getStudentCompetenciesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentCompetenciesById     */    @Override    public void putStudentCompetenciesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentCompetenciesById     */    @Override    public void deleteCustomForStudentCompetenciesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentCompetenciesById     */    @Override    public List<Entity> getCustomForStudentCompetenciesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentCompetenciesById     */    @Override    public void putCustomForStudentCompetenciesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentCompetenciesById     */    @Override    public String postCustomForStudentCompetenciesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencies/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postSectionAssessmentAssociations     */    @Override    public String postSectionAssessmentAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "sectionAssessmentAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionAssessmentAssociations     */    @Override    public List<Entity> getSectionAssessmentAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForSectionAssessmentAssociationsBySectionAssessmentAssociationId     */    @Override    public List<Entity> getSectionsForSectionAssessmentAssociationsBySectionAssessmentAssociationId(final String token,            final List<String> sectionAssessmentAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s/sections",                    StringUtils.join(sectionAssessmentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAssessmentsForSectionAssessmentAssociationsBySectionAssessmentAssociationId     */    @Override    public List<Entity> getAssessmentsForSectionAssessmentAssociationsBySectionAssessmentAssociationId(            final String token, final List<String> sectionAssessmentAssociationId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s/assessments",                    StringUtils.join(sectionAssessmentAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteSectionAssessmentAssociationsById     */    @Override    public void deleteSectionAssessmentAssociationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionAssessmentAssociationsById     */    @Override    public List<Entity> getSectionAssessmentAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putSectionAssessmentAssociationsById     */    @Override    public void putSectionAssessmentAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForSectionAssessmentAssociationsById     */    @Override    public void deleteCustomForSectionAssessmentAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForSectionAssessmentAssociationsById     */    @Override    public List<Entity> getCustomForSectionAssessmentAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForSectionAssessmentAssociationsById     */    @Override    public void putCustomForSectionAssessmentAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForSectionAssessmentAssociationsById     */    @Override    public String postCustomForSectionAssessmentAssociationsById(final String token, final String id,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("sectionAssessmentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStaffEducationOrgAssignmentAssociations     */    @Override    public String postStaffEducationOrgAssignmentAssociations(final String token, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = "staffEducationOrgAssignmentAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffEducationOrgAssignmentAssociations     */    @Override    public List<Entity> getStaffEducationOrgAssignmentAssociations(final String token,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId     */    @Override    public void deleteStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId(final String token,            final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId     */    @Override    public List<Entity> getStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId(final String token,            final List<String> staffEducationOrganizationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s",                    StringUtils.join(staffEducationOrganizationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId     */    @Override    public void putStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId(final String token,            final String staffEducationOrganizationId, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s",                    staffEducationOrganizationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffForStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId     */    @Override    public List<Entity> getStaffForStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId(            final String token, final List<String> staffEducationOrganizationId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s/staff",                    StringUtils.join(staffEducationOrganizationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getEducationOrganizationsForStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId     */    @Override    public List<Entity> getEducationOrganizationsForStaffEducationOrgAssignmentAssociationsByStaffEducationOrganizationId(            final String token, final List<String> staffEducationOrganizationId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s/educationOrganizations",                    StringUtils.join(staffEducationOrganizationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStaffEducationOrgAssignmentAssociationsById     */    @Override    public void deleteCustomForStaffEducationOrgAssignmentAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStaffEducationOrgAssignmentAssociationsById     */    @Override    public List<Entity> getCustomForStaffEducationOrgAssignmentAssociationsById(final String token,            final List<String> id, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s/custom",                    StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStaffEducationOrgAssignmentAssociationsById     */    @Override    public void putCustomForStaffEducationOrgAssignmentAssociationsById(final String token, final String id,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStaffEducationOrgAssignmentAssociationsById     */    @Override    public String postCustomForStaffEducationOrgAssignmentAssociationsById(final String token, final String id,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("staffEducationOrgAssignmentAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCompetencyLevelDescriptor     */    @Override    public String postCompetencyLevelDescriptor(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "competencyLevelDescriptor";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCompetencyLevelDescriptor     */    @Override    public List<Entity> getCompetencyLevelDescriptor(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCompetencyLevelDescriptorById     */    @Override    public void deleteCompetencyLevelDescriptorById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCompetencyLevelDescriptorById     */    @Override    public List<Entity> getCompetencyLevelDescriptorById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCompetencyLevelDescriptorById     */    @Override    public void putCompetencyLevelDescriptorById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForCompetencyLevelDescriptorById     */    @Override    public void deleteCustomForCompetencyLevelDescriptorById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForCompetencyLevelDescriptorById     */    @Override    public List<Entity> getCustomForCompetencyLevelDescriptorById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForCompetencyLevelDescriptorById     */    @Override    public void putCustomForCompetencyLevelDescriptorById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForCompetencyLevelDescriptorById     */    @Override    public String postCustomForCompetencyLevelDescriptorById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("competencyLevelDescriptor/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postSchoolSessionAssociations     */    @Override    public String postSchoolSessionAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "schoolSessionAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolSessionAssociations     */    @Override    public List<Entity> getSchoolSessionAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteSchoolSessionAssociationsBySchoolSessionAssociationId     */    @Override    public void deleteSchoolSessionAssociationsBySchoolSessionAssociationId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolSessionAssociationsBySchoolSessionAssociationId     */    @Override    public List<Entity> getSchoolSessionAssociationsBySchoolSessionAssociationId(final String token,            final List<String> schoolSessionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s",                    StringUtils.join(schoolSessionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putSchoolSessionAssociationsBySchoolSessionAssociationId     */    @Override    public void putSchoolSessionAssociationsBySchoolSessionAssociationId(final String token,            final String schoolSessionAssociationId, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s", schoolSessionAssociationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSessionsForSchoolSessionAssociationsBySchoolSessionAssociationId     */    @Override    public List<Entity> getSessionsForSchoolSessionAssociationsBySchoolSessionAssociationId(final String token,            final List<String> schoolSessionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s/sessions",                    StringUtils.join(schoolSessionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsForSchoolSessionAssociationsBySchoolSessionAssociationId     */    @Override    public List<Entity> getSchoolsForSchoolSessionAssociationsBySchoolSessionAssociationId(final String token,            final List<String> schoolSessionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s/schools",                    StringUtils.join(schoolSessionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForSchoolSessionAssociationsById     */    @Override    public void deleteCustomForSchoolSessionAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForSchoolSessionAssociationsById     */    @Override    public List<Entity> getCustomForSchoolSessionAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForSchoolSessionAssociationsById     */    @Override    public void putCustomForSchoolSessionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForSchoolSessionAssociationsById     */    @Override    public String postCustomForSchoolSessionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("schoolSessionAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCourses     */    @Override    public String postCourses(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "courses";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourses     */    @Override    public List<Entity> getCourses(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("courses");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseOfferingsForCoursesByCourseId     */    @Override    public List<Entity> getCourseOfferingsForCoursesByCourseId(final String token, final List<String> courseId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/courseOfferings", StringUtils.join(courseId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSessionsForCourseOfferingsForCoursesByCourseId     */    @Override    public List<Entity> getSessionsForCourseOfferingsForCoursesByCourseId(final String token,            final List<String> courseId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/courseOfferings/sessions", StringUtils.join(courseId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseTranscriptsForCoursesByCourseId     */    @Override    public List<Entity> getCourseTranscriptsForCoursesByCourseId(final String token, final List<String> courseId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/courseTranscripts", StringUtils.join(courseId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForCourseTranscriptsForCoursesByCourseId     */    @Override    public List<Entity> getStudentsForCourseTranscriptsForCoursesByCourseId(final String token,            final List<String> courseId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/courseTranscripts/students", StringUtils.join(courseId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentParentAssociationsForCoursesByCourseId     */    @Override    public List<Entity> getStudentParentAssociationsForCoursesByCourseId(final String token,            final List<String> courseId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/studentParentAssociations", StringUtils.join(courseId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentParentAssociationsForCoursesByCourseId     */    @Override    public List<Entity> getStudentsForStudentParentAssociationsForCoursesByCourseId(final String token,            final List<String> courseId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/studentParentAssociations/students",                    StringUtils.join(courseId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCoursesById     */    @Override    public void deleteCoursesById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCoursesById     */    @Override    public List<Entity> getCoursesById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCoursesById     */    @Override    public void putCoursesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("courses/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForCoursesById     */    @Override    public void deleteCustomForCoursesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("courses/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForCoursesById     */    @Override    public List<Entity> getCustomForCoursesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForCoursesById     */    @Override    public void putCustomForCoursesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("courses/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForCoursesById     */    @Override    public String postCustomForCoursesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("courses/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postUserAccounts     */    @Override    public String postUserAccounts(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "userAccounts";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getUserAccounts     */    @Override    public List<Entity> getUserAccounts(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("userAccounts");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteUserAccountsByUserAccountId     */    @Override    public void deleteUserAccountsByUserAccountId(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("userAccounts/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getUserAccountsByUserAccountId     */    @Override    public List<Entity> getUserAccountsByUserAccountId(final String token, final List<String> userAccountId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("userAccounts/%s", StringUtils.join(userAccountId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putUserAccountsByUserAccountId     */    @Override    public void putUserAccountsByUserAccountId(final String token, final String userAccountId, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("userAccounts/%s", userAccountId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCreateCheckForUserAccounts     */    @Override    public List<Entity> getCreateCheckForUserAccounts(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("userAccounts/createCheck");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCreateWaitingListUserForUserAccounts     */    @Override    public String postCreateWaitingListUserForUserAccounts(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "userAccounts/createWaitingListUser";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForUserAccountsById     */    @Override    public void deleteCustomForUserAccountsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("userAccounts/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForUserAccountsById     */    @Override    public List<Entity> getCustomForUserAccountsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("userAccounts/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForUserAccountsById     */    @Override    public void putCustomForUserAccountsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("userAccounts/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForUserAccountsById     */    @Override    public String postCustomForUserAccountsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("userAccounts/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCourseOfferings     */    @Override    public String postCourseOfferings(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "courseOfferings";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseOfferings     */    @Override    public List<Entity> getCourseOfferings(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseOfferings");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCourseOfferingsByCourseOfferingId     */    @Override    public void deleteCourseOfferingsByCourseOfferingId(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseOfferings/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseOfferingsByCourseOfferingId     */    @Override    public List<Entity> getCourseOfferingsByCourseOfferingId(final String token, final List<String> courseOfferingId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courseOfferings/%s", StringUtils.join(courseOfferingId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCourseOfferingsByCourseOfferingId     */    @Override    public void putCourseOfferingsByCourseOfferingId(final String token, final String courseOfferingId,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("courseOfferings/%s", courseOfferingId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSessionsForCourseOfferingsByCourseOfferingId     */    @Override    public List<Entity> getSessionsForCourseOfferingsByCourseOfferingId(final String token,            final List<String> courseOfferingId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseOfferings/%s/sessions", StringUtils.join(courseOfferingId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCoursesForCourseOfferingsByCourseOfferingId     */    @Override    public List<Entity> getCoursesForCourseOfferingsByCourseOfferingId(final String token,            final List<String> courseOfferingId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseOfferings/%s/courses", StringUtils.join(courseOfferingId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForCourseOfferingsById     */    @Override    public void deleteCustomForCourseOfferingsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseOfferings/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForCourseOfferingsById     */    @Override    public List<Entity> getCustomForCourseOfferingsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courseOfferings/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForCourseOfferingsById     */    @Override    public void putCustomForCourseOfferingsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("courseOfferings/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForCourseOfferingsById     */    @Override    public String postCustomForCourseOfferingsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("courseOfferings/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postGradingPeriods     */    @Override    public String postGradingPeriods(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "gradingPeriods";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGradingPeriods     */    @Override    public List<Entity> getGradingPeriods(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradingPeriods");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getReportCardsForGradingPeriodsByGradingPeriodId     */    @Override    public List<Entity> getReportCardsForGradingPeriodsByGradingPeriodId(final String token,            final List<String> gradingPeriodId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s/reportCards", StringUtils.join(gradingPeriodId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGradesForGradingPeriodsByGradingPeriodId     */    @Override    public List<Entity> getGradesForGradingPeriodsByGradingPeriodId(final String token,            final List<String> gradingPeriodId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s/grades", StringUtils.join(gradingPeriodId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteGradingPeriodsById     */    @Override    public void deleteGradingPeriodsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGradingPeriodsById     */    @Override    public List<Entity> getGradingPeriodsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putGradingPeriodsById     */    @Override    public void putGradingPeriodsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForGradingPeriodsById     */    @Override    public void deleteCustomForGradingPeriodsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForGradingPeriodsById     */    @Override    public List<Entity> getCustomForGradingPeriodsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForGradingPeriodsById     */    @Override    public void putCustomForGradingPeriodsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForGradingPeriodsById     */    @Override    public String postCustomForGradingPeriodsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("gradingPeriods/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentSchoolAssociations     */    @Override    public String postStudentSchoolAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentSchoolAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSchoolAssociations     */    @Override    public List<Entity> getStudentSchoolAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsForStudentSchoolAssociationsByStudentSchoolAssociationId     */    @Override    public List<Entity> getSchoolsForStudentSchoolAssociationsByStudentSchoolAssociationId(final String token,            final List<String> studentSchoolAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s/schools",                    StringUtils.join(studentSchoolAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentSchoolAssociationsByStudentSchoolAssociationId     */    @Override    public List<Entity> getStudentsForStudentSchoolAssociationsByStudentSchoolAssociationId(final String token,            final List<String> studentSchoolAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s/students",                    StringUtils.join(studentSchoolAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentSchoolAssociationsById     */    @Override    public void deleteStudentSchoolAssociationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSchoolAssociationsById     */    @Override    public List<Entity> getStudentSchoolAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentSchoolAssociationsById     */    @Override    public void putStudentSchoolAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentSchoolAssociationsById     */    @Override    public void deleteCustomForStudentSchoolAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentSchoolAssociationsById     */    @Override    public List<Entity> getCustomForStudentSchoolAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentSchoolAssociationsById     */    @Override    public void putCustomForStudentSchoolAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentSchoolAssociationsById     */    @Override    public String postCustomForStudentSchoolAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSchoolAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postLearningStandards     */    @Override    public String postLearningStandards(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "learningStandards";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningStandards     */    @Override    public List<Entity> getLearningStandards(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("learningStandards");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteLearningStandardsById     */    @Override    public void deleteLearningStandardsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningStandards/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningStandardsById     */    @Override    public List<Entity> getLearningStandardsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("learningStandards/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putLearningStandardsById     */    @Override    public void putLearningStandardsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningStandards/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForLearningStandardsById     */    @Override    public void deleteCustomForLearningStandardsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningStandards/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForLearningStandardsById     */    @Override    public List<Entity> getCustomForLearningStandardsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("learningStandards/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForLearningStandardsById     */    @Override    public void putCustomForLearningStandardsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("learningStandards/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForLearningStandardsById     */    @Override    public String postCustomForLearningStandardsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("learningStandards/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentProgramAssociations     */    @Override    public String postStudentProgramAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentProgramAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentProgramAssociations     */    @Override    public List<Entity> getStudentProgramAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentProgramAssociationsByProgramId     */    @Override    public void deleteStudentProgramAssociationsByProgramId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentProgramAssociationsByStudentProgramAssociationId     */    @Override    public List<Entity> getStudentProgramAssociationsByStudentProgramAssociationId(final String token,            final List<String> studentProgramAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s",                    StringUtils.join(studentProgramAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentProgramAssociationsByStudentProgramAssociationId     */    @Override    public void putStudentProgramAssociationsByStudentProgramAssociationId(final String token,            final String studentProgramAssociationId, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s", studentProgramAssociationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentProgramAssociationsByStudentProgramAssociationId     */    @Override    public List<Entity> getStudentsForStudentProgramAssociationsByStudentProgramAssociationId(final String token,            final List<String> studentProgramAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s/students",                    StringUtils.join(studentProgramAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getProgramsForStudentProgramAssociationsByStudentProgramAssociationId     */    @Override    public List<Entity> getProgramsForStudentProgramAssociationsByStudentProgramAssociationId(final String token,            final List<String> studentProgramAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s/programs",                    StringUtils.join(studentProgramAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentProgramAssociationsById     */    @Override    public void deleteCustomForStudentProgramAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentProgramAssociationsById     */    @Override    public List<Entity> getCustomForStudentProgramAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentProgramAssociationsById     */    @Override    public void putCustomForStudentProgramAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentProgramAssociationsById     */    @Override    public String postCustomForStudentProgramAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentProgramAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postTeacherSchoolAssociations     */    @Override    public String postTeacherSchoolAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "teacherSchoolAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSchoolAssociations     */    @Override    public List<Entity> getTeacherSchoolAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeachersForTeacherSchoolAssociationsByTeacherSchoolAssociationId     */    @Override    public List<Entity> getTeachersForTeacherSchoolAssociationsByTeacherSchoolAssociationId(final String token,            final List<String> teacherSchoolAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s/teachers",                    StringUtils.join(teacherSchoolAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsForTeacherSchoolAssociationsByTeacherSchoolAssociationId     */    @Override    public List<Entity> getSchoolsForTeacherSchoolAssociationsByTeacherSchoolAssociationId(final String token,            final List<String> teacherSchoolAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s/schools",                    StringUtils.join(teacherSchoolAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteTeacherSchoolAssociationsById     */    @Override    public void deleteTeacherSchoolAssociationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSchoolAssociationsById     */    @Override    public List<Entity> getTeacherSchoolAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putTeacherSchoolAssociationsById     */    @Override    public void putTeacherSchoolAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForTeacherSchoolAssociationsById     */    @Override    public void deleteCustomForTeacherSchoolAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForTeacherSchoolAssociationsById     */    @Override    public List<Entity> getCustomForTeacherSchoolAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForTeacherSchoolAssociationsById     */    @Override    public void putCustomForTeacherSchoolAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForTeacherSchoolAssociationsById     */    @Override    public String postCustomForTeacherSchoolAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSchoolAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postDisciplineActions     */    @Override    public String postDisciplineActions(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "disciplineActions";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getDisciplineActions     */    @Override    public List<Entity> getDisciplineActions(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineActions");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteDisciplineActionsByDisciplineActionId     */    @Override    public void deleteDisciplineActionsByDisciplineActionId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineActions/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getDisciplineActionsByDisciplineActionId     */    @Override    public List<Entity> getDisciplineActionsByDisciplineActionId(final String token,            final List<String> disciplineActionId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("disciplineActions/%s", StringUtils.join(disciplineActionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putDisciplineActionsByDisciplineActionId     */    @Override    public void putDisciplineActionsByDisciplineActionId(final String token, final String disciplineActionId,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineActions/%s", disciplineActionId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForDisciplineActionsById     */    @Override    public void deleteCustomForDisciplineActionsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("disciplineActions/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForDisciplineActionsById     */    @Override    public List<Entity> getCustomForDisciplineActionsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineActions/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForDisciplineActionsById     */    @Override    public void putCustomForDisciplineActionsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineActions/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForDisciplineActionsById     */    @Override    public String postCustomForDisciplineActionsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineActions/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudents     */    @Override    public String postStudents(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "students";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudents     */    @Override    public List<Entity> getStudents(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("students");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getProgramsForStudentProgramAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getProgramsForStudentProgramAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentProgramAssociations/programs",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentAssessmentsForStudentsByStudentId     */    @Override    public List<Entity> getStudentAssessmentsForStudentsByStudentId(final String token, final List<String> studentId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentAssessments", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCohortAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getStudentCohortAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String                    .format("students/%s/studentCohortAssociations", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseTranscriptsForStudentsByStudentId     */    @Override    public List<Entity> getCourseTranscriptsForStudentsByStudentId(final String token, final List<String> studentId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/courseTranscripts", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentParentAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getStudentParentAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String                    .format("students/%s/studentParentAssociations", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentDisciplineIncidentAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getStudentDisciplineIncidentAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentDisciplineIncidentAssociations",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getReportCardsForStudentsByStudentId     */    @Override    public List<Entity> getReportCardsForStudentsByStudentId(final String token, final List<String> studentId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/reportCards", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getParentsForStudentParentAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getParentsForStudentParentAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentParentAssociations/parents",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentProgramAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getStudentProgramAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentProgramAssociations",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSchoolAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getStudentSchoolAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String                    .format("students/%s/studentSchoolAssociations", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSectionAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getStudentSectionAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentSectionAssociations",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentWithGradeForStudents     */    @Override    public List<Entity> getStudentWithGradeForStudents(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("students/studentWithGrade");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentWithGradeForStudentsByStudentId     */    @Override    public List<Entity> getStudentWithGradeForStudentsByStudentId(final String token, final List<String> studentId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentWithGrade", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForStudentSectionAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getSectionsForStudentSectionAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentSectionAssociations/sections",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsForStudentSchoolAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getSchoolsForStudentSchoolAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentSchoolAssociations/schools",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAssessmentsForStudentAssessmentsForStudentsByStudentId     */    @Override    public List<Entity> getAssessmentsForStudentAssessmentsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentAssessments/assessments",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAttendancesForStudentsByStudentId     */    @Override    public List<Entity> getAttendancesForStudentsByStudentId(final String token, final List<String> studentId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/attendances", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCoursesForCourseTranscriptsForStudentsByStudentId     */    @Override    public List<Entity> getCoursesForCourseTranscriptsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String                    .format("students/%s/courseTranscripts/courses", StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getDisciplineIncidentsForStudentDisciplineIncidentAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getDisciplineIncidentsForStudentDisciplineIncidentAssociationsForStudentsByStudentId(            final String token, final List<String> studentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("students/%s/studentDisciplineIncidentAssociations/disciplineIncidents",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCohortsForStudentCohortAssociationsForStudentsByStudentId     */    @Override    public List<Entity> getCohortsForStudentCohortAssociationsForStudentsByStudentId(final String token,            final List<String> studentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/studentCohortAssociations/cohorts",                    StringUtils.join(studentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentsById     */    @Override    public void deleteStudentsById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsById     */    @Override    public List<Entity> getStudentsById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentsById     */    @Override    public void putStudentsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("students/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentsById     */    @Override    public void deleteCustomForStudentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("students/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentsById     */    @Override    public List<Entity> getCustomForStudentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentsById     */    @Override    public void putCustomForStudentsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("students/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentsById     */    @Override    public String postCustomForStudentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("students/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postTeachers     */    @Override    public String postTeachers(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "teachers";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeachers     */    @Override    public List<Entity> getTeachers(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("teachers");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSchoolAssociationsForTeachersByTeacherId     */    @Override    public List<Entity> getTeacherSchoolAssociationsForTeachersByTeacherId(final String token,            final List<String> teacherId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String                    .format("teachers/%s/teacherSchoolAssociations", StringUtils.join(teacherId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSectionAssociationsForTeachersByTeacherId     */    @Override    public List<Entity> getTeacherSectionAssociationsForTeachersByTeacherId(final String token,            final List<String> teacherId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s/teacherSectionAssociations",                    StringUtils.join(teacherId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForTeacherSectionAssociationsForTeachersByTeacherId     */    @Override    public List<Entity> getSectionsForTeacherSectionAssociationsForTeachersByTeacherId(final String token,            final List<String> teacherId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s/teacherSectionAssociations/sections",                    StringUtils.join(teacherId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsForTeacherSchoolAssociationsForTeachersByTeacherId     */    @Override    public List<Entity> getSchoolsForTeacherSchoolAssociationsForTeachersByTeacherId(final String token,            final List<String> teacherId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s/teacherSchoolAssociations/schools",                    StringUtils.join(teacherId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteTeachersById     */    @Override    public void deleteTeachersById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeachersById     */    @Override    public List<Entity> getTeachersById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putTeachersById     */    @Override    public void putTeachersById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("teachers/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForTeachersById     */    @Override    public void deleteCustomForTeachersById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("teachers/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForTeachersById     */    @Override    public List<Entity> getCustomForTeachersById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForTeachersById     */    @Override    public void putCustomForTeachersById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("teachers/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForTeachersById     */    @Override    public String postCustomForTeachersById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teachers/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postEducationOrganizations     */    @Override    public String postEducationOrganizations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "educationOrganizations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getEducationOrganizations     */    @Override    public List<Entity> getEducationOrganizations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffEducationOrgAssignmentAssociationsForEducationOrganizationsByEducationOrganizationId     */    @Override    public List<Entity> getStaffEducationOrgAssignmentAssociationsForEducationOrganizationsByEducationOrganizationId(            final String token, final List<String> educationOrganizationId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s/staffEducationOrgAssignmentAssociations",                    StringUtils.join(educationOrganizationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffForStaffEducationOrgAssignmentAssociationsForEducationOrganizationsByEducationOrganizationId     */    @Override    public List<Entity> getStaffForStaffEducationOrgAssignmentAssociationsForEducationOrganizationsByEducationOrganizationId(            final String token, final List<String> educationOrganizationId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format(                    "educationOrganizations/%s/staffEducationOrgAssignmentAssociations/staff",                    StringUtils.join(educationOrganizationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteEducationOrganizationsById     */    @Override    public void deleteEducationOrganizationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getEducationOrganizationsById     */    @Override    public List<Entity> getEducationOrganizationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putEducationOrganizationsById     */    @Override    public void putEducationOrganizationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForEducationOrganizationsById     */    @Override    public void deleteCustomForEducationOrganizationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForEducationOrganizationsById     */    @Override    public List<Entity> getCustomForEducationOrganizationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForEducationOrganizationsById     */    @Override    public void putCustomForEducationOrganizationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForEducationOrganizationsById     */    @Override    public String postCustomForEducationOrganizationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("educationOrganizations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postTeacherSectionAssociations     */    @Override    public String postTeacherSectionAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "teacherSectionAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSectionAssociations     */    @Override    public List<Entity> getTeacherSectionAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForTeacherSectionAssociationsByTeacherSectionAssociationId     */    @Override    public List<Entity> getSectionsForTeacherSectionAssociationsByTeacherSectionAssociationId(final String token,            final List<String> teacherSectionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s/sections",                    StringUtils.join(teacherSectionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeachersForTeacherSectionAssociationsByTeacherSectionAssociationId     */    @Override    public List<Entity> getTeachersForTeacherSectionAssociationsByTeacherSectionAssociationId(final String token,            final List<String> teacherSectionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s/teachers",                    StringUtils.join(teacherSectionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteTeacherSectionAssociationsById     */    @Override    public void deleteTeacherSectionAssociationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSectionAssociationsById     */    @Override    public List<Entity> getTeacherSectionAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putTeacherSectionAssociationsById     */    @Override    public void putTeacherSectionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForTeacherSectionAssociationsById     */    @Override    public void deleteCustomForTeacherSectionAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForTeacherSectionAssociationsById     */    @Override    public List<Entity> getCustomForTeacherSectionAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForTeacherSectionAssociationsById     */    @Override    public void putCustomForTeacherSectionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForTeacherSectionAssociationsById     */    @Override    public String postCustomForTeacherSectionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("teacherSectionAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postSessions     */    @Override    public String postSessions(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "sessions";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSessions     */    @Override    public List<Entity> getSessions(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("sessions");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteSessionsBySessionId     */    @Override    public void deleteSessionsBySessionId(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("sessions/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSessionsBySessionId     */    @Override    public List<Entity> getSessionsBySessionId(final String token, final List<String> sessionId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s", StringUtils.join(sessionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putSessionsBySessionId     */    @Override    public void putSessionsBySessionId(final String token, final String sessionId, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s", sessionId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseOfferingsForSessionsBySessionId     */    @Override    public List<Entity> getCourseOfferingsForSessionsBySessionId(final String token, final List<String> sessionId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s/courseOfferings", StringUtils.join(sessionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCoursesForCourseOfferingsForSessionsBySessionId     */    @Override    public List<Entity> getCoursesForCourseOfferingsForSessionsBySessionId(final String token,            final List<String> sessionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s/courseOfferings/courses", StringUtils.join(sessionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolSessionAssociationsForSessionsBySchoolId     */    @Override    public List<Entity> getSchoolSessionAssociationsForSessionsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s/schoolSessionAssociations", StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsForSchoolSessionAssociationsForSessionsBySchoolId     */    @Override    public List<Entity> getSchoolsForSchoolSessionAssociationsForSessionsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s/schoolSessionAssociations/schools",                    StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForSessionsById     */    @Override    public void deleteCustomForSessionsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("sessions/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForSessionsById     */    @Override    public List<Entity> getCustomForSessionsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForSessionsById     */    @Override    public void putCustomForSessionsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("sessions/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForSessionsById     */    @Override    public String postCustomForSessionsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("sessions/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCourseTranscripts     */    @Override    public String postCourseTranscripts(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "courseTranscripts";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseTranscripts     */    @Override    public List<Entity> getCourseTranscripts(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("courseTranscripts");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCoursesForCourseTranscriptsByCourseTranscriptId     */    @Override    public List<Entity> getCoursesForCourseTranscriptsByCourseTranscriptId(final String token,            final List<String> courseTranscriptId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String                    .format("courseTranscripts/%s/courses", StringUtils.join(courseTranscriptId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForCourseTranscriptsByCourseTranscriptId     */    @Override    public List<Entity> getStudentsForCourseTranscriptsByCourseTranscriptId(final String token,            final List<String> courseTranscriptId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s/students",                    StringUtils.join(courseTranscriptId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCourseTranscriptsById     */    @Override    public void deleteCourseTranscriptsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCourseTranscriptsById     */    @Override    public List<Entity> getCourseTranscriptsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCourseTranscriptsById     */    @Override    public void putCourseTranscriptsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForCourseTranscriptsById     */    @Override    public void deleteCustomForCourseTranscriptsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForCourseTranscriptsById     */    @Override    public List<Entity> getCustomForCourseTranscriptsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForCourseTranscriptsById     */    @Override    public void putCustomForCourseTranscriptsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForCourseTranscriptsById     */    @Override    public String postCustomForCourseTranscriptsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("courseTranscripts/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postAttendances     */    @Override    public String postAttendances(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "attendances";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAttendances     */    @Override    public List<Entity> getAttendances(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("attendances");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteAttendancesById     */    @Override    public void deleteAttendancesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("attendances/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAttendancesById     */    @Override    public List<Entity> getAttendancesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("attendances/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putAttendancesById     */    @Override    public void putAttendancesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("attendances/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForAttendancesById     */    @Override    public void deleteCustomForAttendancesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("attendances/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForAttendancesById     */    @Override    public List<Entity> getCustomForAttendancesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("attendances/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForAttendancesById     */    @Override    public void putCustomForAttendancesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("attendances/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForAttendancesById     */    @Override    public String postCustomForAttendancesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("attendances/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStaffCohortAssociations     */    @Override    public String postStaffCohortAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "staffCohortAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffCohortAssociations     */    @Override    public List<Entity> getStaffCohortAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStaffCohortAssociationsByStaffCohortAssociationId     */    @Override    public void deleteStaffCohortAssociationsByStaffCohortAssociationId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffCohortAssociationsByStaffCohortAssociationId     */    @Override    public List<Entity> getStaffCohortAssociationsByStaffCohortAssociationId(final String token,            final List<String> staffCohortAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s",                    StringUtils.join(staffCohortAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStaffCohortAssociationsByStaffCohortAssociationId     */    @Override    public void putStaffCohortAssociationsByStaffCohortAssociationId(final String token,            final String staffCohortAssociationId, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s", staffCohortAssociationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffForStaffCohortAssociationsByStaffCohortAssociationId     */    @Override    public List<Entity> getStaffForStaffCohortAssociationsByStaffCohortAssociationId(final String token,            final List<String> staffCohortAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s/staff",                    StringUtils.join(staffCohortAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCohortsForStaffCohortAssociationsByStaffCohortAssociationId     */    @Override    public List<Entity> getCohortsForStaffCohortAssociationsByStaffCohortAssociationId(final String token,            final List<String> staffCohortAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s/cohorts",                    StringUtils.join(staffCohortAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStaffCohortAssociationsById     */    @Override    public void deleteCustomForStaffCohortAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStaffCohortAssociationsById     */    @Override    public List<Entity> getCustomForStaffCohortAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStaffCohortAssociationsById     */    @Override    public void putCustomForStaffCohortAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStaffCohortAssociationsById     */    @Override    public String postCustomForStaffCohortAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("staffCohortAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postGrades     */    @Override    public String postGrades(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "grades";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGrades     */    @Override    public List<Entity> getGrades(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("grades");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteGradesById     */    @Override    public void deleteGradesById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("grades/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getGradesById     */    @Override    public List<Entity> getGradesById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("grades/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putGradesById     */    @Override    public void putGradesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("grades/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForGradesById     */    @Override    public void deleteCustomForGradesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("grades/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForGradesById     */    @Override    public List<Entity> getCustomForGradesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("grades/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForGradesById     */    @Override    public void putCustomForGradesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("grades/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForGradesById     */    @Override    public String postCustomForGradesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("grades/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postSchools     */    @Override    public String postSchools(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "schools";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchools     */    @Override    public List<Entity> getSchools(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("schools");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSchoolAssociationsForSchoolsBySchoolId     */    @Override    public List<Entity> getTeacherSchoolAssociationsForSchoolsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/teacherSchoolAssociations", StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeachersForTeacherSchoolAssociationsForSchoolsBySchoolId     */    @Override    public List<Entity> getTeachersForTeacherSchoolAssociationsForSchoolsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/teacherSchoolAssociations/teachers",                    StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSchoolAssociationsForSchoolsBySchoolId     */    @Override    public List<Entity> getStudentSchoolAssociationsForSchoolsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/studentSchoolAssociations", StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentSchoolAssociationsForSchoolsBySchoolId     */    @Override    public List<Entity> getStudentsForStudentSchoolAssociationsForSchoolsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/studentSchoolAssociations/students",                    StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForSchoolsBySchoolId     */    @Override    public List<Entity> getSectionsForSchoolsBySchoolId(final String token, final List<String> schoolId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/sections", StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolSessionAssociationsForSchoolsBySchoolId     */    @Override    public List<Entity> getSchoolSessionAssociationsForSchoolsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/schoolSessionAssociations", StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSessionsForSchoolSessionAssociationsForSchoolsBySchoolId     */    @Override    public List<Entity> getSessionsForSchoolSessionAssociationsForSchoolsBySchoolId(final String token,            final List<String> schoolId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/schoolSessionAssociations/sessions",                    StringUtils.join(schoolId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteSchoolsById     */    @Override    public void deleteSchoolsById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSchoolsById     */    @Override    public List<Entity> getSchoolsById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putSchoolsById     */    @Override    public void putSchoolsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("schools/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForSchoolsById     */    @Override    public void deleteCustomForSchoolsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("schools/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForSchoolsById     */    @Override    public List<Entity> getCustomForSchoolsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForSchoolsById     */    @Override    public void putCustomForSchoolsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("schools/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForSchoolsById     */    @Override    public String postCustomForSchoolsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("schools/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postReportCards     */    @Override    public String postReportCards(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "reportCards";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getReportCards     */    @Override    public List<Entity> getReportCards(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("reportCards");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteReportCardsById     */    @Override    public void deleteReportCardsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("reportCards/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getReportCardsById     */    @Override    public List<Entity> getReportCardsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("reportCards/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putReportCardsById     */    @Override    public void putReportCardsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("reportCards/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForReportCardsById     */    @Override    public void deleteCustomForReportCardsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("reportCards/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForReportCardsById     */    @Override    public List<Entity> getCustomForReportCardsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("reportCards/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForReportCardsById     */    @Override    public void putCustomForReportCardsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("reportCards/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForReportCardsById     */    @Override    public String postCustomForReportCardsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("reportCards/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentCompetencyObjectives     */    @Override    public String postStudentCompetencyObjectives(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentCompetencyObjectives";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCompetencyObjectives     */    @Override    public List<Entity> getStudentCompetencyObjectives(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentCompetencyObjectivesById     */    @Override    public void deleteStudentCompetencyObjectivesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCompetencyObjectivesById     */    @Override    public List<Entity> getStudentCompetencyObjectivesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentCompetencyObjectivesById     */    @Override    public void putStudentCompetencyObjectivesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentCompetencyObjectivesById     */    @Override    public void deleteCustomForStudentCompetencyObjectivesById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentCompetencyObjectivesById     */    @Override    public List<Entity> getCustomForStudentCompetencyObjectivesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentCompetencyObjectivesById     */    @Override    public void putCustomForStudentCompetencyObjectivesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentCompetencyObjectivesById     */    @Override    public String postCustomForStudentCompetencyObjectivesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCompetencyObjectives/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postSections     */    @Override    public String postSections(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "sections";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSections     */    @Override    public List<Entity> getSections(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("sections");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionAssessmentAssociationsForSectionsBySectionId     */    @Override    public List<Entity> getSectionAssessmentAssociationsForSectionsBySectionId(final String token,            final List<String> sectionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/sectionAssessmentAssociations",                    StringUtils.join(sectionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSectionAssociationsForSectionsBySectionId     */    @Override    public List<Entity> getStudentSectionAssociationsForSectionsBySectionId(final String token,            final List<String> sectionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/studentSectionAssociations",                    StringUtils.join(sectionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentSectionAssociationsForSectionsBySectionId     */    @Override    public List<Entity> getStudentsForStudentSectionAssociationsForSectionsBySectionId(final String token,            final List<String> sectionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/studentSectionAssociations/students",                    StringUtils.join(sectionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeacherSectionAssociationsForSectionsBySectionId     */    @Override    public List<Entity> getTeacherSectionAssociationsForSectionsBySectionId(final String token,            final List<String> sectionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/teacherSectionAssociations",                    StringUtils.join(sectionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getTeachersForTeacherSectionAssociationsForSectionsBySectionId     */    @Override    public List<Entity> getTeachersForTeacherSectionAssociationsForSectionsBySectionId(final String token,            final List<String> sectionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/teacherSectionAssociations/teachers",                    StringUtils.join(sectionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAssessmentsForSectionAssessmentAssociationsForSectionsBySectionId     */    @Override    public List<Entity> getAssessmentsForSectionAssessmentAssociationsForSectionsBySectionId(final String token,            final List<String> sectionId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/sectionAssessmentAssociations/assessments",                    StringUtils.join(sectionId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteSectionsById     */    @Override    public void deleteSectionsById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsById     */    @Override    public List<Entity> getSectionsById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putSectionsById     */    @Override    public void putSectionsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("sections/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForSectionsById     */    @Override    public void deleteCustomForSectionsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("sections/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForSectionsById     */    @Override    public List<Entity> getCustomForSectionsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForSectionsById     */    @Override    public void putCustomForSectionsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("sections/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForSectionsById     */    @Override    public String postCustomForSectionsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("sections/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentCohortAssociations     */    @Override    public String postStudentCohortAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentCohortAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCohortAssociations     */    @Override    public List<Entity> getStudentCohortAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentCohortAssociationsByStudentCohortAssociationId     */    @Override    public void deleteStudentCohortAssociationsByStudentCohortAssociationId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCohortAssociationsByStudentCohortAssociationId     */    @Override    public List<Entity> getStudentCohortAssociationsByStudentCohortAssociationId(final String token,            final List<String> studentCohortAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s",                    StringUtils.join(studentCohortAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentCohortAssociationsByStudentCohortAssociationId     */    @Override    public void putStudentCohortAssociationsByStudentCohortAssociationId(final String token,            final String studentCohortAssociationId, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s", studentCohortAssociationId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentCohortAssociationsByStudentCohortAssociationId     */    @Override    public List<Entity> getStudentsForStudentCohortAssociationsByStudentCohortAssociationId(final String token,            final List<String> studentCohortAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s/students",                    StringUtils.join(studentCohortAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCohortsForStudentCohortAssociationsByStudentCohortAssociationId     */    @Override    public List<Entity> getCohortsForStudentCohortAssociationsByStudentCohortAssociationId(final String token,            final List<String> studentCohortAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s/cohorts",                    StringUtils.join(studentCohortAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentCohortAssociationsById     */    @Override    public void deleteCustomForStudentCohortAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentCohortAssociationsById     */    @Override    public List<Entity> getCustomForStudentCohortAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentCohortAssociationsById     */    @Override    public void putCustomForStudentCohortAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentCohortAssociationsById     */    @Override    public String postCustomForStudentCohortAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentCohortAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postLearningObjectives     */    @Override    public String postLearningObjectives(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "learningObjectives";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningObjectives     */    @Override    public List<Entity> getLearningObjectives(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("learningObjectives");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCompetenciesForLearningObjectivesByLearningObjectiveId     */    @Override    public List<Entity> getStudentCompetenciesForLearningObjectivesByLearningObjectiveId(final String token,            final List<String> learningObjectiveId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/studentCompetencies",                    StringUtils.join(learningObjectiveId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningStandardsForLearningObjectivesByLearningObjectiveId     */    @Override    public List<Entity> getLearningStandardsForLearningObjectivesByLearningObjectiveId(final String token,            final List<String> learningObjectiveId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/learningStandards",                    StringUtils.join(learningObjectiveId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getParentLearningObjectivesForLearningObjectivesByLearningObjectiveId     */    @Override    public List<Entity> getParentLearningObjectivesForLearningObjectivesByLearningObjectiveId(final String token,            final List<String> learningObjectiveId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/parentLearningObjectives",                    StringUtils.join(learningObjectiveId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getChildLearningObjectivesForLearningObjectivesByLearningObjectiveId     */    @Override    public List<Entity> getChildLearningObjectivesForLearningObjectivesByLearningObjectiveId(final String token,            final List<String> learningObjectiveId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/childLearningObjectives",                    StringUtils.join(learningObjectiveId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteLearningObjectivesById     */    @Override    public void deleteLearningObjectivesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getLearningObjectivesById     */    @Override    public List<Entity> getLearningObjectivesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("learningObjectives/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putLearningObjectivesById     */    @Override    public void putLearningObjectivesById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForLearningObjectivesById     */    @Override    public void deleteCustomForLearningObjectivesById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForLearningObjectivesById     */    @Override    public List<Entity> getCustomForLearningObjectivesById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForLearningObjectivesById     */    @Override    public void putCustomForLearningObjectivesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForLearningObjectivesById     */    @Override    public String postCustomForLearningObjectivesById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("learningObjectives/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentSectionAssociations     */    @Override    public String postStudentSectionAssociations(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentSectionAssociations";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSectionAssociations     */    @Override    public List<Entity> getStudentSectionAssociations(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentSectionAssociationsByStudentSectionAssociationId     */    @Override    public List<Entity> getStudentsForStudentSectionAssociationsByStudentSectionAssociationId(final String token,            final List<String> studentSectionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/students",                    StringUtils.join(studentSectionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getSectionsForStudentSectionAssociationsByStudentSectionAssociationId     */    @Override    public List<Entity> getSectionsForStudentSectionAssociationsByStudentSectionAssociationId(final String token,            final List<String> studentSectionAssociationId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/sections",                    StringUtils.join(studentSectionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentCompetenciesForStudentSectionAssociationsByStudentSectionAssociationId     */    @Override    public List<Entity> getStudentCompetenciesForStudentSectionAssociationsByStudentSectionAssociationId(            final String token, final List<String> studentSectionAssociationId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/studentCompetencies",                    StringUtils.join(studentSectionAssociationId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentSectionAssociationsById     */    @Override    public void deleteStudentSectionAssociationsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentSectionAssociationsById     */    @Override    public List<Entity> getStudentSectionAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentSectionAssociationsById     */    @Override    public void putStudentSectionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentSectionAssociationsById     */    @Override    public void deleteCustomForStudentSectionAssociationsById(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentSectionAssociationsById     */    @Override    public List<Entity> getCustomForStudentSectionAssociationsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentSectionAssociationsById     */    @Override    public void putCustomForStudentSectionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentSectionAssociationsById     */    @Override    public String postCustomForStudentSectionAssociationsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentSectionAssociations/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postPrograms     */    @Override    public String postPrograms(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "programs";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getPrograms     */    @Override    public List<Entity> getPrograms(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("programs");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteProgramsByProgramId     */    @Override    public void deleteProgramsByProgramId(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("programs/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getProgramsByProgramId     */    @Override    public List<Entity> getProgramsByProgramId(final String token, final List<String> programId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s", StringUtils.join(programId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putProgramsByProgramId     */    @Override    public void putProgramsByProgramId(final String token, final String programId, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s", programId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffForStaffProgramAssociationsForProgramsByProgramId     */    @Override    public List<Entity> getStaffForStaffProgramAssociationsForProgramsByProgramId(final String token,            final List<String> programId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s/staffProgramAssociations/staff",                    StringUtils.join(programId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentProgramAssociationsForProgramsByProgramId     */    @Override    public List<Entity> getStudentProgramAssociationsForProgramsByProgramId(final String token,            final List<String> programId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s/studentProgramAssociations",                    StringUtils.join(programId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentProgramAssociationsForProgramsByProgramId     */    @Override    public List<Entity> getStudentsForStudentProgramAssociationsForProgramsByProgramId(final String token,            final List<String> programId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s/studentProgramAssociations/students",                    StringUtils.join(programId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffProgramAssociationsForProgramsByProgramId     */    @Override    public List<Entity> getStaffProgramAssociationsForProgramsByProgramId(final String token,            final List<String> programId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s/staffProgramAssociations", StringUtils.join(programId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForProgramsById     */    @Override    public void deleteCustomForProgramsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("programs/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForProgramsById     */    @Override    public List<Entity> getCustomForProgramsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForProgramsById     */    @Override    public void putCustomForProgramsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("programs/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForProgramsById     */    @Override    public String postCustomForProgramsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("programs/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postParents     */    @Override    public String postParents(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "parents";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getParents     */    @Override    public List<Entity> getParents(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("parents");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteParentsByParentId     */    @Override    public void deleteParentsByParentId(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("parents/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getParentsByParentId     */    @Override    public List<Entity> getParentsByParentId(final String token, final List<String> parentId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("parents/%s", StringUtils.join(parentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putParentsByParentId     */    @Override    public void putParentsByParentId(final String token, final String parentId, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("parents/%s", parentId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentParentAssociationsForParentsByParentId     */    @Override    public List<Entity> getStudentParentAssociationsForParentsByParentId(final String token,            final List<String> parentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("parents/%s/studentParentAssociations", StringUtils.join(parentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentParentAssociationsForParentsByParentId     */    @Override    public List<Entity> getStudentsForStudentParentAssociationsForParentsByParentId(final String token,            final List<String> parentId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("parents/%s/studentParentAssociations/students",                    StringUtils.join(parentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForParentsById     */    @Override    public void deleteCustomForParentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("parents/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForParentsById     */    @Override    public List<Entity> getCustomForParentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("parents/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForParentsById     */    @Override    public void putCustomForParentsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("parents/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForParentsById     */    @Override    public String postCustomForParentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("parents/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postDisciplineIncidents     */    @Override    public String postDisciplineIncidents(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "disciplineIncidents";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getDisciplineIncidents     */    @Override    public List<Entity> getDisciplineIncidents(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteDisciplineIncidentsByDisciplineIncidentId     */    @Override    public void deleteDisciplineIncidentsByDisciplineIncidentId(final String token, final String entityId)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getDisciplineIncidentsByDisciplineIncidentId     */    @Override    public List<Entity> getDisciplineIncidentsByDisciplineIncidentId(final String token,            final List<String> disciplineIncidentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s", StringUtils.join(disciplineIncidentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putDisciplineIncidentsByDisciplineIncidentId     */    @Override    public void putDisciplineIncidentsByDisciplineIncidentId(final String token, final String disciplineIncidentId,            final Entity entity) throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s", disciplineIncidentId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentDisciplineIncidentAssociationsForDisciplineIncidentsByDisciplineIncidentId     */    @Override    public List<Entity> getStudentDisciplineIncidentAssociationsForDisciplineIncidentsByDisciplineIncidentId(            final String token, final List<String> disciplineIncidentId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s/studentDisciplineIncidentAssociations",                    StringUtils.join(disciplineIncidentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentDisciplineIncidentAssociationsForDisciplineIncidentsByDisciplineIncidentId     */    @Override    public List<Entity> getStudentsForStudentDisciplineIncidentAssociationsForDisciplineIncidentsByDisciplineIncidentId(            final String token, final List<String> disciplineIncidentId, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s/studentDisciplineIncidentAssociations/students",                    StringUtils.join(disciplineIncidentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForDisciplineIncidentsById     */    @Override    public void deleteCustomForDisciplineIncidentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForDisciplineIncidentsById     */    @Override    public List<Entity> getCustomForDisciplineIncidentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForDisciplineIncidentsById     */    @Override    public void putCustomForDisciplineIncidentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForDisciplineIncidentsById     */    @Override    public String postCustomForDisciplineIncidentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("disciplineIncidents/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStaff     */    @Override    public String postStaff(final String token, final Entity entity) throws IOException, StatusCodeException {        try {            final String path = "staff";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaff     */    @Override    public List<Entity> getStaff(final String token, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("staff");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getProgramsForStaffProgramAssociationsForStaffByStaffId     */    @Override    public List<Entity> getProgramsForStaffProgramAssociationsForStaffByStaffId(final String token,            final List<String> staffId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s/staffProgramAssociations/programs",                    StringUtils.join(staffId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffCohortAssociationsForStaffByStaffId     */    @Override    public List<Entity> getStaffCohortAssociationsForStaffByStaffId(final String token, final List<String> staffId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s/staffCohortAssociations", StringUtils.join(staffId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffEducationOrgAssignmentAssociationsForStaffByStaffId     */    @Override    public List<Entity> getStaffEducationOrgAssignmentAssociationsForStaffByStaffId(final String token,            final List<String> staffId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s/staffEducationOrgAssignmentAssociations",                    StringUtils.join(staffId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffProgramAssociationsForStaffByStaffId     */    @Override    public List<Entity> getStaffProgramAssociationsForStaffByStaffId(final String token, final List<String> staffId,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s/staffProgramAssociations", StringUtils.join(staffId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getEducationOrganizationsForStaffEducationOrgAssignmentAssociationsForStaffByStaffId     */    @Override    public List<Entity> getEducationOrganizationsForStaffEducationOrgAssignmentAssociationsForStaffByStaffId(            final String token, final List<String> staffId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format(                    "staff/%s/staffEducationOrgAssignmentAssociations/educationOrganizations",                    StringUtils.join(staffId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCohortsForStaffCohortAssociationsForStaffByStaffId     */    @Override    public List<Entity> getCohortsForStaffCohortAssociationsForStaffByStaffId(final String token,            final List<String> staffId, final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s/staffCohortAssociations/cohorts",                    StringUtils.join(staffId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStaffById     */    @Override    public void deleteStaffById(final String token, final String entityId) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStaffById     */    @Override    public List<Entity> getStaffById(final String token, final List<String> id, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStaffById     */    @Override    public void putStaffById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("staff/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStaffById     */    @Override    public void deleteCustomForStaffById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("staff/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStaffById     */    @Override    public List<Entity> getCustomForStaffById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("staff/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStaffById     */    @Override    public void putCustomForStaffById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("staff/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStaffById     */    @Override    public String postCustomForStaffById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("staff/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postStudentAssessments     */    @Override    public String postStudentAssessments(final String token, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = "studentAssessments";            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentAssessments     */    @Override    public List<Entity> getStudentAssessments(final String token, final Map<String, Object> queryArgs)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAssessments");            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getAssessmentsForStudentAssessmentsByStudentAssessmentId     */    @Override    public List<Entity> getAssessmentsForStudentAssessmentsByStudentAssessmentId(final String token,            final List<String> studentAssessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentAssessments/%s/assessments",                    StringUtils.join(studentAssessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentsForStudentAssessmentsByStudentAssessmentId     */    @Override    public List<Entity> getStudentsForStudentAssessmentsByStudentAssessmentId(final String token,            final List<String> studentAssessmentId, final Map<String, Object> queryArgs) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentAssessments/%s/students",                    StringUtils.join(studentAssessmentId, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteStudentAssessmentsById     */    @Override    public void deleteStudentAssessmentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentAssessments/%s", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getStudentAssessmentsById     */    @Override    public List<Entity> getStudentAssessmentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentAssessments/%s", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putStudentAssessmentsById     */    @Override    public void putStudentAssessmentsById(final String token, final String id, final Entity entity) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentAssessments/%s", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * deleteCustomForStudentAssessmentsById     */    @Override    public void deleteCustomForStudentAssessmentsById(final String token, final String entityId) throws IOException,            StatusCodeException {        try {            final String path = String.format("studentAssessments/%s/custom", entityId);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.delete(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * getCustomForStudentAssessmentsById     */    @Override    public List<Entity> getCustomForStudentAssessmentsById(final String token, final List<String> id,            final Map<String, Object> queryArgs) throws IOException, StatusCodeException {        try {            final String path = String.format("studentAssessments/%s/custom", StringUtils.join(id, ','));            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path).query(queryArgs);            final URI uri = builder.build();            return client.get(token, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * putCustomForStudentAssessmentsById     */    @Override    public void putCustomForStudentAssessmentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAssessments/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            client.put(token, entity, uri);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }    /**     * postCustomForStudentAssessmentsById     */    @Override    public String postCustomForStudentAssessmentsById(final String token, final String id, final Entity entity)            throws IOException, StatusCodeException {        try {            final String path = String.format("studentAssessments/%s/custom", id);            final URIBuilder builder = URIBuilder.baseUri(baseUri).addPath(path);            final URI uri = builder.build();            final URI postedURI = client.post(token, entity, uri);            return URIHelper.stripId(postedURI);        } catch (final URISyntaxException e) {            throw new AssertionError(e);        }    }}
###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "school",
                  "section",
                  "studentSectionAssociation",
                  "teacher",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""
  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit, :peopleInit] do
  setFixture("realm", "realm_fixture.json")
end

task :realmInitNoPeople => [:appInit] do
  setFixture("realm", "realm_fixture.json")
end

task :peopleInit do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("staff", "staff_fixture.json")
end

# Task that initializes the application registration fixture
task :appInit do
  setFixture("application", "application_fixture.json")
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


#desc "Run Liferay Tests"
#task :liferay => [:liferayTest] do
 # displayFailureReport()
#  if $SUCCESS
 #   puts "Completed All Tests"
 # else
 #   raise "Tests have failed"
 # end
#end

###########################################################
#SLI Liferay testing
###########################################################

#desc "Run the testing for life ray SLI for admin"
#task :liferayTest do
#  runTests("test/features/liferay/SLI_admin.feature")
#  runTests("test/features/liferay/SLI_normal_user.feature")
#  runTests("test/features/liferay/NY_Realm_EULA_agree.feature")
 # runTests("test/features/liferay/report_problem.feature")

# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")

#end




############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:ingestionAcceptanceSdsTest, :ingestionDemoDataTest, :ingestionSessionTest, :ingestionNegativeTests, :ingestionAttendanceTests,
                         :ingestionEncryptionTests, :ingestionAssessmentTests, :ingestionStudentParentsTests, :ingestionStudentTranscriptAssociationTests, :ingestionProgramTest,
                         :ingestionidNamespaceTest, :ingestionGradebookEntryTests, :ingestionSmooksVerificationTests, :ingestionXsdValidationTest, :ingestionOfflineSimpleTest,
                         :ingestionAPAssessmentTests, :ingestionACTAssessmentTests,:ingestionStudentProgramAssociationTest, :ingestionBatchJobTest, :ingestionIDReferenceResolutionTest, :ingestionTenantPurgeTests, :ingestionStaffProgramAssociationTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Demo Tests"
task :ingestionDemoDataTest do
  runTests("test/features/ingestion/features/ingestion_demo.feature")
end

desc "Run Ingestion Acceptance SDS Tests"
task :ingestionAcceptanceSdsTest do
  runTests("test/features/ingestion/features/ingestion_acceptance_SDS_test.feature")
end

desc "Run Ingestion Session Test"
task :ingestionSessionTest do
  runTests("test/features/ingestion/features/ingestion_session.feature")
end

desc "Run Ingestion Program Test"
task :ingestionProgramTest do
  runTests("test/features/ingestion/features/ingestion_program.feature")
end

desc "Run Ingestion StudentProgramAssociation Test"
task :ingestionStudentProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StudentProgramAssociation.feature")
end

desc "Run Ingestion StaffProgramAssociation Test"
task :ingestionStaffProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StaffProgramAssociation.feature")
end

desc "Run Ingestion Negative Tests"
task :ingestionNegativeTests do
  runTests("test/features/ingestion/features/negative_testing.feature")
end

desc "Run Ingestion Smooks Verification Tests"
task :ingestionSmooksVerificationTests do
  runTests("test/features/ingestion/features/smooks_verification.feature")
end

desc "Run Ingestion Encryption Tests"
task :ingestionEncryptionTests do
  runTests("test/features/ingestion/features/encryption_testing.feature")
end

desc "Run Ingestion Daily Attendance Tests"
task :ingestionAttendanceTests do
  runTests("test/features/ingestion/features/ingestion_daily_attendance.feature")
end

desc "Run Ingestion Assessment Tests"
task :ingestionAssessmentTests do
  runTests("test/features/ingestion/features/ingestion_assessment_metadata.feature")
end

desc "Run Student Parents Tests"
task :ingestionStudentParentsTests do
  runTests("test/features/ingestion/features/ingestion_student_parents.feature")
end

desc "Run Student Transcript Association Test"
task :ingestionStudentTranscriptAssociationTests do
  runTests("test/features/ingestion/features/ingestion_StudentTranscriptAssociation.feature")
end

desc "Run idNamespace Test"
task :ingestionidNamespaceTest do
  runTests("test/features/ingestion/features/ingestion_idNamespace.feature")
end

desc "Run Ingestion Gradebook Entry Test"
task :ingestionGradebookEntryTests do
  runTests("test/features/ingestion/features/ingestion_GradebookEntry.feature")
end

desc "Run Ingestion Batch Job Tests"
task :ingestionBatchJobTest do
  runTests("test/features/ingestion/features/ingestion_BatchJob.feature")
end

desc "Run Ingestion XSD Validation Test"
task :ingestionXsdValidationTest do
  runTests("test/features/ingestion/features/xsd_validation.feature")
end

desc "Run Ingestion AP Assessment and StudentAssessment Tests"
task :ingestionAPAssessmentTests do
  runTests("test/features/ingestion/features/apAssessment.feature")
end

desc "Run Ingestion ACT Assessment Tests"
task :ingestionACTAssessmentTests do
  runTests("test/features/ingestion/features/ACTAssessment.feature")
end

desc "Run Ingestion Ed-Fi ID Reference Resolution Test"
task :ingestionIDReferenceResolutionTest do
  runTests("test/features/ingestion/features/ingestion_IDRef.feature")
end

# This task SHOULD NOT BE ADDED to the general ingestion test suite
desc "Run Ingestion Performance Tests"
task :ingestionPerformanceTest do
  runTests("test/features/ingestion/features/performance_testing.feature")
end

desc "Run Ingestion Database Performance Tests"
task :ingestionMongoDBPerformanceTest do
  runTests("test/features/ingestion/features/ingestion_mongo_performance.feature")
end

############################################################
# Ingestion Offline Tool tests start
############################################################
desc "Run Ingestion Offline Tool Acceptances Tests"
task :ingestionOfflineToolTests => [:ingestionOfflineSimpleTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Offline Tool Simple Test"
task :ingestionOfflineSimpleTest do
  runTests("test/features/ingestion/features/offline_validation.feature")
end

desc "Run Tenant Purge Test"
task :ingestionTenantPurgeTests do
  runTests("test/features/ingestion/features/tenant_purge.feature")
end

########
############################################################
# Ingestion tests end
############################################################

############################################################
# API V1 tests start
############################################################
desc "Run API V1 acceptance tests"
task :apiV1Tests => [:apiV1EntityTests,
                     :apiV1AssociationTests,
                     :v1homeUriTests,
                     :v1ValidationTests,
                     :v1HierarchyTraversalTests,
                     :v1DirectReferencesTests,
                     :v1DirectReferenceCollectionsTests,
                     :v1CascadeDeletionTests,
                     :v1EncryptionTests,
                     :v1SortingAndPagingTests,
                     :v1ListTests,
                     :v1TargetTests,
                     :v1EndUserStoryAssessmentTests,
                     :v1EndUserStoryCustomEntityTests,
                     :v1StudentOptionalFieldsTests,
                     :v1SingleStudentViewTests,
                     :v1XMLTests] do
  displayFailureReport()
end

task :apiV1EntityTests => [:v1AssessmentTests,
                           :v1LearningObjectiveTests,
                           :v1AttendanceTests,
                           :v1CourseTests,
                           :v1EducationOrganizationTests,
                           :v1GradebookEntryTests,
                           :v1ParentTests,
                           :v1ParentSecurityTests,
                           :v1SchoolTests,
                           :v1SectionTests,
                           :v1SessionTests,
                           :v1StaffTests,
                           :v1StudentTests,
                           :v1StudentSectionGradebookEntryTests,
                           :v1ProgramTests,
                           :v1DisciplineIncidentTests,
                           :v1DisciplineActionTests,
                           :v1TeacherTests,
                           :v1CohortTests] do
end

task :apiV1AssociationTests => [:v1SchoolSessionAssociationTests,
                                :v1SectionAssessmentAssociationTests,
                                :v1SessionCourseAssociationTests,
                                :v1StaffEdOrgAssociationTests,
                                :v1StaffProgramAssociationTests,
                                :v1StudentProgramAssociationTests,
                                :v1StudentAssessmentAssociationTests,
                                :v1StudentParentAssociationTests,
                                :v1StudentDisciplineIncidentAssociationTests,
                                :v1StudentSchoolAssociationTests,
                                :v1StudentSectionAssociationTests,
                                :v1StudentTranscriptAssociationTests,
                                :v1TeacherSchoolAssociationTests,
                                :v1TeacherSectionAssociationTests,
                                :v1StaffCohortAssociationTests,
                                :v1StudentCohortAssociationTests] do
end

desc "Run V1 XML Tests"
task :v1XMLTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  runTests("test/features/apiV1/xml/xml.feature")
end

desc "Run V1 Student Section Gradebook Entry Tests"
task :v1StudentSectionGradebookEntryTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("gradebookEntry", "gradebookEntry_fixture.json")
  setFixture("studentSectionGradebookEntry", "studentSectionGradebookEntry_fixture.json")
  runTests("test/features/apiV1/entities/studentSectionGradebookEntry")
end

desc "Run V1 Gradebook Entry Tests"
task :v1GradebookEntryTests => [:realmInit] do
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  runFixtureAndTests("test/features/apiV1/entities/gradebookEntry", "gradebookEntry", "gradebookEntry_fixture.json")
end

desc "Run V1 program Tests"
task :v1ProgramTests => [:realmInit] do
  setFixture("program", "program_fixture.json")
  runTests("test/features/apiV1/entities/program")
end

desc "Run V1 Discipline Incident Tests"
task :v1DisciplineIncidentTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  runTests("test/features/apiV1/entities/disciplineIncident")
end

desc "Run V1 Discipline Action Tests"
task :v1DisciplineActionTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_student_fixture.json", "test/data/smallville", false)
  setFixture("staff", "staff_fixture.json")
  setFixture("staff", "smallville_staff_fixture.json", "test/data/smallville", false)
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("disciplineAction", "disciplineAction_fixture.json")
  runTests("test/features/apiV1/entities/disciplineAction")
end

desc "Run V1 Student Discipline Incident Association Tests"
task :v1StudentDisciplineIncidentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("studentDisciplineIncidentAssociation", "studentDisciplineIncidentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentDisciplineIncidentAssociation")
end

desc "Run V1 Cascade Deletion Tests"
task :v1CascadeDeletionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/cascadeDeletion")
end

desc "Run V1 Direct References Tests"
task :v1DirectReferencesTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferences")
end

desc "Run V1 Direct Reference Collections Tests"
task :v1DirectReferenceCollectionsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferenceCollections")
end

desc "Run V1 Student Parent Association Tests"
task :v1StudentParentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("parent", "parent_fixture.json")
  setFixture("studentParentAssociation", "studentParentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentParentAssociation")
end

desc "Run V1 Student Transcript Association Tests"
task :v1StudentTranscriptAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("course", "course_fixture.json")
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("studentTranscriptAssociation", "studentTranscriptAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentTranscriptAssociation")
end

desc "Run V1 Teacher School Association Tests"
task :v1TeacherSchoolAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("teacherSchoolAssociation", "teacherSchoolAssociation_fixture.json")
  runTests("test/features/apiV1/associations/teacherSchoolAssociation")
end

desc "Run V1 Teacher Section Association Tests"
task :v1TeacherSectionAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "smallville_teacher_sections_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/associations/teacherSectionAssociation")
end

desc "Run V1 Section Assessment Association Tests"
task :v1SectionAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("section", "section_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("sectionAssessmentAssociation", "sectionAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("sectionAssessmentAssociation", "smallville_section_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sectionAssessmentAssociation")
end

desc "Run V1 Student Assessment Association Tests"
task :v1StudentAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentAssessmentAssociation", "studentAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("studentAssessmentAssociation", "smallville_student_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentAssessmentAssociation")
end

desc "Run V1 Student Section Association Tests"
task :v1StudentSectionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("studentSectionAssociation", "smallville_student_section_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSectionAssociation")
end

desc "Run V1 Staff Education Organization Association Tests"
task :v1StaffEdOrgAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("staffEducationOrganizationAssociation", "staffEducationOrganizationAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffEducationOrganizationAssociation")
end

desc "Run V1 Staff Program Association Tests"
task :v1StaffProgramAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("staffProgramAssociation", "staffProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffProgramAssociation")
end

desc "Run V1 Student Program Association Tests"
task :v1StudentProgramAssociationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("studentProgramAssociation", "studentProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentProgramAssociation")
end

desc "Run V1 School Session Association Tests"
task :v1SchoolSessionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("schoolSessionAssociation", "schoolSessionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("session", "smallville_sessions_fixture.json", "test/data/smallville", false)
  setFixture("schoolSessionAssociation", "smallville_school_session_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/schoolSessionAssociation")
end

desc "Run V1 Student School Association Tests"
task :v1StudentSchoolAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("studentSchoolAssociation", "studentSchoolAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("studentSchoolAssociation", "smallville_student_school_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSchoolAssociation")
end

desc "Run V1 Session Course Association Tests"
task :v1SessionCourseAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("session", "smallville_session_fixture.json", "test/data/smallville", false)
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("sessionCourseAssociation", "smallville_session_course_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sessionCourseAssociation")
end

desc "Run V1 Staff Cohort Association Tests"
task :v1StaffCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("staff", "staff_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("staffCohortAssociation", "staffCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/staffCohortAssociation")
end

desc "Run V1 Student Cohort Association Tests"
task :v1StudentCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("studentCohortAssociation", "studentCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/studentCohortAssociation")
end

desc "Run V1 Education Organization Tests"
task :v1EducationOrganizationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/entities/educationOrganization")
end

desc "Run V1 Staff Tests"
task :v1StaffTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/staff", "staff", "staff_fixture.json")
end

desc "Run V1 Section Tests"
task :v1SectionTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/section", "section", "section_fixture.json")
end

desc "Run V1 Course Tests"
task :v1CourseTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/course", "course", "course_fixture.json")
end

desc "Run V1 Session Tests"
task :v1SessionTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/session", "session", "session_fixture.json")
end

desc "Run V1 School Tests"
task :v1SchoolTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/school", "school", "school_fixture.json")
end

desc "Run V1 Student Tests"
task :v1StudentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/student", "student", "student_fixture.json")
end

desc "Run V1 Teacher Tests"
task :v1TeacherTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run V1 Assessment Tests"
task :v1AssessmentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run V1 LearningObjective Tests"
task :v1LearningObjectiveTests => [:realmInit] do
  setFixture("learningStandard", "learningStandard_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/learningObjective","learningObjective","learningObjective_fixture.json")
end

desc "Run V1 LearningStandard Tests"
task :v1LearningStandardTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/learningStandard","learningStandard","learningStandard_fixture.json")
end

desc "Run V1 Parent Tests"
task :v1ParentTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/parent/parent_crud.feature","parent","parent_fixture.json")
end

desc "Run V1 Parent Security Tests"
task :v1ParentSecurityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/parent/parent_security.feature")
end

desc "Run V1 Attendance Tests"
task :v1AttendanceTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/attendance/attendance.feature","attendance","attendance_fixture.json")
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/attendance/attendance_security.feature")
end

desc "Run V1 Cohort Tests"
task :v1CohortTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runFixtureAndTests("test/features/apiV1/entities/cohort","cohort","cohort_fixture.json")
end

desc "Run V1 Home URI Tests"
task :v1homeUriTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/home_uri")
end

desc "Run V1 Hierachy Traversal Tests"
task :v1HierarchyTraversalTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/hierarchyTraversal")
end

desc "Run V1 Validation Tests"
task :v1ValidationTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("teacher", "teacher_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  runTests("test/features/apiV1/validation")
end

desc "Run Sorting and Paging Tests"
task :v1SortingAndPagingTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/sorting_paging")
end

desc "Run Encryption Tests"
task :v1EncryptionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/encryption")
end

desc "Run Target Tests"
task :v1TargetTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/targets")
end

desc "Run List Tests"
task :v1ListTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/lists")
end

desc "Run V1 Assessment User Story Tests"
task :v1EndUserStoryAssessmentTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/assessments/assessment.feature")
end

desc "Run V1 Custom entity User Story Tests"
task :v1EndUserStoryCustomEntityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/CustomEntities/CustomEntities.feature")
end

desc "Run V1 Student Optional Fields Tests"
task :v1StudentOptionalFieldsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/student_optional_fields.feature")
end

desc "Run V1 Single Student View Tests"
task :v1SingleStudentViewTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/single_student_view.feature")
end

############################################################
# API V1 tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests => [:adminToolsTests, :databrowserTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Admin-Tools Selenium Tests"
task :adminToolsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/admintools")
  Rake::Task["importSandboxData"].execute
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Dataprowler Selenium Tests"
task :databrowserTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/databrowser/databrowser_simple_detail_view.feature")
  runTests("test/features/databrowser/databrowser_denial.feature")
  runTests("test/features/databrowser/critical_auth_bugfix.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


desc "Run IDP Authentication Selenium Tests"
task :idpAuthTests => [:realmInit] do
  runTests("test/features/databrowser/idp_authentication.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Sandbox Mock IDP Authentication Selenium Tests"
task :mockIDPAuthTests => [:realmInit, :importSandboxData] do
  runTests("test/features/apiV1/end_user_stories/sandbox/mockIDP/MockIDP.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/security")
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests,
                         :dashboardK3ViewTests,
                         :dashboardHSViewTests,
                         :dashboardUserBasedViewTests,
                         :dashboardIntegratedTests,
                         :dashboardLoginTests,
                         :dashboardStudentProfileTests,
                         :dashboardAssessmentTests,
                         :dashboardAttendance,
                         :dashboardStudentHistoricalDataTests,
                         :dashboardStudentContactInfoLiveTests,
                         :dashboardStudentGradebookEntryTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end

end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget.feature")
end

desc "Run Dashboard K-3 view Tests"
task :dashboardK3ViewTests do
  runTests("test/features/dashboard/dash/k3view.feature")
end

desc "Run Dashboard High School view Tests"
task :dashboardHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view.feature")
end

desc "Run Dashboard user based view selection tests"
task :dashboardUserBasedViewTests do
  runTests("test/features/dashboard/dash/user_based_views.feature")
end

desc "Run Dashboard integration acceptance tests"
task :dashboardIntegratedTests do
    runTests("test/features/dashboard/dash/dashboard_api_integration.feature")
end


desc "Run Dashboard login acceptance tests"
task :dashboardLoginTests do
    runTests("test/features/dashboard/dash/dashboard_login.feature")
end

desc "Run Dashboard Assessment tests"
task :dashboardAssessmentTests => [:MostRecentResultTests,:HighestEverResultTests, :PerformanceLevels ] do
end

desc "Run Dashboard most recent result acceptance tests"
task :MostRecentResultTests do
    runTests("test/features/dashboard/assessments/MostRecent.feature")
end

desc "Run Dashboard highest ever result acceptance tests"
task :HighestEverResultTests do
    runTests("test/features/dashboard/assessments/Highest_AssessmentScore.feature")
end

desc "Run Dashboard performance level acceptance tests"
task :PerformanceLevels do
    runTests("test/features/dashboard/assessments/PerformanceLevels_MostRecentWindow.feature")
end

desc "Run dashboard attendance related tests"
task :dashboardAttendance do
  runTests("test/features/dashboard/dash/attendance.feature")
end

desc "Run dashboard student profile tests"
task :dashboardStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile.feature")
end

desc "Run dashboard student historical data tests"
task :dashboardStudentHistoricalDataTests do
  runTests("test/features/dashboard/students/HistoricalData.feature")
end

desc "Run dashboard student contact info live tests"
task :dashboardStudentContactInfoLiveTests do
  runTests("test/features/dashboard/dash/contact_info_live.feature")
end

desc "Run Local Dashboard Tests - Import Realm, Import Data Data, Run Tests"
task :localDashboardTests => [:realmInit,:importUnifiedData,:dashboardTests] do
end

desc "Run Dashboard Tests against SDS"
task :dashboardSdsTests => [:dashboardSdsCoreStudentsTests,
                         :dashboardSdsContactInfoTests,
                         :dashboardSdsLoginTests,
                         :dashboardSdsHSViewTests,
                         :dashboardSdsK3ViewTests,
                         :dashboardSdsPopWidgetTests,
                         :dashboardSdsStudentProfileTests,
                         :dashboardSdsUserBasedViewsTests,
                         :dashboardSdsAttendanceTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run dashboard integration tests"
task :dashboardSdsCoreStudentsTests do
  runTests("test/features/dashboard/dash/dashboard_sds.feature")
end

desc "Run dashboard integrated Tests - Student Contact info"
task :dashboardSdsContactInfoTests do
  runTests("test/features/dashboard/dash/contact_info_sds.feature")
end

desc "Run dashboard integrated Tests - Login Tests"
task :dashboardSdsLoginTests do
  runTests("test/features/dashboard/dash/dashboard_login_sds.feature")
end

desc "Run dashboard integrated Tests - High School View Tests"
task :dashboardSdsHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view_sds.feature")
end

desc "Run dashboard integrated Tests - K3 View Tests"
task :dashboardSdsK3ViewTests do
  runTests("test/features/dashboard/dash/k3view_sds.feature")
end

desc "Run dashboard integrated Tests - Population Widget Tests"
task :dashboardSdsPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget_sds.feature")
end

desc "Run dashboard integrated Tests - Population Widget Tests"
task :dashboardSdsStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile_sds.feature")
end

desc "Run dashboard integrated Tests - Population Widget Tests"
task :dashboardSdsUserBasedViewsTests do
  runTests("test/features/dashboard/dash/user_based_views_sds.feature")
end

desc "Run dashboard integrated Tests - Population Widget Tests"
task :dashboardSdsAttendanceTests do
  runTests("test/features/dashboard/dash/attendance_sds.feature")
end

desc "Run dashboard student gradebook entry tests"
task :dashboardStudentGradebookEntryTests do
  runTests("test/features/dashboard/students/StudentGradebookEntry.feature")
end

############################################################
# Dashboard tests end
############################################################

############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].invoke  
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################

############################################################
# SDK Tests
############################################################

desc "Run JavaSDK acceptance tests"
task :JavaSDKTests => [:JavaSDKSampleAppTest,:JavaSDKCRUDTest] do
    displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run JavaSDK sampleApp acceptance tests"
task :JavaSDKSampleAppTest => [:importUnifiedData, :realmInitNoPeople] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/sampleApp/sampleApp.feature")
end

desc "Run JavaSDK CRUD acceptance tests"
task :JavaSDKCRUDTest => [:realmInitNoPeople,:importStoriedData] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/CRUD/CRUD.feature")
end

############################################################
# SDK Tests end
############################################################

desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "teacher" => "teacher_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "school" => "smallville_schools_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "teacher" => "smallville_teachers_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "school" => "unified_data/uds_school.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "teacher" => "unified_data/uds_teacher.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end
###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "school",
                  "section",
                  "studentSectionAssociation",
                  "teacher",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""
  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit, :peopleInit] do
  setFixture("realm", "realm_fixture.json")
end

task :realmInitNoPeople => [:appInit] do
  setFixture("realm", "realm_fixture.json")
end

task :peopleInit do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("staff", "staff_fixture.json")
end

# Task that initializes the application registration fixture
task :appInit do
  setFixture("application", "application_fixture.json")
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


#desc "Run Liferay Tests"
#task :liferay => [:liferayTest] do
 # displayFailureReport()
#  if $SUCCESS
 #   puts "Completed All Tests"
 # else
 #   raise "Tests have failed"
 # end
#end

###########################################################
#SLI Liferay testing
###########################################################

#desc "Run the testing for life ray SLI for admin"
#task :liferayTest do
#  runTests("test/features/liferay/SLI_admin.feature")
#  runTests("test/features/liferay/SLI_normal_user.feature")
#  runTests("test/features/liferay/NY_Realm_EULA_agree.feature")
 # runTests("test/features/liferay/report_problem.feature")

# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")

#end




############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:ingestionAcceptanceSdsTest, :ingestionDemoDataTest, :ingestionSessionTest, :ingestionNegativeTests, :ingestionAttendanceTests,
                         :ingestionEncryptionTests, :ingestionAssessmentTests, :ingestionStudentParentsTests, :ingestionStudentTranscriptAssociationTests, :ingestionProgramTest,
                         :ingestionidNamespaceTest, :ingestionGradebookEntryTests, :ingestionSmooksVerificationTests, :ingestionXsdValidationTest, :ingestionOfflineSimpleTest,
                         :ingestionAPAssessmentTests, :ingestionACTAssessmentTests,:ingestionStudentProgramAssociationTest, :ingestionBatchJobTest, :ingestionIDReferenceResolutionTest, :ingestionTenantPurgeTests, :ingestionStaffProgramAssociationTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Demo Tests"
task :ingestionDemoDataTest do
  runTests("test/features/ingestion/features/ingestion_demo.feature")
end

desc "Run Ingestion Acceptance SDS Tests"
task :ingestionAcceptanceSdsTest do
  runTests("test/features/ingestion/features/ingestion_acceptance_SDS_test.feature")
end

desc "Run Ingestion Session Test"
task :ingestionSessionTest do
  runTests("test/features/ingestion/features/ingestion_session.feature")
end

desc "Run Ingestion Program Test"
task :ingestionProgramTest do
  runTests("test/features/ingestion/features/ingestion_program.feature")
end

desc "Run Ingestion StudentProgramAssociation Test"
task :ingestionStudentProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StudentProgramAssociation.feature")
end

desc "Run Ingestion StaffProgramAssociation Test"
task :ingestionStaffProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StaffProgramAssociation.feature")
end

desc "Run Ingestion Negative Tests"
task :ingestionNegativeTests do
  runTests("test/features/ingestion/features/negative_testing.feature")
end

desc "Run Ingestion Smooks Verification Tests"
task :ingestionSmooksVerificationTests do
  runTests("test/features/ingestion/features/smooks_verification.feature")
end

desc "Run Ingestion Encryption Tests"
task :ingestionEncryptionTests do
  runTests("test/features/ingestion/features/encryption_testing.feature")
end

desc "Run Ingestion Daily Attendance Tests"
task :ingestionAttendanceTests do
  runTests("test/features/ingestion/features/ingestion_daily_attendance.feature")
end

desc "Run Ingestion Assessment Tests"
task :ingestionAssessmentTests do
  runTests("test/features/ingestion/features/ingestion_assessment_metadata.feature")
end

desc "Run Student Parents Tests"
task :ingestionStudentParentsTests do
  runTests("test/features/ingestion/features/ingestion_student_parents.feature")
end

desc "Run Student Transcript Association Test"
task :ingestionStudentTranscriptAssociationTests do
  runTests("test/features/ingestion/features/ingestion_StudentTranscriptAssociation.feature")
end

desc "Run idNamespace Test"
task :ingestionidNamespaceTest do
  runTests("test/features/ingestion/features/ingestion_idNamespace.feature")
end

desc "Run Ingestion Gradebook Entry Test"
task :ingestionGradebookEntryTests do
  runTests("test/features/ingestion/features/ingestion_GradebookEntry.feature")
end

desc "Run Ingestion Batch Job Tests"
task :ingestionBatchJobTest do
  runTests("test/features/ingestion/features/ingestion_BatchJob.feature")
end

desc "Run Ingestion XSD Validation Test"
task :ingestionXsdValidationTest do
  runTests("test/features/ingestion/features/xsd_validation.feature")
end

desc "Run Ingestion AP Assessment and StudentAssessment Tests"
task :ingestionAPAssessmentTests do
  runTests("test/features/ingestion/features/apAssessment.feature")
end

desc "Run Ingestion ACT Assessment Tests"
task :ingestionACTAssessmentTests do
  runTests("test/features/ingestion/features/ACTAssessment.feature")
end

desc "Run Ingestion Ed-Fi ID Reference Resolution Test"
task :ingestionIDReferenceResolutionTest do
  runTests("test/features/ingestion/features/ingestion_IDRef.feature")
end

# This task SHOULD NOT BE ADDED to the general ingestion test suite
desc "Run Ingestion Performance Tests"
task :ingestionPerformanceTest do
  runTests("test/features/ingestion/features/performance_testing.feature")
end

############################################################
# Ingestion Offline Tool tests start
############################################################
desc "Run Ingestion Offline Tool Acceptances Tests"
task :ingestionOfflineToolTests => [:ingestionOfflineSimpleTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Offline Tool Simple Test"
task :ingestionOfflineSimpleTest do
  runTests("test/features/ingestion/features/offline_validation.feature")
end

desc "Run Tenant Purge Test"
task :ingestionTenantPurgeTests do
  runTests("test/features/ingestion/features/tenant_purge.feature")
end

########
############################################################
# Ingestion tests end
############################################################

############################################################
# API V1 tests start
############################################################
desc "Run API V1 acceptance tests"
task :apiV1Tests => [:apiV1EntityTests,
                     :apiV1AssociationTests,
                     :v1homeUriTests,
                     :v1ValidationTests,
                     :v1HierarchyTraversalTests,
                     :v1DirectReferencesTests,
                     :v1DirectReferenceCollectionsTests,
                     :v1CascadeDeletionTests,
                     :v1EncryptionTests,
                     :v1SortingAndPagingTests,
                     :v1ListTests,
                     :v1TargetTests,
                     :v1EndUserStoryAssessmentTests,
                     :v1EndUserStoryCustomEntityTests,
                     :v1StudentOptionalFieldsTests,
                     :v1SingleStudentViewTests,
                     :v1XMLTests] do
  displayFailureReport()
end

task :apiV1EntityTests => [:v1AssessmentTests,
                           :v1LearningObjectiveTests,
                           :v1AttendanceTests,
                           :v1CourseTests,
                           :v1EducationOrganizationTests,
                           :v1GradebookEntryTests,
                           :v1ParentTests,
                           :v1ParentSecurityTests,
                           :v1SchoolTests,
                           :v1SectionTests,
                           :v1SessionTests,
                           :v1StaffTests,
                           :v1StudentTests,
                           :v1StudentSectionGradebookEntryTests,
                           :v1ProgramTests,
                           :v1DisciplineIncidentTests,
                           :v1DisciplineActionTests,
                           :v1TeacherTests,
                           :v1CohortTests] do
end

task :apiV1AssociationTests => [:v1SchoolSessionAssociationTests,
                                :v1SectionAssessmentAssociationTests,
                                :v1SessionCourseAssociationTests,
                                :v1StaffEdOrgAssociationTests,
                                :v1StaffProgramAssociationTests,
                                :v1StudentProgramAssociationTests,
                                :v1StudentAssessmentAssociationTests,
                                :v1StudentParentAssociationTests,
                                :v1StudentDisciplineIncidentAssociationTests,
                                :v1StudentSchoolAssociationTests,
                                :v1StudentSectionAssociationTests,
                                :v1StudentTranscriptAssociationTests,
                                :v1TeacherSchoolAssociationTests,
                                :v1TeacherSectionAssociationTests,
                                :v1StaffCohortAssociationTests,
                                :v1StudentCohortAssociationTests] do
end

desc "Run V1 Simple CRUD Test"
task :v1SimpleCrudTests do
  runTests("test/features/apiV1/entities/crud")
end

desc "Run V1 Student Section Gradebook Entry Tests"
task :v1StudentSectionGradebookEntryTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("gradebookEntry", "gradebookEntry_fixture.json")
  setFixture("studentSectionGradebookEntry", "studentSectionGradebookEntry_fixture.json")
  runTests("test/features/apiV1/entities/studentSectionGradebookEntry")
end

desc "Run V1 Gradebook Entry Tests"
task :v1GradebookEntryTests => [:realmInit] do
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  runFixtureAndTests("test/features/apiV1/entities/gradebookEntry", "gradebookEntry", "gradebookEntry_fixture.json")
end

desc "Run V1 program Tests"
task :v1ProgramTests => [:realmInit] do
  setFixture("program", "program_fixture.json")
  runTests("test/features/apiV1/entities/program")
end

desc "Run V1 Discipline Incident Tests"
task :v1DisciplineIncidentTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  runTests("test/features/apiV1/entities/disciplineIncident")
end

desc "Run V1 Discipline Action Tests"
task :v1DisciplineActionTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_student_fixture.json", "test/data/smallville", false)
  setFixture("staff", "staff_fixture.json")
  setFixture("staff", "smallville_staff_fixture.json", "test/data/smallville", false)
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("disciplineAction", "disciplineAction_fixture.json")
  runTests("test/features/apiV1/entities/disciplineAction")
end

desc "Run V1 Student Discipline Incident Association Tests"
task :v1StudentDisciplineIncidentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("studentDisciplineIncidentAssociation", "studentDisciplineIncidentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentDisciplineIncidentAssociation")
end

desc "Run V1 Cascade Deletion Tests"
task :v1CascadeDeletionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/cascadeDeletion")
end

desc "Run V1 Direct References Tests"
task :v1DirectReferencesTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferences")
end

desc "Run V1 Direct Reference Collections Tests"
task :v1DirectReferenceCollectionsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferenceCollections")
end

desc "Run V1 Student Parent Association Tests"
task :v1StudentParentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("parent", "parent_fixture.json")
  setFixture("studentParentAssociation", "studentParentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentParentAssociation")
end

desc "Run V1 Student Transcript Association Tests"
task :v1StudentTranscriptAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("course", "course_fixture.json")
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("studentTranscriptAssociation", "studentTranscriptAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentTranscriptAssociation")
end

desc "Run V1 Teacher School Association Tests"
task :v1TeacherSchoolAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("teacherSchoolAssociation", "teacherSchoolAssociation_fixture.json")
  runTests("test/features/apiV1/associations/teacherSchoolAssociation")
end

desc "Run V1 Teacher Section Association Tests"
task :v1TeacherSectionAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "smallville_teacher_sections_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/associations/teacherSectionAssociation")
end

desc "Run V1 Section Assessment Association Tests"
task :v1SectionAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("section", "section_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("sectionAssessmentAssociation", "sectionAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("sectionAssessmentAssociation", "smallville_section_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sectionAssessmentAssociation")
end

desc "Run V1 Student Assessment Association Tests"
task :v1StudentAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentAssessmentAssociation", "studentAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("studentAssessmentAssociation", "smallville_student_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentAssessmentAssociation")
end

desc "Run V1 Student Section Association Tests"
task :v1StudentSectionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("studentSectionAssociation", "smallville_student_section_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSectionAssociation")
end

desc "Run V1 Staff Education Organization Association Tests"
task :v1StaffEdOrgAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("staffEducationOrganizationAssociation", "staffEducationOrganizationAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffEducationOrganizationAssociation")
end

desc "Run V1 Staff Program Association Tests"
task :v1StaffProgramAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("staffProgramAssociation", "staffProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffProgramAssociation")
end

desc "Run V1 Student Program Association Tests"
task :v1StudentProgramAssociationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("studentProgramAssociation", "studentProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentProgramAssociation")
end

desc "Run V1 School Session Association Tests"
task :v1SchoolSessionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("schoolSessionAssociation", "schoolSessionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("session", "smallville_sessions_fixture.json", "test/data/smallville", false)
  setFixture("schoolSessionAssociation", "smallville_school_session_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/schoolSessionAssociation")
end

desc "Run V1 Student School Association Tests"
task :v1StudentSchoolAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("studentSchoolAssociation", "studentSchoolAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("studentSchoolAssociation", "smallville_student_school_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSchoolAssociation")
end

desc "Run V1 Session Course Association Tests"
task :v1SessionCourseAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("session", "smallville_session_fixture.json", "test/data/smallville", false)
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("sessionCourseAssociation", "smallville_session_course_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sessionCourseAssociation")
end

desc "Run V1 Staff Cohort Association Tests"
task :v1StaffCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("staff", "staff_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("staffCohortAssociation", "staffCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/staffCohortAssociation")
end

desc "Run V1 Student Cohort Association Tests"
task :v1StudentCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("studentCohortAssociation", "studentCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/studentCohortAssociation")
end

desc "Run V1 Education Organization Tests"
task :v1EducationOrganizationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/entities/educationOrganization")
end

desc "Run V1 Staff Tests"
task :v1StaffTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/staff", "staff", "staff_fixture.json")
end

desc "Run V1 Section Tests"
task :v1SectionTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/section", "section", "section_fixture.json")
end

desc "Run V1 Course Tests"
task :v1CourseTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/course", "course", "course_fixture.json")
end

desc "Run V1 Session Tests"
task :v1SessionTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/session", "session", "session_fixture.json")
end

desc "Run V1 School Tests"
task :v1SchoolTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/school", "school", "school_fixture.json")
end

desc "Run V1 Student Tests"
task :v1StudentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/student", "student", "student_fixture.json")
end

desc "Run V1 Teacher Tests"
task :v1TeacherTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run V1 Assessment Tests"
task :v1AssessmentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run V1 LearningObjective Tests"
task :v1LearningObjectiveTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/learningObjective","learningObjective","learningObjective_fixture.json")
end

desc "Run V1 Parent Tests"
task :v1ParentTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/parent/parent_crud.feature","parent","parent_fixture.json")
end

desc "Run V1 Parent Security Tests"
task :v1ParentSecurityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/parent/parent_security.feature")
end

desc "Run V1 Attendance Tests"
task :v1AttendanceTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/attendance/attendance.feature","attendance","attendance_fixture.json")
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/attendance/attendance_security.feature")
end

desc "Run V1 Cohort Tests"
task :v1CohortTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runFixtureAndTests("test/features/apiV1/entities/cohort","cohort","cohort_fixture.json")
end

desc "Run V1 Home URI Tests"
task :v1homeUriTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/home_uri")
end

desc "Run V1 Hierachy Traversal Tests"
task :v1HierarchyTraversalTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/hierarchyTraversal")
end

desc "Run V1 Validation Tests"
task :v1ValidationTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("teacher", "teacher_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  runTests("test/features/apiV1/validation")
end

desc "Run Sorting and Paging Tests"
task :v1SortingAndPagingTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/sorting_paging")
end

desc "Run Encryption Tests"
task :v1EncryptionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/encryption")
end

desc "Run Target Tests"
task :v1TargetTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/targets")
end

desc "Run List Tests"
task :v1ListTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/lists")
end

desc "Run V1 Assessment User Story Tests"
task :v1EndUserStoryAssessmentTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/assessments/assessment.feature")
end

desc "Run V1 Custom entity User Story Tests"
task :v1EndUserStoryCustomEntityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/CustomEntities/CustomEntities.feature")
end

desc "Run V1 Student Optional Fields Tests"
task :v1StudentOptionalFieldsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/student_optional_fields.feature")
end

desc "Run V1 Single Student View Tests"
task :v1SingleStudentViewTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/single_student_view.feature")
end

desc "Run V1 XML Tests"
task :v1XMLTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  runTests("test/features/apiV1/xml/xml.feature")
end

############################################################
# API V1 tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests => [:adminToolsTests, :databrowserTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Admin-Tools Selenium Tests"
task :adminToolsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/admintools")
  Rake::Task["importSandboxData"].execute
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Dataprowler Selenium Tests"
task :databrowserTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/databrowser/databrowser_simple_detail_view.feature")
  runTests("test/features/databrowser/databrowser_denial.feature")
  runTests("test/features/databrowser/critical_auth_bugfix.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


desc "Run IDP Authentication Selenium Tests"
task :idpAuthTests => [:realmInit] do
  runTests("test/features/databrowser/idp_authentication.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Sandbox Mock IDP Authentication Selenium Tests"
task :mockIDPAuthTests => [:realmInit, :importSandboxData] do
  runTests("test/features/apiV1/end_user_stories/sandbox/mockIDP/MockIDP.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/security")
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests,
                         :dashboardK3ViewTests,
                         :dashboardHSViewTests,
                         :dashboardUserBasedViewTests,
                         :dashboardIntegratedTests,
                         :dashboardLoginTests,
                         :dashboardStudentProfileTests,
                         :dashboardAssessmentTests,
                         :dashboardAttendance,
                         :dashboardStudentHistoricalDataTests,
                         :dashboardStudentContactInfoLiveTests,
                         :dashboardStudentGradebookEntryTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end

end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget.feature")
end

desc "Run Dashboard K-3 view Tests"
task :dashboardK3ViewTests do
  runTests("test/features/dashboard/dash/k3view.feature")
end

desc "Run Dashboard High School view Tests"
task :dashboardHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view.feature")
end

desc "Run Dashboard user based view selection tests"
task :dashboardUserBasedViewTests do
  runTests("test/features/dashboard/dash/user_based_views.feature")
end

desc "Run Dashboard integration acceptance tests"
task :dashboardIntegratedTests do
    runTests("test/features/dashboard/dash/dashboard_api_integration.feature")
end


desc "Run Dashboard login acceptance tests"
task :dashboardLoginTests do
    runTests("test/features/dashboard/dash/dashboard_login.feature")
end

desc "Run Dashboard Assessment tests"
task :dashboardAssessmentTests => [:MostRecentResultTests,:HighestEverResultTests, :PerformanceLevels ] do
end

desc "Run Dashboard most recent result acceptance tests"
task :MostRecentResultTests do
    runTests("test/features/dashboard/assessments/MostRecent.feature")
end

desc "Run Dashboard highest ever result acceptance tests"
task :HighestEverResultTests do
    runTests("test/features/dashboard/assessments/Highest_AssessmentScore.feature")
end

desc "Run Dashboard performance level acceptance tests"
task :PerformanceLevels do
    runTests("test/features/dashboard/assessments/PerformanceLevels_MostRecentWindow.feature")
end

desc "Run dashboard attendance related tests"
task :dashboardAttendance do
  runTests("test/features/dashboard/dash/attendance.feature")
end

desc "Run dashboard student profile tests"
task :dashboardStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile.feature")
end

desc "Run dashboard student historical data tests"
task :dashboardStudentHistoricalDataTests do
  runTests("test/features/dashboard/students/HistoricalData.feature")
end

desc "Run dashboard student contact info live tests"
task :dashboardStudentContactInfoLiveTests do
  runTests("test/features/dashboard/dash/contact_info_live.feature")
end

desc "Run Local Dashboard Tests - Import Realm, Import Data Data, Run Tests"
task :localDashboardTests => [:realmInit,:importUnifiedData,:dashboardTests] do
end

desc "Run dashboard integration tests"
task :dashboardSdsTests do
  runTests("test/features/dashboard/dash/dashboard_sds.feature")
end

desc "Run dashboard integrated Tests - Student Contact info"
task :dashboardSdsContactInfoTests do
  runTests("test/features/dashboard/dash/contact_info_sds.feature")
end

desc "Run dashboard student gradebook entry tests"
task :dashboardStudentGradebookEntryTests do
  runTests("test/features/dashboard/students/StudentGradebookEntry.feature")
end

############################################################
# Dashboard tests end
############################################################

############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].execute
  Rake::Task["dashboardSdsContactInfoTests"].execute    
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################

############################################################
# SDK Tests
############################################################

desc "Run JavaSDK acceptance tests"
task :JavaSDKTests => [:JavaSDKSampleAppTest,:JavaSDKCRUDTest] do
    displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run JavaSDK sampleApp acceptance tests"
task :JavaSDKSampleAppTest => [:importUnifiedData, :realmInitNoPeople] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/sampleApp/sampleApp.feature")
end

desc "Run JavaSDK CRUD acceptance tests"
task :JavaSDKCRUDTest => [:realmInitNoPeople,:importStoriedData] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/CRUD/CRUD.feature")
end

############################################################
# SDK Tests end
############################################################

desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "teacher" => "teacher_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "school" => "smallville_schools_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "teacher" => "smallville_teachers_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "school" => "unified_data/uds_school.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "teacher" => "unified_data/uds_teacher.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end
###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "school",
                  "section",
                  "studentSectionAssociation",
                  "teacher",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""
  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit, :peopleInit] do
  setFixture("realm", "realm_fixture.json")
end

task :realmInitNoPeople => [:appInit] do
  setFixture("realm", "realm_fixture.json")
end

task :peopleInit do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("staff", "staff_fixture.json")
end

# Task that initializes the application registration fixture
task :appInit do
  setFixture("application", "application_fixture.json")
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


#desc "Run Liferay Tests"
#task :liferay => [:liferayTest] do
 # displayFailureReport()
#  if $SUCCESS
 #   puts "Completed All Tests"
 # else
 #   raise "Tests have failed"
 # end
#end

###########################################################
#SLI Liferay testing
###########################################################

#desc "Run the testing for life ray SLI for admin"
#task :liferayTest do
#  runTests("test/features/liferay/SLI_admin.feature")
#  runTests("test/features/liferay/SLI_normal_user.feature")
#  runTests("test/features/liferay/NY_Realm_EULA_agree.feature")
 # runTests("test/features/liferay/report_problem.feature")

# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")

#end




############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:ingestionAcceptanceSdsTest, :ingestionDemoDataTest, :ingestionSessionTest, :ingestionNegativeTests, :ingestionAttendanceTests,
                         :ingestionEncryptionTests, :ingestionAssessmentTests, :ingestionStudentParentsTests, :ingestionStudentTranscriptAssociationTests, :ingestionProgramTest,
                         :ingestionidNamespaceTest, :ingestionGradebookEntryTests, :ingestionSmooksVerificationTests, :ingestionXsdValidationTest, :ingestionOfflineSimpleTest,
                         :ingestionAPAssessmentTests, :ingestionACTAssessmentTests,:ingestionStudentProgramAssociationTest, :ingestionBatchJobTest, :ingestionIDReferenceResolutionTest, :ingestionTenantPurgeTests, :ingestionStaffProgramAssociationTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Demo Tests"
task :ingestionDemoDataTest do
  runTests("test/features/ingestion/features/ingestion_demo.feature")
end

desc "Run Ingestion Acceptance SDS Tests"
task :ingestionAcceptanceSdsTest do
  runTests("test/features/ingestion/features/ingestion_acceptance_SDS_test.feature")
end

desc "Run Ingestion Session Test"
task :ingestionSessionTest do
  runTests("test/features/ingestion/features/ingestion_session.feature")
end

desc "Run Ingestion Program Test"
task :ingestionProgramTest do
  runTests("test/features/ingestion/features/ingestion_program.feature")
end

desc "Run Ingestion StudentProgramAssociation Test"
task :ingestionStudentProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StudentProgramAssociation.feature")
end

desc "Run Ingestion StaffProgramAssociation Test"
task :ingestionStaffProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StaffProgramAssociation.feature")
end

desc "Run Ingestion Negative Tests"
task :ingestionNegativeTests do
  runTests("test/features/ingestion/features/negative_testing.feature")
end

desc "Run Ingestion Smooks Verification Tests"
task :ingestionSmooksVerificationTests do
  runTests("test/features/ingestion/features/smooks_verification.feature")
end

desc "Run Ingestion Encryption Tests"
task :ingestionEncryptionTests do
  runTests("test/features/ingestion/features/encryption_testing.feature")
end

desc "Run Ingestion Daily Attendance Tests"
task :ingestionAttendanceTests do
  runTests("test/features/ingestion/features/ingestion_daily_attendance.feature")
end

desc "Run Ingestion Assessment Tests"
task :ingestionAssessmentTests do
  runTests("test/features/ingestion/features/ingestion_assessment_metadata.feature")
end

desc "Run Student Parents Tests"
task :ingestionStudentParentsTests do
  runTests("test/features/ingestion/features/ingestion_student_parents.feature")
end

desc "Run Student Transcript Association Test"
task :ingestionStudentTranscriptAssociationTests do
  runTests("test/features/ingestion/features/ingestion_StudentTranscriptAssociation.feature")
end

desc "Run idNamespace Test"
task :ingestionidNamespaceTest do
  runTests("test/features/ingestion/features/ingestion_idNamespace.feature")
end

desc "Run Ingestion Gradebook Entry Test"
task :ingestionGradebookEntryTests do
  runTests("test/features/ingestion/features/ingestion_GradebookEntry.feature")
end

desc "Run Ingestion Batch Job Tests"
task :ingestionBatchJobTest do
  runTests("test/features/ingestion/features/ingestion_BatchJob.feature")
end

desc "Run Ingestion XSD Validation Test"
task :ingestionXsdValidationTest do
  runTests("test/features/ingestion/features/xsd_validation.feature")
end

desc "Run Ingestion AP Assessment and StudentAssessment Tests"
task :ingestionAPAssessmentTests do
  runTests("test/features/ingestion/features/apAssessment.feature")
end

desc "Run Ingestion ACT Assessment Tests"
task :ingestionACTAssessmentTests do
  runTests("test/features/ingestion/features/ACTAssessment.feature")
end

desc "Run Ingestion Ed-Fi ID Reference Resolution Test"
task :ingestionIDReferenceResolutionTest do
  runTests("test/features/ingestion/features/ingestion_IDRef.feature")
end

# This task SHOULD NOT BE ADDED to the general ingestion test suite
desc "Run Ingestion Performance Tests"
task :ingestionPerformanceTest do
  runTests("test/features/ingestion/features/performance_testing.feature")
end

############################################################
# Ingestion Offline Tool tests start
############################################################
desc "Run Ingestion Offline Tool Acceptances Tests"
task :ingestionOfflineToolTests => [:ingestionOfflineSimpleTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Offline Tool Simple Test"
task :ingestionOfflineSimpleTest do
  runTests("test/features/ingestion/features/offline_validation.feature")
end

desc "Run Tenant Purge Test"
task :ingestionTenantPurgeTests do
  runTests("test/features/ingestion/features/tenant_purge.feature")
end

########
############################################################
# Ingestion tests end
############################################################

############################################################
# API V1 tests start
############################################################
desc "Run API V1 acceptance tests"
task :apiV1Tests => [:apiV1EntityTests,
                     :apiV1AssociationTests,
                     :v1homeUriTests,
                     :v1ValidationTests,
                     :v1HierarchyTraversalTests,
                     :v1DirectReferencesTests,
                     :v1DirectReferenceCollectionsTests,
                     :v1CascadeDeletionTests,
                     :v1EncryptionTests,
                     :v1SortingAndPagingTests,
                     :v1ListTests,
                     :v1TargetTests,
                     :v1EndUserStoryAssessmentTests,
                     :v1EndUserStoryCustomEntityTests,
                     :v1StudentOptionalFieldsTests,
                     :v1SingleStudentViewTests,
                     :v1XMLTests] do
  displayFailureReport()
end

task :apiV1EntityTests => [:v1AssessmentTests,
                           :v1LearningObjectiveTests,
                           :v1AttendanceTests,
                           :v1CourseTests,
                           :v1EducationOrganizationTests,
                           :v1GradebookEntryTests,
                           :v1ParentTests,
                           :v1ParentSecurityTests,
                           :v1SchoolTests,
                           :v1SectionTests,
                           :v1SessionTests,
                           :v1StaffTests,
                           :v1StudentTests,
                           :v1StudentSectionGradebookEntryTests,
                           :v1ProgramTests,
                           :v1DisciplineIncidentTests,
                           :v1DisciplineActionTests,
                           :v1TeacherTests,
                           :v1CohortTests] do
end

task :apiV1AssociationTests => [:v1SchoolSessionAssociationTests,
                                :v1SectionAssessmentAssociationTests,
                                :v1SessionCourseAssociationTests,
                                :v1StaffEdOrgAssociationTests,
                                :v1StaffProgramAssociationTests,
                                :v1StudentProgramAssociationTests,
                                :v1StudentAssessmentAssociationTests,
                                :v1StudentParentAssociationTests,
                                :v1StudentDisciplineIncidentAssociationTests,
                                :v1StudentSchoolAssociationTests,
                                :v1StudentSectionAssociationTests,
                                :v1StudentTranscriptAssociationTests,
                                :v1TeacherSchoolAssociationTests,
                                :v1TeacherSectionAssociationTests,
                                :v1StaffCohortAssociationTests,
                                :v1StudentCohortAssociationTests] do
end

desc "Run V1 Student Section Gradebook Entry Tests"
task :v1StudentSectionGradebookEntryTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("gradebookEntry", "gradebookEntry_fixture.json")
  setFixture("studentSectionGradebookEntry", "studentSectionGradebookEntry_fixture.json")
  runTests("test/features/apiV1/entities/studentSectionGradebookEntry")
end

desc "Run V1 Gradebook Entry Tests"
task :v1GradebookEntryTests => [:realmInit] do
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  runFixtureAndTests("test/features/apiV1/entities/gradebookEntry", "gradebookEntry", "gradebookEntry_fixture.json")
end

desc "Run V1 program Tests"
task :v1ProgramTests => [:realmInit] do
  setFixture("program", "program_fixture.json")
  runTests("test/features/apiV1/entities/program")
end

desc "Run V1 Discipline Incident Tests"
task :v1DisciplineIncidentTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  runTests("test/features/apiV1/entities/disciplineIncident")
end

desc "Run V1 Discipline Action Tests"
task :v1DisciplineActionTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_student_fixture.json", "test/data/smallville", false)
  setFixture("staff", "staff_fixture.json")
  setFixture("staff", "smallville_staff_fixture.json", "test/data/smallville", false)
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("disciplineAction", "disciplineAction_fixture.json")
  runTests("test/features/apiV1/entities/disciplineAction")
end

desc "Run V1 Student Discipline Incident Association Tests"
task :v1StudentDisciplineIncidentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("studentDisciplineIncidentAssociation", "studentDisciplineIncidentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentDisciplineIncidentAssociation")
end

desc "Run V1 Cascade Deletion Tests"
task :v1CascadeDeletionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/cascadeDeletion")
end

desc "Run V1 Direct References Tests"
task :v1DirectReferencesTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferences")
end

desc "Run V1 Direct Reference Collections Tests"
task :v1DirectReferenceCollectionsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferenceCollections")
end

desc "Run V1 Student Parent Association Tests"
task :v1StudentParentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("parent", "parent_fixture.json")
  setFixture("studentParentAssociation", "studentParentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentParentAssociation")
end

desc "Run V1 Student Transcript Association Tests"
task :v1StudentTranscriptAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("course", "course_fixture.json")
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("studentTranscriptAssociation", "studentTranscriptAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentTranscriptAssociation")
end

desc "Run V1 Teacher School Association Tests"
task :v1TeacherSchoolAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("teacherSchoolAssociation", "teacherSchoolAssociation_fixture.json")
  runTests("test/features/apiV1/associations/teacherSchoolAssociation")
end

desc "Run V1 Teacher Section Association Tests"
task :v1TeacherSectionAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "smallville_teacher_sections_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/associations/teacherSectionAssociation")
end

desc "Run V1 Section Assessment Association Tests"
task :v1SectionAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("section", "section_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("sectionAssessmentAssociation", "sectionAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("sectionAssessmentAssociation", "smallville_section_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sectionAssessmentAssociation")
end

desc "Run V1 Student Assessment Association Tests"
task :v1StudentAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentAssessmentAssociation", "studentAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("studentAssessmentAssociation", "smallville_student_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentAssessmentAssociation")
end

desc "Run V1 Student Section Association Tests"
task :v1StudentSectionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("studentSectionAssociation", "smallville_student_section_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSectionAssociation")
end

desc "Run V1 Staff Education Organization Association Tests"
task :v1StaffEdOrgAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("staffEducationOrganizationAssociation", "staffEducationOrganizationAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffEducationOrganizationAssociation")
end

desc "Run V1 Staff Program Association Tests"
task :v1StaffProgramAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("staffProgramAssociation", "staffProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffProgramAssociation")
end

desc "Run V1 Student Program Association Tests"
task :v1StudentProgramAssociationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("studentProgramAssociation", "studentProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentProgramAssociation")
end

desc "Run V1 School Session Association Tests"
task :v1SchoolSessionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("schoolSessionAssociation", "schoolSessionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("session", "smallville_sessions_fixture.json", "test/data/smallville", false)
  setFixture("schoolSessionAssociation", "smallville_school_session_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/schoolSessionAssociation")
end

desc "Run V1 Student School Association Tests"
task :v1StudentSchoolAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("studentSchoolAssociation", "studentSchoolAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("studentSchoolAssociation", "smallville_student_school_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSchoolAssociation")
end

desc "Run V1 Session Course Association Tests"
task :v1SessionCourseAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("session", "smallville_session_fixture.json", "test/data/smallville", false)
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("sessionCourseAssociation", "smallville_session_course_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sessionCourseAssociation")
end

desc "Run V1 Staff Cohort Association Tests"
task :v1StaffCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("staff", "staff_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("staffCohortAssociation", "staffCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/staffCohortAssociation")
end

desc "Run V1 Student Cohort Association Tests"
task :v1StudentCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("studentCohortAssociation", "studentCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/studentCohortAssociation")
end

desc "Run V1 Education Organization Tests"
task :v1EducationOrganizationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/entities/educationOrganization")
end

desc "Run V1 Staff Tests"
task :v1StaffTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/staff", "staff", "staff_fixture.json")
end

desc "Run V1 Section Tests"
task :v1SectionTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/section", "section", "section_fixture.json")
end

desc "Run V1 Course Tests"
task :v1CourseTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/course", "course", "course_fixture.json")
end

desc "Run V1 Session Tests"
task :v1SessionTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/session", "session", "session_fixture.json")
end

desc "Run V1 School Tests"
task :v1SchoolTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/school", "school", "school_fixture.json")
end

desc "Run V1 Student Tests"
task :v1StudentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/student", "student", "student_fixture.json")
end

desc "Run V1 Teacher Tests"
task :v1TeacherTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run V1 Assessment Tests"
task :v1AssessmentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run V1 LearningObjective Tests"
task :v1LearningObjectiveTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/learningObjective","learningObjective","learningObjective_fixture.json")
end

desc "Run V1 Parent Tests"
task :v1ParentTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/parent/parent_crud.feature","parent","parent_fixture.json")
end

desc "Run V1 Parent Security Tests"
task :v1ParentSecurityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/parent/parent_security.feature")
end

desc "Run V1 Attendance Tests"
task :v1AttendanceTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/attendance/attendance.feature","attendance","attendance_fixture.json")
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/attendance/attendance_security.feature")
end

desc "Run V1 Cohort Tests"
task :v1CohortTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runFixtureAndTests("test/features/apiV1/entities/cohort","cohort","cohort_fixture.json")
end

desc "Run V1 Home URI Tests"
task :v1homeUriTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/home_uri")
end

desc "Run V1 Hierachy Traversal Tests"
task :v1HierarchyTraversalTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/hierarchyTraversal")
end

desc "Run V1 Validation Tests"
task :v1ValidationTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("teacher", "teacher_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  runTests("test/features/apiV1/validation")
end

desc "Run Sorting and Paging Tests"
task :v1SortingAndPagingTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/sorting_paging")
end

desc "Run Encryption Tests"
task :v1EncryptionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/encryption")
end

desc "Run Target Tests"
task :v1TargetTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/targets")
end

desc "Run List Tests"
task :v1ListTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/lists")
end

desc "Run V1 Assessment User Story Tests"
task :v1EndUserStoryAssessmentTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/assessments/assessment.feature")
end

desc "Run V1 Custom entity User Story Tests"
task :v1EndUserStoryCustomEntityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/CustomEntities/CustomEntities.feature")
end

desc "Run V1 Student Optional Fields Tests"
task :v1StudentOptionalFieldsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/student_optional_fields.feature")
end

desc "Run V1 Single Student View Tests"
task :v1SingleStudentViewTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/single_student_view.feature")
end

desc "Run V1 XML Tests"
task :v1XMLTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  runTests("test/features/apiV1/xml/xml.feature")
end

############################################################
# API V1 tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests => [:adminToolsTests, :databrowserTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Admin-Tools Selenium Tests"
task :adminToolsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/admintools")
  Rake::Task["importSandboxData"].execute
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Dataprowler Selenium Tests"
task :databrowserTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/databrowser/databrowser_simple_detail_view.feature")
  runTests("test/features/databrowser/databrowser_denial.feature")
  runTests("test/features/databrowser/critical_auth_bugfix.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


desc "Run IDP Authentication Selenium Tests"
task :idpAuthTests => [:realmInit] do
  runTests("test/features/databrowser/idp_authentication.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Sandbox Mock IDP Authentication Selenium Tests"
task :mockIDPAuthTests => [:realmInit, :importSandboxData] do
  runTests("test/features/apiV1/end_user_stories/sandbox/mockIDP/MockIDP.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/security")
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests,
                         :dashboardK3ViewTests,
                         :dashboardHSViewTests,
                         :dashboardUserBasedViewTests,
                         :dashboardIntegratedTests,
                         :dashboardLoginTests,
                         :dashboardStudentProfileTests,
                         :dashboardAssessmentTests,
                         :dashboardAttendance,
                         :dashboardStudentHistoricalDataTests,
                         :dashboardStudentContactInfoLiveTests,
                         :dashboardStudentGradebookEntryTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end

end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget.feature")
end

desc "Run Dashboard K-3 view Tests"
task :dashboardK3ViewTests do
  runTests("test/features/dashboard/dash/k3view.feature")
end

desc "Run Dashboard High School view Tests"
task :dashboardHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view.feature")
end

desc "Run Dashboard user based view selection tests"
task :dashboardUserBasedViewTests do
  runTests("test/features/dashboard/dash/user_based_views.feature")
end

desc "Run Dashboard integration acceptance tests"
task :dashboardIntegratedTests do
    runTests("test/features/dashboard/dash/dashboard_api_integration.feature")
end


desc "Run Dashboard login acceptance tests"
task :dashboardLoginTests do
    runTests("test/features/dashboard/dash/dashboard_login.feature")
end

desc "Run Dashboard Assessment tests"
task :dashboardAssessmentTests => [:MostRecentResultTests,:HighestEverResultTests, :PerformanceLevels ] do
end

desc "Run Dashboard most recent result acceptance tests"
task :MostRecentResultTests do
    runTests("test/features/dashboard/assessments/MostRecent.feature")
end

desc "Run Dashboard highest ever result acceptance tests"
task :HighestEverResultTests do
    runTests("test/features/dashboard/assessments/Highest_AssessmentScore.feature")
end

desc "Run Dashboard performance level acceptance tests"
task :PerformanceLevels do
    runTests("test/features/dashboard/assessments/PerformanceLevels_MostRecentWindow.feature")
end

desc "Run dashboard attendance related tests"
task :dashboardAttendance do
  runTests("test/features/dashboard/dash/attendance.feature")
end

desc "Run dashboard student profile tests"
task :dashboardStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile.feature")
end

desc "Run dashboard student historical data tests"
task :dashboardStudentHistoricalDataTests do
  runTests("test/features/dashboard/students/HistoricalData.feature")
end

desc "Run dashboard student contact info live tests"
task :dashboardStudentContactInfoLiveTests do
  runTests("test/features/dashboard/dash/contact_info_live.feature")
end

desc "Run Local Dashboard Tests - Import Realm, Import Data Data, Run Tests"
task :localDashboardTests => [:realmInit,:importUnifiedData,:dashboardTests] do
end

desc "Run dashboard integration tests"
task :dashboardSdsTests do
  runTests("test/features/dashboard/dash/dashboard_sds.feature")
end

desc "Run dashboard integrated Tests - Student Contact info"
task :dashboardSdsContactInfoTests do
  runTests("test/features/dashboard/dash/contact_info_sds.feature")
end

desc "Run dashboard student gradebook entry tests"
task :dashboardStudentGradebookEntryTests do
  runTests("test/features/dashboard/students/StudentGradebookEntry.feature")
end

############################################################
# Dashboard tests end
############################################################

############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].execute
  Rake::Task["dashboardSdsContactInfoTests"].execute    
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################

############################################################
# SDK Tests
############################################################

desc "Run JavaSDK acceptance tests"
task :JavaSDKTests => [:JavaSDKSampleAppTest,:JavaSDKCRUDTest] do
    displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run JavaSDK sampleApp acceptance tests"
task :JavaSDKSampleAppTest => [:importUnifiedData, :realmInitNoPeople] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/sampleApp/sampleApp.feature")
end

desc "Run JavaSDK CRUD acceptance tests"
task :JavaSDKCRUDTest => [:realmInitNoPeople,:importStoriedData] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/CRUD/CRUD.feature")
end

############################################################
# SDK Tests end
############################################################

desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "teacher" => "teacher_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "school" => "smallville_schools_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "teacher" => "smallville_teachers_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "school" => "unified_data/uds_school.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "teacher" => "unified_data/uds_teacher.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end
###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "school",
                  "section",
                  "studentSectionAssociation",
                  "teacher",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""
  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit, :peopleInit] do
  setFixture("realm", "realm_fixture.json")
end

task :realmInitNoPeople => [:appInit] do
  setFixture("realm", "realm_fixture.json")
end

task :peopleInit do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("staff", "staff_fixture.json")
end

# Task that initializes the application registration fixture
task :appInit do
  setFixture("application", "application_fixture.json")
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


#desc "Run Liferay Tests"
#task :liferay => [:liferayTest] do
 # displayFailureReport()
#  if $SUCCESS
 #   puts "Completed All Tests"
 # else
 #   raise "Tests have failed"
 # end
#end

###########################################################
#SLI Liferay testing
###########################################################

#desc "Run the testing for life ray SLI for admin"
#task :liferayTest do
#  runTests("test/features/liferay/SLI_admin.feature")
#  runTests("test/features/liferay/SLI_normal_user.feature")
#  runTests("test/features/liferay/NY_Realm_EULA_agree.feature")
 # runTests("test/features/liferay/report_problem.feature")

# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")

#end




############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:ingestionAcceptanceSdsTest, :ingestionDemoDataTest, :ingestionSessionTest, :ingestionNegativeTests, :ingestionAttendanceTests,
                         :ingestionEncryptionTests, :ingestionAssessmentTests, :ingestionStudentParentsTests, :ingestionStudentTranscriptAssociationTests, :ingestionProgramTest,
                         :ingestionidNamespaceTest, :ingestionGradebookEntryTests, :ingestionSmooksVerificationTests, :ingestionXsdValidationTest, :ingestionOfflineSimpleTest,
                         :ingestionAPAssessmentTests, :ingestionACTAssessmentTests,:ingestionStudentProgramAssociationTest, :ingestionBatchJobTest, :ingestionIDReferenceResolutionTest, :ingestionTenantPurgeTests, :ingestionStaffProgramAssociationTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Demo Tests"
task :ingestionDemoDataTest do
  runTests("test/features/ingestion/features/ingestion_demo.feature")
end

desc "Run Ingestion Acceptance SDS Tests"
task :ingestionAcceptanceSdsTest do
  runTests("test/features/ingestion/features/ingestion_acceptance_SDS_test.feature")
end

desc "Run Ingestion Session Test"
task :ingestionSessionTest do
  runTests("test/features/ingestion/features/ingestion_session.feature")
end

desc "Run Ingestion Program Test"
task :ingestionProgramTest do
  runTests("test/features/ingestion/features/ingestion_program.feature")
end

desc "Run Ingestion StudentProgramAssociation Test"
task :ingestionStudentProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StudentProgramAssociation.feature")
end

desc "Run Ingestion StaffProgramAssociation Test"
task :ingestionStaffProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StaffProgramAssociation.feature")
end

desc "Run Ingestion Negative Tests"
task :ingestionNegativeTests do
  runTests("test/features/ingestion/features/negative_testing.feature")
end

desc "Run Ingestion Smooks Verification Tests"
task :ingestionSmooksVerificationTests do
  runTests("test/features/ingestion/features/smooks_verification.feature")
end

desc "Run Ingestion Encryption Tests"
task :ingestionEncryptionTests do
  runTests("test/features/ingestion/features/encryption_testing.feature")
end

desc "Run Ingestion Daily Attendance Tests"
task :ingestionAttendanceTests do
  runTests("test/features/ingestion/features/ingestion_daily_attendance.feature")
end

desc "Run Ingestion Assessment Tests"
task :ingestionAssessmentTests do
  runTests("test/features/ingestion/features/ingestion_assessment_metadata.feature")
end

desc "Run Student Parents Tests"
task :ingestionStudentParentsTests do
  runTests("test/features/ingestion/features/ingestion_student_parents.feature")
end

desc "Run Student Transcript Association Test"
task :ingestionStudentTranscriptAssociationTests do
  runTests("test/features/ingestion/features/ingestion_StudentTranscriptAssociation.feature")
end

desc "Run idNamespace Test"
task :ingestionidNamespaceTest do
  runTests("test/features/ingestion/features/ingestion_idNamespace.feature")
end

desc "Run Ingestion Gradebook Entry Test"
task :ingestionGradebookEntryTests do
  runTests("test/features/ingestion/features/ingestion_GradebookEntry.feature")
end

desc "Run Ingestion Batch Job Tests"
task :ingestionBatchJobTest do
  runTests("test/features/ingestion/features/ingestion_BatchJob.feature")
end

desc "Run Ingestion XSD Validation Test"
task :ingestionXsdValidationTest do
  runTests("test/features/ingestion/features/xsd_validation.feature")
end

desc "Run Ingestion AP Assessment and StudentAssessment Tests"
task :ingestionAPAssessmentTests do
  runTests("test/features/ingestion/features/apAssessment.feature")
end

desc "Run Ingestion ACT Assessment Tests"
task :ingestionACTAssessmentTests do
  runTests("test/features/ingestion/features/ACTAssessment.feature")
end

desc "Run Ingestion Ed-Fi ID Reference Resolution Test"
task :ingestionIDReferenceResolutionTest do
  runTests("test/features/ingestion/features/ingestion_IDRef.feature")
end

# This task SHOULD NOT BE ADDED to the general ingestion test suite
desc "Run Ingestion Performance Tests"
task :ingestionPerformanceTest do
  runTests("test/features/ingestion/features/performance_testing.feature")
end

############################################################
# Ingestion Offline Tool tests start
############################################################
desc "Run Ingestion Offline Tool Acceptances Tests"
task :ingestionOfflineToolTests => [:ingestionOfflineSimpleTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Offline Tool Simple Test"
task :ingestionOfflineSimpleTest do
  runTests("test/features/ingestion/features/offline_validation.feature")
end

desc "Run Tenant Purge Test"
task :ingestionTenantPurgeTests do
  runTests("test/features/ingestion/features/tenant_purge.feature")
end

########
############################################################
# Ingestion tests end
############################################################

############################################################
# API V1 tests start
############################################################
desc "Run API V1 acceptance tests"
task :apiV1Tests => [:apiV1EntityTests,
                     :apiV1AssociationTests,
                     :v1homeUriTests,
                     :v1ValidationTests,
                     :v1HierarchyTraversalTests,
                     :v1DirectReferencesTests,
                     :v1DirectReferenceCollectionsTests,
                     :v1CascadeDeletionTests,
                     :v1EncryptionTests,
                     :v1SortingAndPagingTests,
                     :v1ListTests,
                     :v1TargetTests,
                     :v1EndUserStoryAssessmentTests,
                     :v1EndUserStoryCustomEntityTests,
                     :v1StudentOptionalFieldsTests,
                     :v1SingleStudentViewTests,
                     :v1XMLTests] do
  displayFailureReport()
end

task :apiV1EntityTests => [:v1AssessmentTests,
                           :v1LearningObjectiveTests,
                           :v1AttendanceTests,
                           :v1CourseTests,
                           :v1EducationOrganizationTests,
                           :v1GradebookEntryTests,
                           :v1ParentTests,
                           :v1ParentSecurityTests,
                           :v1SchoolTests,
                           :v1SectionTests,
                           :v1SessionTests,
                           :v1StaffTests,
                           :v1StudentTests,
                           :v1StudentSectionGradebookEntryTests,
                           :v1ProgramTests,
                           :v1DisciplineIncidentTests,
                           :v1DisciplineActionTests,
                           :v1TeacherTests,
                           :v1CohortTests] do
end

task :apiV1AssociationTests => [:v1SchoolSessionAssociationTests,
                                :v1SectionAssessmentAssociationTests,
                                :v1SessionCourseAssociationTests,
                                :v1StaffEdOrgAssociationTests,
                                :v1StaffProgramAssociationTests,
                                :v1StudentProgramAssociationTests,
                                :v1StudentAssessmentAssociationTests,
                                :v1StudentParentAssociationTests,
                                :v1StudentDisciplineIncidentAssociationTests,
                                :v1StudentSchoolAssociationTests,
                                :v1StudentSectionAssociationTests,
                                :v1StudentTranscriptAssociationTests,
                                :v1TeacherSchoolAssociationTests,
                                :v1TeacherSectionAssociationTests,
                                :v1StaffCohortAssociationTests,
                                :v1StudentCohortAssociationTests] do
end

desc "Run V1 Student Section Gradebook Entry Tests"
task :v1StudentSectionGradebookEntryTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("gradebookEntry", "gradebookEntry_fixture.json")
  setFixture("studentSectionGradebookEntry", "studentSectionGradebookEntry_fixture.json")
  runTests("test/features/apiV1/entities/studentSectionGradebookEntry")
end

desc "Run V1 Gradebook Entry Tests"
task :v1GradebookEntryTests => [:realmInit] do
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  runFixtureAndTests("test/features/apiV1/entities/gradebookEntry", "gradebookEntry", "gradebookEntry_fixture.json")
end

desc "Run V1 program Tests"
task :v1ProgramTests => [:realmInit] do
  setFixture("program", "program_fixture.json")
  runTests("test/features/apiV1/entities/program")
end

desc "Run V1 Discipline Incident Tests"
task :v1DisciplineIncidentTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  runTests("test/features/apiV1/entities/disciplineIncident")
end

desc "Run V1 Discipline Action Tests"
task :v1DisciplineActionTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_student_fixture.json", "test/data/smallville", false)
  setFixture("staff", "staff_fixture.json")
  setFixture("staff", "smallville_staff_fixture.json", "test/data/smallville", false)
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("disciplineAction", "disciplineAction_fixture.json")
  runTests("test/features/apiV1/entities/disciplineAction")
end

desc "Run V1 Student Discipline Incident Association Tests"
task :v1StudentDisciplineIncidentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("studentDisciplineIncidentAssociation", "studentDisciplineIncidentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentDisciplineIncidentAssociation")
end

desc "Run V1 Cascade Deletion Tests"
task :v1CascadeDeletionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/cascadeDeletion")
end

desc "Run V1 Direct References Tests"
task :v1DirectReferencesTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferences")
end

desc "Run V1 Direct Reference Collections Tests"
task :v1DirectReferenceCollectionsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferenceCollections")
end

desc "Run V1 Student Parent Association Tests"
task :v1StudentParentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("parent", "parent_fixture.json")
  setFixture("studentParentAssociation", "studentParentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentParentAssociation")
end

desc "Run V1 Student Transcript Association Tests"
task :v1StudentTranscriptAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("course", "course_fixture.json")
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("studentTranscriptAssociation", "studentTranscriptAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentTranscriptAssociation")
end

desc "Run V1 Teacher School Association Tests"
task :v1TeacherSchoolAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("teacherSchoolAssociation", "teacherSchoolAssociation_fixture.json")
  runTests("test/features/apiV1/associations/teacherSchoolAssociation")
end

desc "Run V1 Teacher Section Association Tests"
task :v1TeacherSectionAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "smallville_teacher_sections_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/associations/teacherSectionAssociation")
end

desc "Run V1 Section Assessment Association Tests"
task :v1SectionAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("section", "section_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("sectionAssessmentAssociation", "sectionAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("sectionAssessmentAssociation", "smallville_section_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sectionAssessmentAssociation")
end

desc "Run V1 Student Assessment Association Tests"
task :v1StudentAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentAssessmentAssociation", "studentAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("studentAssessmentAssociation", "smallville_student_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentAssessmentAssociation")
end

desc "Run V1 Student Section Association Tests"
task :v1StudentSectionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("studentSectionAssociation", "smallville_student_section_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSectionAssociation")
end

desc "Run V1 Staff Education Organization Association Tests"
task :v1StaffEdOrgAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("staffEducationOrganizationAssociation", "staffEducationOrganizationAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffEducationOrganizationAssociation")
end

desc "Run V1 Staff Program Association Tests"
task :v1StaffProgramAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("staffProgramAssociation", "staffProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffProgramAssociation")
end

desc "Run V1 Student Program Association Tests"
task :v1StudentProgramAssociationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("studentProgramAssociation", "studentProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentProgramAssociation")
end

desc "Run V1 School Session Association Tests"
task :v1SchoolSessionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("schoolSessionAssociation", "schoolSessionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("session", "smallville_sessions_fixture.json", "test/data/smallville", false)
  setFixture("schoolSessionAssociation", "smallville_school_session_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/schoolSessionAssociation")
end

desc "Run V1 Student School Association Tests"
task :v1StudentSchoolAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("studentSchoolAssociation", "studentSchoolAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("studentSchoolAssociation", "smallville_student_school_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSchoolAssociation")
end

desc "Run V1 Session Course Association Tests"
task :v1SessionCourseAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("session", "smallville_session_fixture.json", "test/data/smallville", false)
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("sessionCourseAssociation", "smallville_session_course_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sessionCourseAssociation")
end

desc "Run V1 Staff Cohort Association Tests"
task :v1StaffCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("staff", "staff_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("staffCohortAssociation", "staffCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/staffCohortAssociation")
end

desc "Run V1 Student Cohort Association Tests"
task :v1StudentCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("studentCohortAssociation", "studentCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/studentCohortAssociation")
end

desc "Run V1 Education Organization Tests"
task :v1EducationOrganizationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/entities/educationOrganization")
end

desc "Run V1 Staff Tests"
task :v1StaffTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/staff", "staff", "staff_fixture.json")
end

desc "Run V1 Section Tests"
task :v1SectionTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/section", "section", "section_fixture.json")
end

desc "Run V1 Course Tests"
task :v1CourseTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/course", "course", "course_fixture.json")
end

desc "Run V1 Session Tests"
task :v1SessionTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/session", "session", "session_fixture.json")
end

desc "Run V1 School Tests"
task :v1SchoolTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/school", "school", "school_fixture.json")
end

desc "Run V1 Student Tests"
task :v1StudentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/student", "student", "student_fixture.json")
end

desc "Run V1 Teacher Tests"
task :v1TeacherTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run V1 Assessment Tests"
task :v1AssessmentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run V1 LearningObjective Tests"
task :v1LearningObjectiveTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/learningObjective","learningObjective","learningObjective_fixture.json")
end

desc "Run V1 Parent Tests"
task :v1ParentTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/parent/parent_crud.feature","parent","parent_fixture.json")
end

desc "Run V1 Parent Security Tests"
task :v1ParentSecurityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/parent/parent_security.feature")
end

desc "Run V1 Attendance Tests"
task :v1AttendanceTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/attendance/attendance.feature","attendance","attendance_fixture.json")
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/attendance/attendance_security.feature")
end

desc "Run V1 Cohort Tests"
task :v1CohortTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runFixtureAndTests("test/features/apiV1/entities/cohort","cohort","cohort_fixture.json")
end

desc "Run V1 Home URI Tests"
task :v1homeUriTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/home_uri")
end

desc "Run V1 Hierachy Traversal Tests"
task :v1HierarchyTraversalTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/hierarchyTraversal")
end

desc "Run V1 Validation Tests"
task :v1ValidationTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("teacher", "teacher_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  runTests("test/features/apiV1/validation")
end

desc "Run Sorting and Paging Tests"
task :v1SortingAndPagingTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/sorting_paging")
end

desc "Run Encryption Tests"
task :v1EncryptionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/encryption")
end

desc "Run Target Tests"
task :v1TargetTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/targets")
end

desc "Run List Tests"
task :v1ListTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/lists")
end

desc "Run V1 Assessment User Story Tests"
task :v1EndUserStoryAssessmentTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/assessments/assessment.feature")
end

desc "Run V1 Custom entity User Story Tests"
task :v1EndUserStoryCustomEntityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/CustomEntities/CustomEntities.feature")
end

desc "Run V1 Student Optional Fields Tests"
task :v1StudentOptionalFieldsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/student_optional_fields.feature")
end

desc "Run V1 Single Student View Tests"
task :v1SingleStudentViewTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/single_student_view.feature")
end

desc "Run V1 XML Tests"
task :v1XMLTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  runTests("test/features/apiV1/xml/xml.feature")
end

############################################################
# API V1 tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests => [:adminToolsTests, :databrowserTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Admin-Tools Selenium Tests"
task :adminToolsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/admintools")
  Rake::Task["importSandboxData"].execute
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Dataprowler Selenium Tests"
task :databrowserTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/databrowser/databrowser_simple_detail_view.feature")
  runTests("test/features/databrowser/databrowser_denial.feature")
  runTests("test/features/databrowser/critical_auth_bugfix.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


desc "Run IDP Authentication Selenium Tests"
task :idpAuthTests => [:realmInit] do
  runTests("test/features/databrowser/idp_authentication.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Sandbox Mock IDP Authentication Selenium Tests"
task :mockIDPAuthTests => [:realmInit, :importSandboxData] do
  runTests("test/features/apiV1/end_user_stories/sandbox/mockIDP/MockIDP.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/security")
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests,
                         :dashboardK3ViewTests,
                         :dashboardHSViewTests,
                         :dashboardUserBasedViewTests,
                         :dashboardIntegratedTests,
                         :dashboardLoginTests,
                         :dashboardStudentProfileTests,
                         :dashboardAssessmentTests,
                         :dashboardAttendance,
                         :dashboardStudentHistoricalDataTests,
                         :dashboardStudentContactInfoLiveTests,
                         :dashboardStudentGradebookEntryTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end

end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget.feature")
end

desc "Run Dashboard K-3 view Tests"
task :dashboardK3ViewTests do
  runTests("test/features/dashboard/dash/k3view.feature")
end

desc "Run Dashboard High School view Tests"
task :dashboardHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view.feature")
end

desc "Run Dashboard user based view selection tests"
task :dashboardUserBasedViewTests do
  runTests("test/features/dashboard/dash/user_based_views.feature")
end

desc "Run Dashboard integration acceptance tests"
task :dashboardIntegratedTests do
    runTests("test/features/dashboard/dash/dashboard_api_integration.feature")
end


desc "Run Dashboard login acceptance tests"
task :dashboardLoginTests do
    runTests("test/features/dashboard/dash/dashboard_login.feature")
end

desc "Run Dashboard Assessment tests"
task :dashboardAssessmentTests => [:MostRecentResultTests,:HighestEverResultTests, :PerformanceLevels ] do
end

desc "Run Dashboard most recent result acceptance tests"
task :MostRecentResultTests do
    runTests("test/features/dashboard/assessments/MostRecent.feature")
end

desc "Run Dashboard highest ever result acceptance tests"
task :HighestEverResultTests do
    runTests("test/features/dashboard/assessments/Highest_AssessmentScore.feature")
end

desc "Run Dashboard performance level acceptance tests"
task :PerformanceLevels do
    runTests("test/features/dashboard/assessments/PerformanceLevels_MostRecentWindow.feature")
end

desc "Run dashboard attendance related tests"
task :dashboardAttendance do
  runTests("test/features/dashboard/dash/attendance.feature")
end

desc "Run dashboard student profile tests"
task :dashboardStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile.feature")
end

desc "Run dashboard student historical data tests"
task :dashboardStudentHistoricalDataTests do
  runTests("test/features/dashboard/students/HistoricalData.feature")
end

desc "Run dashboard student contact info live tests"
task :dashboardStudentContactInfoLiveTests do
  runTests("test/features/dashboard/dash/contact_info_live.feature")
end

desc "Run Local Dashboard Tests - Import Realm, Import Data Data, Run Tests"
task :localDashboardTests => [:realmInit,:importUnifiedData,:dashboardTests] do
end

desc "Run dashboard integration tests"
task :dashboardSdsTests do
  runTests("test/features/dashboard/dash/dashboard_sds.feature")
end

desc "Run dashboard integrated Tests - Student Contact info"
task :dashboardSdsContactInfoTests do
  runTests("test/features/dashboard/dash/contact_info_sds.feature")
end

desc "Run dashboard student gradebook entry tests"
task :dashboardStudentGradebookEntryTests do
  runTests("test/features/dashboard/students/StudentGradebookEntry.feature")
end

############################################################
# Dashboard tests end
############################################################

############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].execute
  Rake::Task["dashboardSdsContactInfoTests"].execute    
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################

############################################################
# SDK Tests
############################################################

desc "Run JavaSDK acceptance tests"
task :JavaSDKTests => [:JavaSDKSampleAppTest,:JavaSDKCRUDTest] do
    displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run JavaSDK sampleApp acceptance tests"
task :JavaSDKSampleAppTest => [:importUnifiedData, :realmInitNoPeople] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/sampleApp/sampleApp.feature")
end

desc "Run JavaSDK CRUD acceptance tests"
task :JavaSDKCRUDTest => [:realmInitNoPeople,:importStoriedData] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/CRUD/CRUD.feature")
end

############################################################
# SDK Tests end
############################################################

desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "teacher" => "teacher_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "school" => "smallville_schools_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "teacher" => "smallville_teachers_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "school" => "unified_data/uds_school.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "teacher" => "unified_data/uds_teacher.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end
###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "school",
                  "section",
                  "studentSectionAssociation",
                  "teacher",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""
  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit, :peopleInit] do
  setFixture("realm", "realm_fixture.json")
end

task :realmInitNoPeople => [:appInit] do
  setFixture("realm", "realm_fixture.json")
end

task :peopleInit do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("staff", "staff_fixture.json")
end

# Task that initializes the application registration fixture
task :appInit do
  setFixture("application", "application_fixture.json")
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


#desc "Run Liferay Tests"
#task :liferay => [:liferayTest] do
 # displayFailureReport()
#  if $SUCCESS
 #   puts "Completed All Tests"
 # else
 #   raise "Tests have failed"
 # end
#end

###########################################################
#SLI Liferay testing
###########################################################

#desc "Run the testing for life ray SLI for admin"
#task :liferayTest do
#  runTests("test/features/liferay/SLI_admin.feature")
#  runTests("test/features/liferay/SLI_normal_user.feature")
#  runTests("test/features/liferay/NY_Realm_EULA_agree.feature")
 # runTests("test/features/liferay/report_problem.feature")

# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")

#end




############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:ingestionAcceptanceSdsTest, :ingestionDemoDataTest, :ingestionSessionTest, :ingestionNegativeTests, :ingestionAttendanceTests,
                         :ingestionEncryptionTests, :ingestionAssessmentTests, :ingestionStudentParentsTests, :ingestionStudentTranscriptAssociationTests, :ingestionProgramTest,
                         :ingestionidNamespaceTest, :ingestionGradebookEntryTests, :ingestionSmooksVerificationTests, :ingestionXsdValidationTest, :ingestionOfflineSimpleTest,
                         :ingestionAPAssessmentTests, :ingestionACTAssessmentTests,:ingestionStudentProgramAssociationTest, :ingestionBatchJobTest, :ingestionIDReferenceResolutionTest, :ingestionTenantPurgeTests, :ingestionStaffProgramAssociationTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Demo Tests"
task :ingestionDemoDataTest do
  runTests("test/features/ingestion/features/ingestion_demo.feature")
end

desc "Run Ingestion Acceptance SDS Tests"
task :ingestionAcceptanceSdsTest do
  runTests("test/features/ingestion/features/ingestion_acceptance_SDS_test.feature")
end

desc "Run Ingestion Session Test"
task :ingestionSessionTest do
  runTests("test/features/ingestion/features/ingestion_session.feature")
end

desc "Run Ingestion Program Test"
task :ingestionProgramTest do
  runTests("test/features/ingestion/features/ingestion_program.feature")
end

desc "Run Ingestion StudentProgramAssociation Test"
task :ingestionStudentProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StudentProgramAssociation.feature")
end

desc "Run Ingestion StaffProgramAssociation Test"
task :ingestionStaffProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StaffProgramAssociation.feature")
end

desc "Run Ingestion Negative Tests"
task :ingestionNegativeTests do
  runTests("test/features/ingestion/features/negative_testing.feature")
end

desc "Run Ingestion Smooks Verification Tests"
task :ingestionSmooksVerificationTests do
  runTests("test/features/ingestion/features/smooks_verification.feature")
end

desc "Run Ingestion Encryption Tests"
task :ingestionEncryptionTests do
  runTests("test/features/ingestion/features/encryption_testing.feature")
end

desc "Run Ingestion Daily Attendance Tests"
task :ingestionAttendanceTests do
  runTests("test/features/ingestion/features/ingestion_daily_attendance.feature")
end

desc "Run Ingestion Assessment Tests"
task :ingestionAssessmentTests do
  runTests("test/features/ingestion/features/ingestion_assessment_metadata.feature")
end

desc "Run Student Parents Tests"
task :ingestionStudentParentsTests do
  runTests("test/features/ingestion/features/ingestion_student_parents.feature")
end

desc "Run Student Transcript Association Test"
task :ingestionStudentTranscriptAssociationTests do
  runTests("test/features/ingestion/features/ingestion_StudentTranscriptAssociation.feature")
end

desc "Run idNamespace Test"
task :ingestionidNamespaceTest do
  runTests("test/features/ingestion/features/ingestion_idNamespace.feature")
end

desc "Run Ingestion Gradebook Entry Test"
task :ingestionGradebookEntryTests do
  runTests("test/features/ingestion/features/ingestion_GradebookEntry.feature")
end

desc "Run Ingestion Batch Job Tests"
task :ingestionBatchJobTest do
  runTests("test/features/ingestion/features/ingestion_BatchJob.feature")
end

desc "Run Ingestion XSD Validation Test"
task :ingestionXsdValidationTest do
  runTests("test/features/ingestion/features/xsd_validation.feature")
end

desc "Run Ingestion AP Assessment and StudentAssessment Tests"
task :ingestionAPAssessmentTests do
  runTests("test/features/ingestion/features/apAssessment.feature")
end

desc "Run Ingestion ACT Assessment Tests"
task :ingestionACTAssessmentTests do
  runTests("test/features/ingestion/features/ACTAssessment.feature")
end

desc "Run Ingestion Ed-Fi ID Reference Resolution Test"
task :ingestionIDReferenceResolutionTest do
  runTests("test/features/ingestion/features/ingestion_IDRef.feature")
end

# This task SHOULD NOT BE ADDED to the general ingestion test suite
desc "Run Ingestion Performance Tests"
task :ingestionPerformanceTest do
  runTests("test/features/ingestion/features/performance_testing.feature")
end

############################################################
# Ingestion Offline Tool tests start
############################################################
desc "Run Ingestion Offline Tool Acceptances Tests"
task :ingestionOfflineToolTests => [:ingestionOfflineSimpleTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Offline Tool Simple Test"
task :ingestionOfflineSimpleTest do
  runTests("test/features/ingestion/features/offline_validation.feature")
end

desc "Run Tenant Purge Test"
task :ingestionTenantPurgeTests do
  runTests("test/features/ingestion/features/tenant_purge.feature")
end

########
############################################################
# Ingestion tests end
############################################################

############################################################
# API V1 tests start
############################################################
desc "Run API V1 acceptance tests"
task :apiV1Tests => [:apiV1EntityTests,
                     :apiV1AssociationTests,
                     :v1homeUriTests,
                     :v1ValidationTests,
                     :v1HierarchyTraversalTests,
                     :v1DirectReferencesTests,
                     :v1DirectReferenceCollectionsTests,
                     :v1CascadeDeletionTests,
                     :v1EncryptionTests,
                     :v1SortingAndPagingTests,
                     :v1ListTests,
                     :v1TargetTests,
                     :v1EndUserStoryAssessmentTests,
                     :v1EndUserStoryCustomEntityTests,
                     :v1StudentOptionalFieldsTests,
                     :v1SingleStudentViewTests,
                     :v1XMLTests] do
  displayFailureReport()
end

task :apiV1EntityTests => [:v1AssessmentTests,
                           :v1LearningObjectiveTests,
                           :v1AttendanceTests,
                           :v1CourseTests,
                           :v1EducationOrganizationTests,
                           :v1GradebookEntryTests,
                           :v1ParentTests,
                           :v1ParentSecurityTests,
                           :v1SchoolTests,
                           :v1SectionTests,
                           :v1SessionTests,
                           :v1StaffTests,
                           :v1StudentTests,
                           :v1StudentSectionGradebookEntryTests,
                           :v1ProgramTests,
                           :v1DisciplineIncidentTests,
                           :v1DisciplineActionTests,
                           :v1TeacherTests,
                           :v1CohortTests] do
end

task :apiV1AssociationTests => [:v1SchoolSessionAssociationTests,
                                :v1SectionAssessmentAssociationTests,
                                :v1SessionCourseAssociationTests,
                                :v1StaffEdOrgAssociationTests,
                                :v1StaffProgramAssociationTests,
                                :v1StudentProgramAssociationTests,
                                :v1StudentAssessmentAssociationTests,
                                :v1StudentParentAssociationTests,
                                :v1StudentDisciplineIncidentAssociationTests,
                                :v1StudentSchoolAssociationTests,
                                :v1StudentSectionAssociationTests,
                                :v1StudentTranscriptAssociationTests,
                                :v1TeacherSchoolAssociationTests,
                                :v1TeacherSectionAssociationTests,
                                :v1StaffCohortAssociationTests,
                                :v1StudentCohortAssociationTests] do
end

desc "Run V1 Student Section Gradebook Entry Tests"
task :v1StudentSectionGradebookEntryTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("gradebookEntry", "gradebookEntry_fixture.json")
  setFixture("studentSectionGradebookEntry", "studentSectionGradebookEntry_fixture.json")
  runTests("test/features/apiV1/entities/studentSectionGradebookEntry")
end

desc "Run V1 Gradebook Entry Tests"
task :v1GradebookEntryTests => [:realmInit] do
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  runFixtureAndTests("test/features/apiV1/entities/gradebookEntry", "gradebookEntry", "gradebookEntry_fixture.json")
end

desc "Run V1 program Tests"
task :v1ProgramTests => [:realmInit] do
  setFixture("program", "program_fixture.json")
  runTests("test/features/apiV1/entities/program")
end

desc "Run V1 Discipline Incident Tests"
task :v1DisciplineIncidentTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  runTests("test/features/apiV1/entities/disciplineIncident")
end

desc "Run V1 Discipline Action Tests"
task :v1DisciplineActionTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_student_fixture.json", "test/data/smallville", false)
  setFixture("staff", "staff_fixture.json")
  setFixture("staff", "smallville_staff_fixture.json", "test/data/smallville", false)
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("disciplineAction", "disciplineAction_fixture.json")
  runTests("test/features/apiV1/entities/disciplineAction")
end

desc "Run V1 Student Discipline Incident Association Tests"
task :v1StudentDisciplineIncidentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("studentDisciplineIncidentAssociation", "studentDisciplineIncidentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentDisciplineIncidentAssociation")
end

desc "Run V1 Cascade Deletion Tests"
task :v1CascadeDeletionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/cascadeDeletion")
end

desc "Run V1 Direct References Tests"
task :v1DirectReferencesTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferences")
end

desc "Run V1 Direct Reference Collections Tests"
task :v1DirectReferenceCollectionsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferenceCollections")
end

desc "Run V1 Student Parent Association Tests"
task :v1StudentParentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("parent", "parent_fixture.json")
  setFixture("studentParentAssociation", "studentParentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentParentAssociation")
end

desc "Run V1 Student Transcript Association Tests"
task :v1StudentTranscriptAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("course", "course_fixture.json")
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("studentTranscriptAssociation", "studentTranscriptAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentTranscriptAssociation")
end

desc "Run V1 Teacher School Association Tests"
task :v1TeacherSchoolAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("teacherSchoolAssociation", "teacherSchoolAssociation_fixture.json")
  runTests("test/features/apiV1/associations/teacherSchoolAssociation")
end

desc "Run V1 Teacher Section Association Tests"
task :v1TeacherSectionAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "smallville_teacher_sections_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/associations/teacherSectionAssociation")
end

desc "Run V1 Section Assessment Association Tests"
task :v1SectionAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("section", "section_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("sectionAssessmentAssociation", "sectionAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("sectionAssessmentAssociation", "smallville_section_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sectionAssessmentAssociation")
end

desc "Run V1 Student Assessment Association Tests"
task :v1StudentAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentAssessmentAssociation", "studentAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("studentAssessmentAssociation", "smallville_student_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentAssessmentAssociation")
end

desc "Run V1 Student Section Association Tests"
task :v1StudentSectionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("studentSectionAssociation", "smallville_student_section_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSectionAssociation")
end

desc "Run V1 Staff Education Organization Association Tests"
task :v1StaffEdOrgAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("staffEducationOrganizationAssociation", "staffEducationOrganizationAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffEducationOrganizationAssociation")
end

desc "Run V1 Staff Program Association Tests"
task :v1StaffProgramAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("staffProgramAssociation", "staffProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffProgramAssociation")
end

desc "Run V1 Student Program Association Tests"
task :v1StudentProgramAssociationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("studentProgramAssociation", "studentProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentProgramAssociation")
end

desc "Run V1 School Session Association Tests"
task :v1SchoolSessionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("schoolSessionAssociation", "schoolSessionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("session", "smallville_sessions_fixture.json", "test/data/smallville", false)
  setFixture("schoolSessionAssociation", "smallville_school_session_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/schoolSessionAssociation")
end

desc "Run V1 Student School Association Tests"
task :v1StudentSchoolAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("studentSchoolAssociation", "studentSchoolAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("studentSchoolAssociation", "smallville_student_school_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSchoolAssociation")
end

desc "Run V1 Session Course Association Tests"
task :v1SessionCourseAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("session", "smallville_session_fixture.json", "test/data/smallville", false)
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("sessionCourseAssociation", "smallville_session_course_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sessionCourseAssociation")
end

desc "Run V1 Staff Cohort Association Tests"
task :v1StaffCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("staff", "staff_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("staffCohortAssociation", "staffCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/staffCohortAssociation")
end

desc "Run V1 Student Cohort Association Tests"
task :v1StudentCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("studentCohortAssociation", "studentCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/studentCohortAssociation")
end

desc "Run V1 Education Organization Tests"
task :v1EducationOrganizationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/entities/educationOrganization")
end

desc "Run V1 Staff Tests"
task :v1StaffTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/staff", "staff", "staff_fixture.json")
end

desc "Run V1 Section Tests"
task :v1SectionTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/section", "section", "section_fixture.json")
end

desc "Run V1 Course Tests"
task :v1CourseTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/course", "course", "course_fixture.json")
end

desc "Run V1 Session Tests"
task :v1SessionTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/session", "session", "session_fixture.json")
end

desc "Run V1 School Tests"
task :v1SchoolTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/school", "school", "school_fixture.json")
end

desc "Run V1 Student Tests"
task :v1StudentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/student", "student", "student_fixture.json")
end

desc "Run V1 Teacher Tests"
task :v1TeacherTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run V1 Assessment Tests"
task :v1AssessmentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run V1 LearningObjective Tests"
task :v1LearningObjectiveTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/learningObjective","learningObjective","learningObjective_fixture.json")
end

desc "Run V1 Parent Tests"
task :v1ParentTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/parent/parent_crud.feature","parent","parent_fixture.json")
end

desc "Run V1 Parent Security Tests"
task :v1ParentSecurityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/parent/parent_security.feature")
end

desc "Run V1 Attendance Tests"
task :v1AttendanceTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/attendance/attendance.feature","attendance","attendance_fixture.json")
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/attendance/attendance_security.feature")
end

desc "Run V1 Cohort Tests"
task :v1CohortTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runFixtureAndTests("test/features/apiV1/entities/cohort","cohort","cohort_fixture.json")
end

desc "Run V1 Home URI Tests"
task :v1homeUriTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/home_uri")
end

desc "Run V1 Hierachy Traversal Tests"
task :v1HierarchyTraversalTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/hierarchyTraversal")
end

desc "Run V1 Validation Tests"
task :v1ValidationTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("teacher", "teacher_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  runTests("test/features/apiV1/validation")
end

desc "Run Sorting and Paging Tests"
task :v1SortingAndPagingTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/sorting_paging")
end

desc "Run Encryption Tests"
task :v1EncryptionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/encryption")
end

desc "Run Target Tests"
task :v1TargetTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/targets")
end

desc "Run List Tests"
task :v1ListTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/lists")
end

desc "Run V1 Assessment User Story Tests"
task :v1EndUserStoryAssessmentTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/assessments/assessment.feature")
end

desc "Run V1 Custom entity User Story Tests"
task :v1EndUserStoryCustomEntityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/CustomEntities/CustomEntities.feature")
end

desc "Run V1 Student Optional Fields Tests"
task :v1StudentOptionalFieldsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/student_optional_fields.feature")
end

desc "Run V1 Single Student View Tests"
task :v1SingleStudentViewTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/single_student_view.feature")
end

desc "Run V1 XML Tests"
task :v1XMLTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  runTests("test/features/apiV1/xml/xml.feature")
end

############################################################
# API V1 tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests => [:adminToolsTests, :databrowserTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Admin-Tools Selenium Tests"
task :adminToolsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/admintools")
  Rake::Task["importSandboxData"].execute
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Dataprowler Selenium Tests"
task :databrowserTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/databrowser/databrowser_simple_detail_view.feature")
  runTests("test/features/databrowser/databrowser_denial.feature")
  runTests("test/features/databrowser/critical_auth_bugfix.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


desc "Run IDP Authentication Selenium Tests"
task :idpAuthTests => [:realmInit] do
  runTests("test/features/databrowser/idp_authentication.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Sandbox Mock IDP Authentication Selenium Tests"
task :mockIDPAuthTests => [:realmInit, :importSandboxData] do
  runTests("test/features/apiV1/end_user_stories/sandbox/mockIDP/MockIDP.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/security")
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests,
                         :dashboardK3ViewTests,
                         :dashboardHSViewTests,
                         :dashboardUserBasedViewTests,
                         :dashboardIntegratedTests,
                         :dashboardLoginTests,
                         :dashboardStudentProfileTests,
                         :dashboardAssessmentTests,
                         :dashboardAttendance,
                         :dashboardStudentHistoricalDataTests,
                         :dashboardStudentContactInfoLiveTests,
                         :dashboardStudentGradebookEntryTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end

end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget.feature")
end

desc "Run Dashboard K-3 view Tests"
task :dashboardK3ViewTests do
  runTests("test/features/dashboard/dash/k3view.feature")
end

desc "Run Dashboard High School view Tests"
task :dashboardHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view.feature")
end

desc "Run Dashboard user based view selection tests"
task :dashboardUserBasedViewTests do
  runTests("test/features/dashboard/dash/user_based_views.feature")
end

desc "Run Dashboard integration acceptance tests"
task :dashboardIntegratedTests do
    runTests("test/features/dashboard/dash/dashboard_api_integration.feature")
end


desc "Run Dashboard login acceptance tests"
task :dashboardLoginTests do
    runTests("test/features/dashboard/dash/dashboard_login.feature")
end

desc "Run Dashboard Assessment tests"
task :dashboardAssessmentTests => [:MostRecentResultTests,:HighestEverResultTests, :PerformanceLevels ] do
end

desc "Run Dashboard most recent result acceptance tests"
task :MostRecentResultTests do
    runTests("test/features/dashboard/assessments/MostRecent.feature")
end

desc "Run Dashboard highest ever result acceptance tests"
task :HighestEverResultTests do
    runTests("test/features/dashboard/assessments/Highest_AssessmentScore.feature")
end

desc "Run Dashboard performance level acceptance tests"
task :PerformanceLevels do
    runTests("test/features/dashboard/assessments/PerformanceLevels_MostRecentWindow.feature")
end

desc "Run dashboard attendance related tests"
task :dashboardAttendance do
  runTests("test/features/dashboard/dash/attendance.feature")
end

desc "Run dashboard student profile tests"
task :dashboardStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile.feature")
end

desc "Run dashboard student historical data tests"
task :dashboardStudentHistoricalDataTests do
  runTests("test/features/dashboard/students/HistoricalData.feature")
end

desc "Run dashboard student contact info live tests"
task :dashboardStudentContactInfoLiveTests do
  runTests("test/features/dashboard/dash/contact_info_live.feature")
end

desc "Run Local Dashboard Tests - Import Realm, Import Data Data, Run Tests"
task :localDashboardTests => [:realmInit,:importUnifiedData,:dashboardTests] do
end

desc "Run dashboard integration tests"
task :dashboardSdsTests do
  runTests("test/features/dashboard/dash/dashboard_sds.feature")
end

desc "Run dashboard integrated Tests - Student Contact info"
task :dashboardSdsContactInfoTests do
  runTests("test/features/dashboard/dash/contact_info_sds.feature")
end

desc "Run dashboard student gradebook entry tests"
task :dashboardStudentGradebookEntryTests do
  runTests("test/features/dashboard/students/StudentGradebookEntry.feature")
end

############################################################
# Dashboard tests end
############################################################

############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].execute
  Rake::Task["dashboardSdsContactInfoTests"].execute    
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################

############################################################
# SDK Tests
############################################################

desc "Run JavaSDK acceptance tests"
task :JavaSDKTests => [:JavaSDKSampleAppTest,:JavaSDKCRUDTest] do
    displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run JavaSDK sampleApp acceptance tests"
task :JavaSDKSampleAppTest => [:importUnifiedData, :realmInitNoPeople] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/sampleApp/sampleApp.feature")
end

desc "Run JavaSDK CRUD acceptance tests"
task :JavaSDKCRUDTest => [:realmInitNoPeople,:importStoriedData] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/CRUD/CRUD.feature")
end

############################################################
# SDK Tests end
############################################################

desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "teacher" => "teacher_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "school" => "smallville_schools_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "teacher" => "smallville_teachers_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "school" => "unified_data/uds_school.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "teacher" => "unified_data/uds_teacher.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end
###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "school",
                  "section",
                  "studentSectionAssociation",
                  "teacher",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""
  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit, :peopleInit] do
  setFixture("realm", "realm_fixture.json")
end

task :realmInitNoPeople => [:appInit] do
  setFixture("realm", "realm_fixture.json")
end

task :peopleInit do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("staff", "staff_fixture.json")
end

# Task that initializes the application registration fixture
task :appInit do
  setFixture("application", "application_fixture.json")
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


#desc "Run Liferay Tests"
#task :liferay => [:liferayTest] do
 # displayFailureReport()
#  if $SUCCESS
 #   puts "Completed All Tests"
 # else
 #   raise "Tests have failed"
 # end
#end

###########################################################
#SLI Liferay testing
###########################################################

#desc "Run the testing for life ray SLI for admin"
#task :liferayTest do
#  runTests("test/features/liferay/SLI_admin.feature")
#  runTests("test/features/liferay/SLI_normal_user.feature")
#  runTests("test/features/liferay/NY_Realm_EULA_agree.feature")
 # runTests("test/features/liferay/report_problem.feature")

# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")

#end




############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:ingestionAcceptanceSdsTest, :ingestionDemoDataTest, :ingestionSessionTest, :ingestionNegativeTests, :ingestionAttendanceTests,
                         :ingestionEncryptionTests, :ingestionAssessmentTests, :ingestionStudentParentsTests, :ingestionStudentTranscriptAssociationTests, :ingestionProgramTest,
                         :ingestionidNamespaceTest, :ingestionGradebookEntryTests, :ingestionSmooksVerificationTests, :ingestionXsdValidationTest, :ingestionOfflineSimpleTest,
                         :ingestionAPAssessmentTests, :ingestionACTAssessmentTests,:ingestionStudentProgramAssociationTest, :ingestionBatchJobTest, :ingestionIDReferenceResolutionTest, :ingestionTenantPurgeTests, :ingestionStaffProgramAssociationTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Demo Tests"
task :ingestionDemoDataTest do
  runTests("test/features/ingestion/features/ingestion_demo.feature")
end

desc "Run Ingestion Acceptance SDS Tests"
task :ingestionAcceptanceSdsTest do
  runTests("test/features/ingestion/features/ingestion_acceptance_SDS_test.feature")
end

desc "Run Ingestion Session Test"
task :ingestionSessionTest do
  runTests("test/features/ingestion/features/ingestion_session.feature")
end

desc "Run Ingestion Program Test"
task :ingestionProgramTest do
  runTests("test/features/ingestion/features/ingestion_program.feature")
end

desc "Run Ingestion StudentProgramAssociation Test"
task :ingestionStudentProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StudentProgramAssociation.feature")
end

desc "Run Ingestion StaffProgramAssociation Test"
task :ingestionStaffProgramAssociationTest do
  runTests("test/features/ingestion/features/ingestion_StaffProgramAssociation.feature")
end

desc "Run Ingestion Negative Tests"
task :ingestionNegativeTests do
  runTests("test/features/ingestion/features/negative_testing.feature")
end

desc "Run Ingestion Smooks Verification Tests"
task :ingestionSmooksVerificationTests do
  runTests("test/features/ingestion/features/smooks_verification.feature")
end

desc "Run Ingestion Encryption Tests"
task :ingestionEncryptionTests do
  runTests("test/features/ingestion/features/encryption_testing.feature")
end

desc "Run Ingestion Daily Attendance Tests"
task :ingestionAttendanceTests do
  runTests("test/features/ingestion/features/ingestion_daily_attendance.feature")
end

desc "Run Ingestion Assessment Tests"
task :ingestionAssessmentTests do
  runTests("test/features/ingestion/features/ingestion_assessment_metadata.feature")
end

desc "Run Student Parents Tests"
task :ingestionStudentParentsTests do
  runTests("test/features/ingestion/features/ingestion_student_parents.feature")
end

desc "Run Student Transcript Association Test"
task :ingestionStudentTranscriptAssociationTests do
  runTests("test/features/ingestion/features/ingestion_StudentTranscriptAssociation.feature")
end

desc "Run idNamespace Test"
task :ingestionidNamespaceTest do
  runTests("test/features/ingestion/features/ingestion_idNamespace.feature")
end

desc "Run Ingestion Gradebook Entry Test"
task :ingestionGradebookEntryTests do
  runTests("test/features/ingestion/features/ingestion_GradebookEntry.feature")
end

desc "Run Ingestion Batch Job Tests"
task :ingestionBatchJobTest do
  runTests("test/features/ingestion/features/ingestion_BatchJob.feature")
end

desc "Run Ingestion XSD Validation Test"
task :ingestionXsdValidationTest do
  runTests("test/features/ingestion/features/xsd_validation.feature")
end

desc "Run Ingestion AP Assessment and StudentAssessment Tests"
task :ingestionAPAssessmentTests do
  runTests("test/features/ingestion/features/apAssessment.feature")
end

desc "Run Ingestion ACT Assessment Tests"
task :ingestionACTAssessmentTests do
  runTests("test/features/ingestion/features/ACTAssessment.feature")
end

desc "Run Ingestion Ed-Fi ID Reference Resolution Test"
task :ingestionIDReferenceResolutionTest do
  runTests("test/features/ingestion/features/ingestion_IDRef.feature")
end

# This task SHOULD NOT BE ADDED to the general ingestion test suite
desc "Run Ingestion Performance Tests"
task :ingestionPerformanceTest do
  runTests("test/features/ingestion/features/performance_testing.feature")
end

############################################################
# Ingestion Offline Tool tests start
############################################################
desc "Run Ingestion Offline Tool Acceptances Tests"
task :ingestionOfflineToolTests => [:ingestionOfflineSimpleTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Ingestion Offline Tool Simple Test"
task :ingestionOfflineSimpleTest do
  runTests("test/features/ingestion/features/offline_validation.feature")
end

desc "Run Tenant Purge Test"
task :ingestionTenantPurgeTests do
  runTests("test/features/ingestion/features/tenant_purge.feature")
end

########
############################################################
# Ingestion tests end
############################################################

############################################################
# API V1 tests start
############################################################
desc "Run API V1 acceptance tests"
task :apiV1Tests => [:apiV1EntityTests,
                     :apiV1AssociationTests,
                     :v1homeUriTests,
                     :v1ValidationTests,
                     :v1HierarchyTraversalTests,
                     :v1DirectReferencesTests,
                     :v1DirectReferenceCollectionsTests,
                     :v1CascadeDeletionTests,
                     :v1EncryptionTests,
                     :v1SortingAndPagingTests,
                     :v1ListTests,
                     :v1TargetTests,
                     :v1EndUserStoryAssessmentTests,
                     :v1EndUserStoryCustomEntityTests,
                     :v1StudentOptionalFieldsTests,
                     :v1SingleStudentViewTests,
                     :v1XMLTests] do
  displayFailureReport()
end

task :apiV1EntityTests => [:v1AssessmentTests,
                           :v1LearningObjectiveTests,
                           :v1AttendanceTests,
                           :v1CourseTests,
                           :v1EducationOrganizationTests,
                           :v1GradebookEntryTests,
                           :v1ParentTests,
                           :v1ParentSecurityTests,
                           :v1SchoolTests,
                           :v1SectionTests,
                           :v1SessionTests,
                           :v1StaffTests,
                           :v1StudentTests,
                           :v1StudentSectionGradebookEntryTests,
                           :v1ProgramTests,
                           :v1DisciplineIncidentTests,
                           :v1DisciplineActionTests,
                           :v1TeacherTests,
                           :v1CohortTests] do
end

task :apiV1AssociationTests => [:v1SchoolSessionAssociationTests,
                                :v1SectionAssessmentAssociationTests,
                                :v1SessionCourseAssociationTests,
                                :v1StaffEdOrgAssociationTests,
                                :v1StaffProgramAssociationTests,
                                :v1StudentProgramAssociationTests,
                                :v1StudentAssessmentAssociationTests,
                                :v1StudentParentAssociationTests,
                                :v1StudentDisciplineIncidentAssociationTests,
                                :v1StudentSchoolAssociationTests,
                                :v1StudentSectionAssociationTests,
                                :v1StudentTranscriptAssociationTests,
                                :v1TeacherSchoolAssociationTests,
                                :v1TeacherSectionAssociationTests,
                                :v1StaffCohortAssociationTests,
                                :v1StudentCohortAssociationTests] do
end

desc "Run V1 Student Section Gradebook Entry Tests"
task :v1StudentSectionGradebookEntryTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("gradebookEntry", "gradebookEntry_fixture.json")
  setFixture("studentSectionGradebookEntry", "studentSectionGradebookEntry_fixture.json")
  runTests("test/features/apiV1/entities/studentSectionGradebookEntry")
end

desc "Run V1 Gradebook Entry Tests"
task :v1GradebookEntryTests => [:realmInit] do
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  runFixtureAndTests("test/features/apiV1/entities/gradebookEntry", "gradebookEntry", "gradebookEntry_fixture.json")
end

desc "Run V1 program Tests"
task :v1ProgramTests => [:realmInit] do
  setFixture("program", "program_fixture.json")
  runTests("test/features/apiV1/entities/program")
end

desc "Run V1 Discipline Incident Tests"
task :v1DisciplineIncidentTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  runTests("test/features/apiV1/entities/disciplineIncident")
end

desc "Run V1 Discipline Action Tests"
task :v1DisciplineActionTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_student_fixture.json", "test/data/smallville", false)
  setFixture("staff", "staff_fixture.json")
  setFixture("staff", "smallville_staff_fixture.json", "test/data/smallville", false)
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("disciplineAction", "disciplineAction_fixture.json")
  runTests("test/features/apiV1/entities/disciplineAction")
end

desc "Run V1 Student Discipline Incident Association Tests"
task :v1StudentDisciplineIncidentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("disciplineIncident", "disciplineIncident_fixture.json")
  setFixture("studentDisciplineIncidentAssociation", "studentDisciplineIncidentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentDisciplineIncidentAssociation")
end

desc "Run V1 Cascade Deletion Tests"
task :v1CascadeDeletionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/cascadeDeletion")
end

desc "Run V1 Direct References Tests"
task :v1DirectReferencesTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferences")
end

desc "Run V1 Direct Reference Collections Tests"
task :v1DirectReferenceCollectionsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/associations/directReferenceCollections")
end

desc "Run V1 Student Parent Association Tests"
task :v1StudentParentAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("parent", "parent_fixture.json")
  setFixture("studentParentAssociation", "studentParentAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentParentAssociation")
end

desc "Run V1 Student Transcript Association Tests"
task :v1StudentTranscriptAssociationTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("course", "course_fixture.json")
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("studentTranscriptAssociation", "studentTranscriptAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentTranscriptAssociation")
end

desc "Run V1 Teacher School Association Tests"
task :v1TeacherSchoolAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("school", "school_fixture.json")
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("teacherSchoolAssociation", "teacherSchoolAssociation_fixture.json")
  runTests("test/features/apiV1/associations/teacherSchoolAssociation")
end

desc "Run V1 Teacher Section Association Tests"
task :v1TeacherSectionAssociationTests => [:realmInit] do
  setFixture("teacher", "teacher_fixture.json")
  setFixture("teacher", "smallville_teachers_fixture.json", "test/data/smallville", false)
  setFixture("section", "section_fixture.json")
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "smallville_teacher_sections_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/associations/teacherSectionAssociation")
end

desc "Run V1 Section Assessment Association Tests"
task :v1SectionAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("section", "section_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("sectionAssessmentAssociation", "sectionAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("sectionAssessmentAssociation", "smallville_section_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sectionAssessmentAssociation")
end

desc "Run V1 Student Assessment Association Tests"
task :v1StudentAssessmentAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentAssessmentAssociation", "studentAssessmentAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("assessment", "smallville_assessment_fixture.json", "test/data/smallville", false)
  setFixture("studentAssessmentAssociation", "smallville_student_assessment_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentAssessmentAssociation")
end

desc "Run V1 Student Section Association Tests"
task :v1StudentSectionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("section", "smallville_sections_fixture.json", "test/data/smallville", false)
  setFixture("studentSectionAssociation", "smallville_student_section_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSectionAssociation")
end

desc "Run V1 Staff Education Organization Association Tests"
task :v1StaffEdOrgAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  setFixture("staffEducationOrganizationAssociation", "staffEducationOrganizationAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffEducationOrganizationAssociation")
end

desc "Run V1 Staff Program Association Tests"
task :v1StaffProgramAssociationTests => [:realmInit] do
  setFixture("staff", "staff_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("staffProgramAssociation", "staffProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/staffProgramAssociation")
end

desc "Run V1 Student Program Association Tests"
task :v1StudentProgramAssociationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("program", "program_fixture.json")
  setFixture("studentProgramAssociation", "studentProgramAssociation_fixture.json")
  runTests("test/features/apiV1/associations/studentProgramAssociation")
end

desc "Run V1 School Session Association Tests"
task :v1SchoolSessionAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("schoolSessionAssociation", "schoolSessionAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("session", "smallville_sessions_fixture.json", "test/data/smallville", false)
  setFixture("schoolSessionAssociation", "smallville_school_session_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/schoolSessionAssociation")
end

desc "Run V1 Student School Association Tests"
task :v1StudentSchoolAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("studentSchoolAssociation", "studentSchoolAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("school", "smallville_schools_fixture.json", "test/data/smallville", false)
  setFixture("student", "smallville_students_fixture.json", "test/data/smallville", false)
  setFixture("studentSchoolAssociation", "smallville_student_school_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/studentSchoolAssociation")
end

desc "Run V1 Session Course Association Tests"
task :v1SessionCourseAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  #add smallville (no drop)
  setFixture("session", "smallville_session_fixture.json", "test/data/smallville", false)
  setFixture("course", "smallville_course_fixture.json", "test/data/smallville", false)
  setFixture("sessionCourseAssociation", "smallville_session_course_association_fixture.json", "test/data/smallville", false)
  #run test
  runTests("test/features/apiV1/associations/sessionCourseAssociation")
end

desc "Run V1 Staff Cohort Association Tests"
task :v1StaffCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("staff", "staff_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("staffCohortAssociation", "staffCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/staffCohortAssociation")
end

desc "Run V1 Student Cohort Association Tests"
task :v1StudentCohortAssociationTests => [:realmInit] do
  #drop data, re add fixture data
  setFixture("student", "student_fixture.json")
  setFixture("cohort", "cohort_fixture.json")
  setFixture("studentCohortAssociation", "studentCohortAssociation_fixture.json")
  #run test
  runTests("test/features/apiV1/associations/studentCohortAssociation")
end

desc "Run V1 Education Organization Tests"
task :v1EducationOrganizationTests => [:realmInit] do
  setFixture("educationOrganization", "educationOrganization_fixture.json")
  setFixture("educationOrganization", "smallville_edOrg_fixture.json", "test/data/smallville", false)
  runTests("test/features/apiV1/entities/educationOrganization")
end

desc "Run V1 Staff Tests"
task :v1StaffTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/staff", "staff", "staff_fixture.json")
end

desc "Run V1 Section Tests"
task :v1SectionTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("session", "session_fixture.json")
  setFixture("course", "course_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/section", "section", "section_fixture.json")
end

desc "Run V1 Course Tests"
task :v1CourseTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/course", "course", "course_fixture.json")
end

desc "Run V1 Session Tests"
task :v1SessionTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/session", "session", "session_fixture.json")
end

desc "Run V1 School Tests"
task :v1SchoolTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/school", "school", "school_fixture.json")
end

desc "Run V1 Student Tests"
task :v1StudentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/student", "student", "student_fixture.json")
end

desc "Run V1 Teacher Tests"
task :v1TeacherTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run V1 Assessment Tests"
task :v1AssessmentTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run V1 LearningObjective Tests"
task :v1LearningObjectiveTests => [:realmInit] do
  runFixtureAndTests("test/features/apiV1/entities/learningObjective","learningObjective","learningObjective_fixture.json")
end

desc "Run V1 Parent Tests"
task :v1ParentTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/parent/parent_crud.feature","parent","parent_fixture.json")
end

desc "Run V1 Parent Security Tests"
task :v1ParentSecurityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/parent/parent_security.feature")
end

desc "Run V1 Attendance Tests"
task :v1AttendanceTests => [:realmInit] do
  setFixture("student", "student_fixture.json")
  runFixtureAndTests("test/features/apiV1/entities/attendance/attendance.feature","attendance","attendance_fixture.json")
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/entities/attendance/attendance_security.feature")
end

desc "Run V1 Cohort Tests"
task :v1CohortTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runFixtureAndTests("test/features/apiV1/entities/cohort","cohort","cohort_fixture.json")
end

desc "Run V1 Home URI Tests"
task :v1homeUriTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/home_uri")
end

desc "Run V1 Hierachy Traversal Tests"
task :v1HierarchyTraversalTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/hierarchyTraversal")
end

desc "Run V1 Validation Tests"
task :v1ValidationTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("teacher", "teacher_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("section", "section_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("teacherSectionAssociation", "teacherSectionAssociation_fixture.json")
  runTests("test/features/apiV1/validation")
end

desc "Run Sorting and Paging Tests"
task :v1SortingAndPagingTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/sorting_paging")
end

desc "Run Encryption Tests"
task :v1EncryptionTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/encryption")
end

desc "Run Target Tests"
task :v1TargetTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/targets")
end

desc "Run List Tests"
task :v1ListTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/lists")
end

desc "Run V1 Assessment User Story Tests"
task :v1EndUserStoryAssessmentTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/assessments/assessment.feature")
end

desc "Run V1 Custom entity User Story Tests"
task :v1EndUserStoryCustomEntityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/end_user_stories/CustomEntities/CustomEntities.feature")
end

desc "Run V1 Student Optional Fields Tests"
task :v1StudentOptionalFieldsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/student_optional_fields.feature")
end

desc "Run V1 Single Student View Tests"
task :v1SingleStudentViewTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/apiV1/optional_fields/single_student_view.feature")
end

desc "Run V1 XML Tests"
task :v1XMLTests => [:realmInit] do
  setFixture("school", "school_fixture.json")
  setFixture("student", "student_fixture.json")
  setFixture("assessment", "assessment_fixture.json")
  setFixture("studentSectionAssociation", "studentSectionAssociation_fixture.json")
  setFixture("sessionCourseAssociation", "sessionCourseAssociation_fixture.json")
  runTests("test/features/apiV1/xml/xml.feature")
end

############################################################
# API V1 tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests => [:adminToolsTests, :databrowserTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Admin-Tools Selenium Tests"
task :adminToolsTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/admintools")
  Rake::Task["importSandboxData"].execute
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Dataprowler Selenium Tests"
task :databrowserTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/databrowser/databrowser_simple_detail_view.feature")
  runTests("test/features/databrowser/databrowser_denial.feature")
  runTests("test/features/databrowser/critical_auth_bugfix.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


desc "Run IDP Authentication Selenium Tests"
task :idpAuthTests => [:realmInit] do
  runTests("test/features/databrowser/idp_authentication.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run Sandbox Mock IDP Authentication Selenium Tests"
task :mockIDPAuthTests => [:realmInit, :importSandboxData] do
  runTests("test/features/apiV1/end_user_stories/sandbox/mockIDP/MockIDP.feature")
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests => [:realmInit] do
  Rake::Task["importSandboxData"].execute
  runTests("test/features/security")
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests,
                         :dashboardK3ViewTests,
                         :dashboardHSViewTests,
                         :dashboardUserBasedViewTests,
                         :dashboardIntegratedTests,
                         :dashboardLoginTests,
                         :dashboardStudentProfileTests,
                         :dashboardAssessmentTests,
                         :dashboardAttendance,
                         :dashboardStudentHistoricalDataTests,
                         :dashboardStudentContactInfoLiveTests,
                         :dashboardStudentGradebookEntryTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end

end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/dash/population_widget.feature")
end

desc "Run Dashboard K-3 view Tests"
task :dashboardK3ViewTests do
  runTests("test/features/dashboard/dash/k3view.feature")
end

desc "Run Dashboard High School view Tests"
task :dashboardHSViewTests do
  runTests("test/features/dashboard/dash/high_school_view.feature")
end

desc "Run Dashboard user based view selection tests"
task :dashboardUserBasedViewTests do
  runTests("test/features/dashboard/dash/user_based_views.feature")
end

desc "Run Dashboard integration acceptance tests"
task :dashboardIntegratedTests do
    runTests("test/features/dashboard/dash/dashboard_api_integration.feature")
end


desc "Run Dashboard login acceptance tests"
task :dashboardLoginTests do
    runTests("test/features/dashboard/dash/dashboard_login.feature")
end

desc "Run Dashboard Assessment tests"
task :dashboardAssessmentTests => [:MostRecentResultTests,:HighestEverResultTests, :PerformanceLevels ] do
end

desc "Run Dashboard most recent result acceptance tests"
task :MostRecentResultTests do
    runTests("test/features/dashboard/assessments/MostRecent.feature")
end

desc "Run Dashboard highest ever result acceptance tests"
task :HighestEverResultTests do
    runTests("test/features/dashboard/assessments/Highest_AssessmentScore.feature")
end

desc "Run Dashboard performance level acceptance tests"
task :PerformanceLevels do
    runTests("test/features/dashboard/assessments/PerformanceLevels_MostRecentWindow.feature")
end

desc "Run dashboard attendance related tests"
task :dashboardAttendance do
  runTests("test/features/dashboard/dash/attendance.feature")
end

desc "Run dashboard student profile tests"
task :dashboardStudentProfileTests do
  runTests("test/features/dashboard/dash/student_profile.feature")
end

desc "Run dashboard student historical data tests"
task :dashboardStudentHistoricalDataTests do
  runTests("test/features/dashboard/students/HistoricalData.feature")
end

desc "Run dashboard student contact info live tests"
task :dashboardStudentContactInfoLiveTests do
  runTests("test/features/dashboard/dash/contact_info_live.feature")
end

desc "Run Local Dashboard Tests - Import Realm, Import Data Data, Run Tests"
task :localDashboardTests => [:realmInit,:importUnifiedData,:dashboardTests] do
end

desc "Run dashboard integration tests"
task :dashboardSdsTests do
  runTests("test/features/dashboard/dash/dashboard_sds.feature")
end

desc "Run dashboard integrated Tests - Student Contact info"
task :dashboardSdsContactInfoTests do
  runTests("test/features/dashboard/dash/contact_info_sds.feature")
end

desc "Run dashboard student gradebook entry tests"
task :dashboardStudentGradebookEntryTests do
  runTests("test/features/dashboard/students/StudentGradebookEntry.feature")
end

############################################################
# Dashboard tests end
############################################################

############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].execute
  Rake::Task["dashboardSdsContactInfoTests"].execute    
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################

############################################################
# SDK Tests
############################################################

desc "Run JavaSDK acceptance tests"
task :JavaSDKTests => [:JavaSDKSampleAppTest,:JavaSDKCRUDTest] do
    displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

desc "Run JavaSDK sampleApp acceptance tests"
task :JavaSDKSampleAppTest => [:importUnifiedData, :realmInitNoPeople] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/sampleApp/sampleApp.feature")
end

desc "Run JavaSDK CRUD acceptance tests"
task :JavaSDKCRUDTest => [:realmInitNoPeople,:importStoriedData] do
    runTests("test/features/apiV1/end_user_stories/sandbox/JavaSDK/CRUD/CRUD.feature")
end

############################################################
# SDK Tests end
############################################################

desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "teacher" => "teacher_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "school" => "smallville_schools_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "teacher" => "smallville_teachers_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "school" => "unified_data/uds_school.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "teacher" => "unified_data/uds_teacher.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end

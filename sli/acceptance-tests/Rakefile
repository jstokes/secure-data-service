
Dir.glob('suites/*.rake').each { |r| import r }


###################################################
# Section to setup necessary env vars and overrides

DB_HOST = ENV['DB_HOST'] ? ENV['DB_HOST'] : "localhost"

DB_NAME = ENV['DB_NAME'] ? ENV['DB_NAME'] : "sli"

MONGO_BIN = ENV['MONGO_HOME'] ? ENV['MONGO_HOME']+"/bin/" : ""

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

$collectionSet = ["student",
                  "studentSchoolAssociation",
                  "course",
                  "educationOrganization",
                  "section",
                  "studentSectionAssociation",
                  "staff",
                  "staffEducationOrganizationAssociation",
                  "teacherSchoolAssociation",
                  "teacherSectionAssociation",
                  "session",
                  "assessment",
                  "studentAssessmentAssociation",
                  "gradebookEntry",
                  "studentTranscriptAssociation",
                  "studentSectionGradebookEntry",
                  "parent",
                  "studentParentAssociation",
                  "attendance",
                  "program",
                  "studentAcademicRecord",
                  "grade"]

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  @tags ||= ["~@wip", "~@sandbox"]
  sh "cucumber #{testDirPath} #{EXPAND} --tags #{@tags.join(' --tags ')} #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
      raise "Tests Failed" if (ENV['FAILFAST'])
    end
  end
end

def setFixture(collectionName,fixtureFileName,fixtureFilePath="test/data",dropExistingCollection=true)
  #turn true/false into command line option
  dropOption = (dropExistingCollection) ? "--drop":""

  sh "#{MONGO_BIN}mongo #{DB_HOST}/#{DB_NAME} --quiet --eval \"printjson(db.#{collectionName}.dropIndexes().msg)\""

  sh "#{MONGO_BIN}mongoimport #{dropOption} -d #{DB_NAME} -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def addMultipleFixtureFiles(myHash, fixtureFilePath="test/data")
  myHash.each do |key, value|
    setFixture(key,value,fixtureFilePath,false)
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"

  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end

  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production

# Task that initializes the realm fixture.  Should only be done once
task :realmInit => [:appInit] do
  #Preserve the bootstrap realm
  sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c realm -q \"{\\\"body.uniqueIdentifier\\\": \\\"Shared Learning Infrastructure\\\"}\" -h #{DB_HOST}  -o test/data/temp_realm.json"
  setFixture("realm", "temp_realm.json", "test/data", true)
  setFixture("realm", "realm_fixture.json", "test/data", false)
  sh "rm -f test/data/temp_realm.json"
end

task :appDenialInit do
  setFixture("application", "application_denial_fixture.json")
end

task :realmInitNoPeople => [:realmInit] do
end

# Task that initializes the application registration fixture
task :appInit do
  #Preserve the bootstrap apps
  sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c application -q \"{\\\"body.bootstrap\\\": true}\" -h #{DB_HOST}  -o test/data/temp_apps.json"
  setFixture("application", "application_fixture.json")
  setFixture("application", "temp_apps.json", "test/data", false)
  sh "rm -f test/data/temp_apps.json"
  setFixture("applicationAuthorization", "applicationAuthorization_fixture.json")
  setFixture("userSession", "oauth_authentication_tokens.json")
end

# Run a whole series of acceptance tests
desc "Run API, Ingestion, Dashboard, SDK, and SimpleIDP acceptance tests"
task :fullSuite => [:production, :simpleIDPAuthTests, :sandboxTests, :provisioningTests, :dashboardTests, :JavaSDKTests, :integrationTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

# This task will be used for end-to-end integration tests but currently just run all
# available acceptance tests
desc "Default Task: Run All Acceptances Tests"
task :production => [:apiV1Tests, :securityTests, :onboardingTests, :ingestionTests, :ingestionOfflineToolTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


# This task is used as an entry point in Jenkins to run API and Security Tests
# It is needed so that it fails the build if there are any failures based on the
# 'raise' exception logic below.  Rake will exit immediately if you raise an exception
# before all the tests complete and will show incomplete results
desc "Run API/Security Acceptances Tests"
task :apiAndSecurityTests => [:apiV1Tests, :securityTests, :onboardingTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end



############################################################
# Integration Tests start
############################################################

desc "Run Integration Acceptance Tests"
task :integrationTests => [:realmInitNoPeople] do
  OTHER_TAGS = OTHER_TAGS+" --tags @integration"
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  Rake::Task["crossAppTests"].execute
  Rake::Task["dashboardSdsTests"].invoke
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

############################################################
# Integration Tests end
############################################################

############################################################
# Cross App Tests start
############################################################

desc "Run cross application testing"
task :crossAppTests do
  runTests("test/features/cross_app_tests")
end

############################################################
# Cross App Tests end
############################################################



desc "Export Storied Test Data"
task :exportStoriedData do
  Rake::Task["ingestionAcceptanceSdsTest"].execute
  if $SUCCESS
    $collectionSet.each do |collection|
      sh "rm -f test/data/storied_data/sds_#{collection}.json"
      sh "#{MONGO_BIN}mongoexport -d #{DB_NAME} -c #{collection} -h #{DB_HOST} -o test/data/storied_data/sds_#{collection}.json"
    end
  else
    if ENV['FORCE_COLOR']
      puts "\e[31m Ingestion Failed! Fixture Data Not Updated! Please fix and re-run \e[0m"
    else
      puts "Ingestion Failed! Fixture Data Not Updated! Please fix and re-run"
    end
  end

end

desc "Import Storied Data Set"
task :importStoriedData do
  testHash = Hash[]
  $collectionSet.each do |collection|
    testHash["#{collection}"] = "storied_data/sds_#{collection}.json"
  end
  setMultipleFixtureFiles(testHash)
end

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "session" => "session_fixture.json",
    "program" => "program_fixture.json",
    "section" => "section_fixture.json",
    "course" => "course_fixture.json",
    "student" => "student_fixture.json",
    "parent" => "parent_fixture.json",
    "studentParentAssociation" => "studentParentAssociation_fixture.json",
    "staff" => "staff_fixture.json",
    "assessment" => "assessment_fixture.json",
    "attendance" => "attendance_fixture.json",
    "studentSchoolAssociation" => "studentSchoolAssociation_fixture.json",
    "teacherSectionAssociation" => "teacherSectionAssociation_fixture.json",
    "studentAssessmentAssociation" => "studentAssessmentAssociation_fixture.json",
    "studentSectionAssociation" => "studentSectionAssociation_fixture.json",
    "teacherSchoolAssociation" => "teacherSchoolAssociation_fixture.json",
    "educationOrganization" => "educationOrganization_fixture.json",
    "educationOrganizationSchoolAssociation" => "school_educationOrganization_fixture.json",
    "educationOrganizationAssociation" => "educationOrganizationAssociation_fixture.json",
    "aggregationDefinition" => "aggregationdefinition_fixture.json",
    "staffEducationOrganizationAssociation" => "staffEducationOrganizationAssociation_fixture.json",
    "schoolSessionAssociation" => "schoolSessionAssociation_fixture.json",
    "sessionCourseAssociation" => "sessionCourseAssociation_fixture.json",
    "sectionAssessmentAssociation" => "sectionAssessmentAssociation_fixture.json",
    "studentTranscriptAssociation" => "studentTranscriptAssociation_fixture.json",
    "gradebookEntry" => "gradebookEntry_fixture.json",
    "studentSectionGradebookEntry" => "studentSectionGradebookEntry_fixture.json",
    "disciplineIncident" => "disciplineIncident_fixture.json",
    "studentDisciplineIncidentAssociation" => "studentDisciplineIncidentAssociation_fixture.json",
    "disciplineAction" => "disciplineAction_fixture.json",
    "cohort" => "cohort_fixture.json",
    "staffCohortAssociation" => "staffCohortAssociation_fixture.json",
    "studentCohortAssociation" => "studentCohortAssociation_fixture.json",
    "staffProgramAssociation" => "staffProgramAssociation_fixture.json",
    "studentProgramAssociation" => "studentProgramAssociation_fixture.json",
    "studentAcademicRecord" => "studentAcademicRecord_fixture.json",
    "learningStandard" => "learningStandard_fixture.json",
    "learningObjective" => "learningObjective_fixture.json",
    "userAccount" => "userAccount_fixture.json",
    "grade" => "grade_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)

  smallvilleTestHash = Hash[
    "assessment" => "smallville_assessment_fixture.json",
    "course" => "smallville_courses_fixture.json",
    "courseSectionAssociation" => "smallville_course_section_association_fixture.json",
    "sessionCourseAssociation" => "smallville_course_session_association_fixture.json",
    "educationOrganizationAssociation" => "smallville_edOrg_edOrg_association_fixture.json",
    "educationOrganization" => "smallville_edOrg_fixture.json",
    "educationOrganizationSchoolAssociation" => "smallville_school_edOrg_fixture.json",
    "schoolSessionAssociation" => "smallville_school_session_association_fixture.json",
    "section" => "smallville_sections_fixture.json",
    "sectionAssessmentAssociation" => "smallville_section_assessment_fixture.json",
    "session" => "smallville_sessions_fixture.json",
    "student" => "smallville_students_fixture.json",
    "studentAssessmentAssociation" => "smallville_student_assessment_fixture.json",
    "studentSchoolAssociation" => "smallville_student_school_association_fixture.json",
    "studentSectionAssociation" => "smallville_student_section_association_fixture.json",
    "staff" => "smallville_staff_fixture.json",
    "teacherSectionAssociation" => "smallville_teacher_sections_fixture.json",
    "sectionSchoolAssociation" => "smallville_section_school_association_fixture.json"
  ]
  addMultipleFixtureFiles(smallvilleTestHash, "test/data/smallville")
end

desc "Import Unified Data Set"
task :importUnifiedData do
  testHash = Hash[
    "assessment" => "unified_data/uds_assessment.json",
    "attendance" => "unified_data/uds_attendance.json",
    "course" => "unified_data/uds_course.json",
    "educationOrganization" => "unified_data/uds_educationOrganization.json",
    "gradebookEntry" => "unified_data/uds_gradebookEntry.json",
    "parent" => "unified_data/uds_parent.json",
     "realm" => "unified_data/uds_realm.json",
    "section" => "unified_data/uds_section.json",
    "session" => "unified_data/uds_session.json",
    "student" => "unified_data/uds_student.json",
    "studentAssessmentAssociation" => "unified_data/uds_studentAssessmentAssociation.json",
    "studentParentAssociation" => "unified_data/uds_studentParentAssociation.json",
    "studentSchoolAssociation" => "unified_data/uds_studentSchoolAssociation.json",
    "studentSectionAssociation" => "unified_data/uds_studentSectionAssociation.json",
    "studentSectionGradebookEntry" => "unified_data/uds_studentSectionGradebookEntry.json",
    "studentTranscriptAssociation" => "unified_data/uds_studentTranscriptAssociation.json",
    "staff" => "unified_data/uds_staff.json",
    "teacherSchoolAssociation" => "unified_data/uds_teacherSchoolAssociation.json",
    "teacherSectionAssociation" => "unified_data/uds_teacherSectionAssociation.json"
  ]
  setMultipleFixtureFiles(testHash)
end

desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

By default, any Scenario Outlines will be expanded in the console output for ease of development,
but at the command line, the env var "NO_EXPAND" may be defined to run without expanding the Scenario
Outline to allow for proper JUnit XML output files for display in Jenkins

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST                This property selects which mongo instance to set the fixture to (default: localhost)
DB_NAME                This property selects which mongo db to set the fixture to (default: sli)
api_server_url         This property selects which running instance of the API to run tests against (default: localhost)
admintools_server_url  This property selects which running instance of the Admin Tools to run tests against (default: localhost)
sli_idp_server_url     This property selects which running IDP should be used as the SLI IDP (default https://devapp1.slidev.org/sp)
sea_idp_server_url     This property selects which running IDP should be used as a mock State IDP (default http://devopenam1.slidev.com:8080/idp1)
lea_idp_server_url     This property selects which running IDP should be used as a mock District IDP (default http://devopenam1.slidev.com:8080/idp2)
DEBUG                  This property tells the test code to display debug output in the console
CUKE_EXPAND            This property tells cucumber to expand Scenario Outlines (for use in jenkins, default: not expand)
OTHER_TAGS             This property allows you to run tests with debug tags, so pass a tag for this env var ie: @test
eos

end

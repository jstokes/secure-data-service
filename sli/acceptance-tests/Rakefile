
###################################################
# Section to setup necessary env vars and overrides
if(ENV['DB_HOST'])
  DB_HOST=ENV['DB_HOST']
else
  DB_HOST = "localhost"
end

if(ENV['MONGO_HOME'])
  MONGO_BIN = ENV['MONGO_HOME']+"/bin/"
else
  MONGO_BIN = ""
end
#######################################################

$SUCCESS=true
$failures = Hash.new

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} --tags ~@wip -f junit --out . -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end

def setFixture(collectionName, fixtureFileName, fixtureFilePath="test/data")
  sh "#{MONGO_BIN}mongoimport --drop -d sli -c #{collectionName} -h #{DB_HOST} --file #{fixtureFilePath}/#{fixtureFileName}" do |success, exit_code|
    #allow for user to pass block to run the test for each running of setFixture
    if(success && block_given?)
      yield
    else
      puts "Exited with code: #{exit_code.exitstatus}, please confirm that mongo binaries are on your PATH" unless success
    end
  end
end

def setMultipleFixtureFiles(myHash)
  myHash.each do |key, value|
    setFixture(key,value)
  end
end

def displayFailureReport()
  $failures.each do |key, value|
    puts "#{key} tests #{value}"
  end
end

############################################################################################################


######################################################################################################
# Rake tasks

task :default => :production


desc "Default Task: Run All Acceptances Tests"
task :production => [:apiTests, :securityTests] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end


############################################################
# Ingestion tests start
############################################################
desc "Run Ingestion Acceptances Tests"
task :ingestionTests => [:sampleIngestionTests] do
  displayFailureReport()
end

desc "Run Sample Ingestion Tests"
task :sampleIngestionTests do
  runTests("test/features/ingestion/sample_test")
end

############################################################
# Ingestion tests end
############################################################

############################################################
# API tests start
############################################################
desc "Run API Acceptances Tests"
task :apiTests => [:schoolTests, :studentTests, :teacherTests, :sectionTests, :assessmentTests, :homeUriTests, :associationTests, :validationTests] do
  displayFailureReport()
end

desc "Run Section Tests"
task :sectionTests do
  runFixtureAndTests("test/features/api/entities/section", "section", "section_fixture.json")
end

desc "Run School Tests"
task :schoolTests do
  runFixtureAndTests("test/features/api/entities/school", "school", "school_fixture.json")
end

desc "Run Student Tests"
task :studentTests do
  runFixtureAndTests("test/features/api/entities/student", "student", "student_fixture.json")
end

desc "Run Teacher Tests"
task :teacherTests do
  runFixtureAndTests("test/features/api/entities/teacher", "teacher", "teacher_fixture.json")
end

desc "Run Assessment Tests"
task :assessmentTests do
  runFixtureAndTests("test/features/api/entities/assessment","assessment","assessment_fixture.json")
end

desc "Run Validation Tests"
task :validationTests do
  runTests("test/features/api/validation")
end

# dependecy on importSandboxData so that association tests can depend on the associated
# entiy data to be available
desc "Run Association Tests"
task :associationTests => [:importSandboxData] do
  runTests("test/features/api/associations/student_section_association")
  runTests("test/features/api/associations/student_assessment_association")
  runTests("test/features/api/associations/student_school_association")
  runTests("test/features/api/associations/teacher_school_association")
  runTests("test/features/api/associations/teacher_section_association")
end

desc "Run Home URI Tests"
task :homeUriTests do
  runTests("test/features/api/home_uri")
end
############################################################
# API tests end
############################################################

############################################################
# API Selenium tests start
# NOTE: Do not add these tests to the production run yet!
#       While they can be run locally without issues,
#       Firefox cannot start on Jenkins, and will cause
#       all these tests to fail
############################################################
desc "Run API Selenium Tests"
task :apiSeleniumTests do
  runTests("test/features/apiSelenium")  
end
############################################################
# API Selenium tests end
############################################################

############################################################
# Security tests start
############################################################
desc "Run Security Tests"
task :securityTests do
  securityHash = Hash[
    "student" => "student_fixture.json"
    ]
  setMultipleFixtureFiles(securityHash)
  runTests("test/features/security")  
end
############################################################
# Security tests end
############################################################

############################################################
# Dashboard tests start
############################################################
desc "Run Dashboard Tests"
task :dashboardTests => [:dashboardPopWidgetTests] do
  # securityHash = Hash[
    # "school" => "school_fixture.json",
    # "student" => "student_fixture.json"
    # ]
  # setMultipleFixtureFiles(securityHash)
  # runTests("test/features/dashboard")  
  puts "Completed Dashboard tests"
end

desc "Run Dashboard population widget Tests"
task :dashboardPopWidgetTests do
  runTests("test/features/dashboard/population_widget.feature")  
end

desc "Run Dashboard YY Tests"
task :dashboardTests do
  runTests("test/features/dashboard") 
   
end
############################################################
# Dashboard tests end
############################################################

desc "Import Sandbox Test Data"
task :importSandboxData do
  testHash = Hash[
    "section" => "section_fixture.json",
    "school" => "school_fixture.json",
    "student" => "student_fixture.json",
    "teacher" => "teacher_fixture.json",
    "assessment" => "assessment_fixture.json",
    "studentschoolassociation" => "student_enrollments_fixture.json",
    "teachersectionassociation" => "teacher_section_fixture.json",
    "studentassessmentassociation"=> "studentassessmentassociation_fixture.json",
    "studentsectionassociation" => "student_section_association_fixture.json",
    "teacherschoolassociation" => "teacher_school_fixture.json"
  ]
  setMultipleFixtureFiles(testHash)
end



desc "Help information for this Rakefile"
task :help do
  puts <<-eos
This Rakefile assumes one of two things: an environment variable MONGO_HOME
is set to the home directory of mongo (just before bin) or that the mongo binaries
are on your PATH.

By default, the tests run against the deployed API/application that is running on
localhost:8080 and also assumes a mongo server running on localhost (at default port).

To change this behavior use the following syntax to override:

cmd>rake property=value <rake Task>

Example:

cmd>rake DB_HOST=myNewDbHost.domain.name api_server_url=my.API.server.com production

The properties available to override are as follows:

DB_HOST           This property selects which mongo instance to set the fixture to (default: localhost)
api_server_url    This property selects which running instance of the API to run tests against (default: localhost)
DEBUG             This property tells the test code to display debug output in the console
eos

end

commit 9c1908b5f47311e3a04f1cd490b49df112683847
Author: Matthew Lane <lanemt@gmail.com>
Date:   Wed Feb 22 16:49:10 2012 -0500

    stashing root-entities project

diff --git a/sli/api/src/main/java/org/slc/sli/api/resources/Resource.java b/sli/api/src/main/java/org/slc/sli/api/resources/Resource.java
index abb3242..15986a0 100644
--- a/sli/api/src/main/java/org/slc/sli/api/resources/Resource.java
+++ b/sli/api/src/main/java/org/slc/sli/api/resources/Resource.java
@@ -423,7 +423,28 @@ public class Resource {
             }
         });
     }
-    
+
+    @GET
+    @Path("/")
+    @Produces({ Resource.JSON_MEDIA_TYPE, Resource.XML_MEDIA_TYPE })
+    public Response getRoot(@PathParam("type") final String typePath,
+                            @QueryParam("start-index") @DefaultValue("0") final int skip,
+                            @QueryParam("max-results") @DefaultValue("50") final int max,
+                            @Context final UriInfo uriInfo) {
+        return handle(typePath, new ResourceLogic() {
+            @Override
+            public Response run(EntityDefinition entityDef) {
+                if (entityDef instanceof EntityDefinition) {
+                    Iterable<EntityBody> entityBodies = entityDef.getService().getAll(skip, max);
+                    addLinksToEntities(entityBodies, entityDef, uriInfo);
+                    return Response.ok(entityBodies).build();
+                } else {
+                    return Response.status(Status.NOT_FOUND).build();
+                }
+            }
+        });
+    }
+
     /**
      * Update an existing entity or association.
      * 
diff --git a/sli/api/src/main/java/org/slc/sli/api/security/context/ContextResolverStore.java b/sli/api/src/main/java/org/slc/sli/api/security/context/ContextResolverStore.java
index 2fa9a0a..42c55a9 100644
--- a/sli/api/src/main/java/org/slc/sli/api/security/context/ContextResolverStore.java
+++ b/sli/api/src/main/java/org/slc/sli/api/security/context/ContextResolverStore.java
@@ -8,6 +8,7 @@ import org.slc.sli.domain.EntityRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
+import javax.annotation.PostConstruct;
 import javax.persistence.EntityExistsException;
 import java.security.InvalidParameterException;
 import java.util.ArrayList;
@@ -22,7 +23,7 @@ import java.util.Map;
  */
 @Component
 public class ContextResolverStore {
-    
+
     private Map<String, EntityContextResolver> contexts = new HashMap<String, EntityContextResolver>();
     
     @Autowired
@@ -33,10 +34,65 @@ public class ContextResolverStore {
     
     @Autowired
     private EntityRepository                   repository;
-    
+
+
+    private static final String SYSTEM_ENTITY = "system_entity";
+    private static final String TEACHER = "teacher";
+    private static final String STUDENT = "student";
+    private static final String TEACHER_SCHOOL_ASSOCIATIONS = "teacher-school-associations";
+    private static final String TEACHER_SECTION_ASSOCIATIONS = "teacher-section-associations";
+    private static final String STUDENT_SECTION_ASSOCIATIONS = "student-section-associations";
+    private static final String SCHOOL = "school";
+    private static final String SECTION = "section";
+    private static final String SECTION_ASSESSMENT_ASSOCIATIONS = "section-assessment-associations";
+    private static final String ASSESSMENT = "assessment";
+    private static final String STAFF = "staff";
+    private static final String EDUCATION_ORGANIZATION = "educationOrganization";
+    private static final String STAFF_EDUCATION_ORGANIZATION_ASSOCIATIONS = "staff-educationOrganization-associations";
+    private static final String EDUCATION_ORGANIZATION_SCHOOL_ASSOCIATIONS = "educationOrganization-school-associations";
+    private static final String SESSION = "session";
+    private static final String SCHOOL_SESSION_ASSOCIATIONS = "school-session-associations";
+    private static final String SLI_ADMINISTRATOR = "SLI Administrator";
+
+
+    /* Educator context */
+    private final List<EntityContextResolver> teacherResolvers = Arrays.<EntityContextResolver>asList(
+
+            makeAssoc().setSource(TEACHER).setTarget(TEACHER).setAssociationPath(TEACHER_SCHOOL_ASSOCIATIONS, TEACHER_SCHOOL_ASSOCIATIONS).build(),
+
+            makeAssoc().setSource(TEACHER).setTarget(STUDENT).setAssociationPath(TEACHER_SECTION_ASSOCIATIONS, STUDENT_SECTION_ASSOCIATIONS).build(),
+
+            makeAssoc().setSource(TEACHER).setTarget(SCHOOL).setAssociationPath(TEACHER_SCHOOL_ASSOCIATIONS).build(),
+
+            makeAssoc().setSource(TEACHER).setTarget(SECTION).setAssociationPath(TEACHER_SECTION_ASSOCIATIONS).build(),
+
+            makeAssoc().setSource(TEACHER).setTarget(ASSESSMENT).setAssociationPath(TEACHER_SECTION_ASSOCIATIONS, SECTION_ASSESSMENT_ASSOCIATIONS).build(),
+
+            makeAssoc().setSource(TEACHER).setTarget(EDUCATION_ORGANIZATION).setAssociationPath(TEACHER_SCHOOL_ASSOCIATIONS, EDUCATION_ORGANIZATION_SCHOOL_ASSOCIATIONS).build(),
+
+            makeAssoc().setSource(TEACHER).setTarget(SESSION).setAssociationPath(TEACHER_SCHOOL_ASSOCIATIONS, SCHOOL_SESSION_ASSOCIATIONS).build()
+
+    );
+
+    /* Leader and IT Admin context */
+    private final List<EntityContextResolver> staffResolvers = Arrays.<EntityContextResolver>asList(
+
+            makeAssoc().setSource(STAFF).setTarget(EDUCATION_ORGANIZATION).setAssociationPath(STAFF_EDUCATION_ORGANIZATION_ASSOCIATIONS).build()
+
+    );
+
+    /* aggregate context */
+    private final List<EntityContextResolver> aggregateResolvers = Arrays.<EntityContextResolver>asList(
+
+    );
+
+    /* SLI Admin context */
+    private final List<EntityContextResolver> sliAdminResolvers = Arrays.<EntityContextResolver>asList(
+
+    );
+
+
     /**
-     * TODO Might need to be out sourced to a declarative data-driven (JSON? YAML?) store
-     *
      * init() defines resolvers used to enforce context based permissions.
      * To make a new resolver, specify the source entity type, target entity,
      * and context path from the target to the source.
@@ -46,27 +102,17 @@ public class ContextResolverStore {
      * <p/>
      * The association path will be traversed from from source to target to see if the context path exists.
      */
-    public synchronized void init() {
-        
-        List<EntityContextResolver> teacherResolvers = Arrays.<EntityContextResolver>asList(
-                
-                makeAssoc().setSource("teacher").setTarget("teacher").setAssociationPath("teacher-school-associations", "teacher-school-associations").build(),
-                
-                makeAssoc().setSource("teacher").setTarget("student").setAssociationPath("teacher-section-associations", "student-section-associations").build(),
-                
-                makeAssoc().setSource("teacher").setTarget("school").setAssociationPath("teacher-school-associations").build(),
-                
-                makeAssoc().setSource("teacher").setTarget("section").setAssociationPath("teacher-section-associations").build(),
-                
-                makeAssoc().setSource("student").setTarget("section").setAssociationPath("student-section-associations").build(),
-                
-                makeAssoc().setSource("student").setTarget("assessment").setAssociationPath("student-assessment-associations").build(),
-                
-                makeAssoc().setSource("section").setTarget("assessment").setAssociationPath("section-assessment-associations").build(),
-                
-                makeAssoc().setSource("school").setTarget("session").setAssociationPath("school-session-associations")
-                        .build());
-        
+    @PostConstruct
+    @Autowired
+    public void init() {
+
+        loadResolvers(teacherResolvers);
+        loadResolvers(staffResolvers);
+        loadResolvers(aggregateResolvers);
+        loadResolvers(sliAdminResolvers);
+    }
+
+    private synchronized void loadResolvers(List<EntityContextResolver> teacherResolvers) {
         for (EntityContextResolver resolver : teacherResolvers) {
             EntityContextResolver putResult = contexts.put(this.getContextKey(resolver), resolver);
             if (putResult != null) {
@@ -74,13 +120,17 @@ public class ContextResolverStore {
             }
         }
     }
-    
+
     public synchronized EntityContextResolver getContextResolver(String sourceType, String targetType) {
-        
-        if (contexts.isEmpty()) {
-            init();
+
+        if(sourceType.equals(SYSTEM_ENTITY)) {
+            return new FullContextResolver(repository, definitionStore.lookupByResourceName(targetType));
         }
-        
+
+        if(sourceType.equals(SLI_ADMINISTRATOR)) {
+            return new TenantContextResolver(repository, definitionStore.lookupByEntityType(targetType));
+        }
+
         EntityContextResolver resolver = contexts.get(getContextKey(sourceType, targetType));
         return resolver == null ? defaultEntityContextResolver : resolver;
     }
@@ -104,6 +154,10 @@ public class ContextResolverStore {
     public AssociativeContextBuilder makeAssoc() {
         return new AssociativeContextBuilder();
     }
+
+    private FullContextBuilder makeFullContext() {
+        return new FullContextBuilder();
+    }
     
     public Map<String, EntityContextResolver> getContexts() {
         return contexts;
@@ -112,8 +166,6 @@ public class ContextResolverStore {
     /**
      * Builder pattern
      *
-     * @author mlane
-     *
      */
     public class AssociativeContextBuilder {
         private String                      source;
@@ -158,4 +210,36 @@ public class ContextResolverStore {
             return assocContext;
         }
     }
+    
+    public class FullContextBuilder {
+        private String source;
+        private String target;
+
+        private EntityDefinitionStore       entityDefs;
+        private EntityRepository            repo;
+
+        public FullContextBuilder() {
+            entityDefs = definitionStore;
+            repo = repository;
+        }
+
+        public FullContextBuilder setTarget(String target) {
+            this.target = target;
+            return this;
+        }
+
+        public FullContextResolver build() {
+            FullContextResolver fullContext = new FullContextResolver();
+            fullContext.setSource(source);
+            fullContext.setTarget(target);
+            fullContext.setRepository(repo);
+            fullContext.setDefinition(entityDefs.lookupByResourceName(target));
+            return fullContext;
+        }
+
+        public FullContextBuilder setSource(String source) {
+            this.source = source;
+            return this;
+        }
+    }
 }
diff --git a/sli/api/src/main/java/org/slc/sli/api/security/context/DefaultEntityContextResolver.java b/sli/api/src/main/java/org/slc/sli/api/security/context/DefaultEntityContextResolver.java
index f450a15..4028e0b 100644
--- a/sli/api/src/main/java/org/slc/sli/api/security/context/DefaultEntityContextResolver.java
+++ b/sli/api/src/main/java/org/slc/sli/api/security/context/DefaultEntityContextResolver.java
@@ -1,58 +1,31 @@
 package org.slc.sli.api.security.context;
 
-import java.util.AbstractList;
-import java.util.Collection;
-import java.util.List;
-
+import org.slc.sli.domain.Entity;
 import org.springframework.stereotype.Component;
 
-import org.slc.sli.domain.Entity;
+import java.util.ArrayList;
+import java.util.List;
+
 
 /**
  * Default context traversing implementation that allows access to everything
  */
 @Component
 public class DefaultEntityContextResolver implements EntityContextResolver {
-    /**
-     * List that always says 'YES' I have it
-     */
-    public static final List<String> SUPER_LIST = new AbstractList<String>() {
-        
-        @Override
-        public boolean contains(Object obj) {
-            return true;
-        }
-        
-        @Override
-        public boolean containsAll(Collection<?> c) {
-            return true;
-        }
-        
-        @Override
-        public String get(int index) {
-            return "";
-        }
-        
-        @Override
-        public int size() {
-            return -1;
-        }
-        
-    };
-    
+
     @Override
     public List<String> findAccessible(Entity principal) {
-        return SUPER_LIST;
+        return new ArrayList<String>();
     }
-    
+
     @Override
     public String getSourceType() {
         return null;
     }
-    
+
     @Override
     public String getTargetType() {
         return null;
     }
-    
+
 }
diff --git a/sli/api/src/main/java/org/slc/sli/api/security/context/FullContextResolver.java b/sli/api/src/main/java/org/slc/sli/api/security/context/FullContextResolver.java
new file mode 100644
index 0000000..ae2abbb
--- /dev/null
+++ b/sli/api/src/main/java/org/slc/sli/api/security/context/FullContextResolver.java
@@ -0,0 +1,67 @@
+package org.slc.sli.api.security.context;
+
+import org.slc.sli.api.config.EntityDefinition;
+import org.slc.sli.domain.Entity;
+import org.slc.sli.domain.EntityRepository;
+import org.springframework.stereotype.Component;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Gives context to all entities of target type.
+ */
+@Component
+public class FullContextResolver implements EntityContextResolver {
+
+    private String source;
+    private String target;
+    private EntityRepository repository;
+    private EntityDefinition definition;
+
+    public FullContextResolver(EntityRepository repository, EntityDefinition entityDefinition) {
+        this.repository = repository;
+        this.definition = entityDefinition;
+    }
+
+    public FullContextResolver() {
+
+    }
+
+    @Override
+    public String getSourceType() {
+        return source;
+    }
+
+    @Override
+    public String getTargetType() {
+        return target;
+    }
+
+    @Override
+    public List<String> findAccessible(Entity principal) {
+        Iterable<Entity> entities = this.repository.findAll(definition.getStoredCollectionName(), 0, 9999);
+        ArrayList<String> ids = new ArrayList<String>();
+        for (Entity e : entities) {
+            ids.add(e.getEntityId());
+        }
+        return ids;
+    }
+
+    public void setSource(String sourceType) {
+        this.source = sourceType;
+    }
+
+    public void setTarget(String targetType) {
+        this.target = targetType;
+    }
+
+    public void setRepository(EntityRepository repo) {
+        this.repository = repo;
+    }
+
+    public void setDefinition(EntityDefinition definition) {
+        this.definition = definition;
+    }
+
+}
diff --git a/sli/api/src/main/java/org/slc/sli/api/security/context/TenantContextResolver.java b/sli/api/src/main/java/org/slc/sli/api/security/context/TenantContextResolver.java
new file mode 100644
index 0000000..d436244
--- /dev/null
+++ b/sli/api/src/main/java/org/slc/sli/api/security/context/TenantContextResolver.java
@@ -0,0 +1,49 @@
+package org.slc.sli.api.security.context;
+
+import org.slc.sli.api.config.EntityDefinition;
+import org.slc.sli.api.config.EntityDefinitionStore;
+import org.slc.sli.domain.Entity;
+import org.slc.sli.domain.EntityRepository;
+import org.springframework.data.mongodb.core.query.Criteria;
+import org.springframework.data.mongodb.repository.Query;
+
+import java.util.List;
+
+/**
+ * Created by IntelliJ IDEA.
+ * User: mlane
+ * Date: 2/21/12
+ * Time: 4:12 PM
+ * To change this template use File | Settings | File Templates.
+ */
+public class TenantContextResolver implements EntityContextResolver  {
+
+    EntityRepository repository;
+    EntityDefinition entityDefinition;
+
+    public TenantContextResolver(EntityRepository repository, EntityDefinition entityDefinition) {
+        this.repository = repository;
+        this.entityDefinition = entityDefinition;
+    }
+
+    @Override
+    public String getSourceType() {
+        return null;
+    }
+
+    @Override
+    public String getTargetType() {
+        return null;
+    }
+
+    @Override
+    public List<String> findAccessible(Entity principal) {
+        EntityDefinitionStore entityDefinitionStore;
+        Iterable<Entity> entities = repository.findByQuery(entityDefinition.getStoredCollectionName(),
+                new Query(Criteria.where("body.tenantId").in(getTenants(principal))), 0, 9999);
+    }
+
+    private List<String> getTenants(Entity principal) {
+        return null;
+    }
+}
diff --git a/sli/api/src/main/java/org/slc/sli/api/service/BasicService.java b/sli/api/src/main/java/org/slc/sli/api/service/BasicService.java
index db85f2f..f78c53e 100644
--- a/sli/api/src/main/java/org/slc/sli/api/service/BasicService.java
+++ b/sli/api/src/main/java/org/slc/sli/api/service/BasicService.java
@@ -186,7 +186,7 @@ public class BasicService implements EntityService {
     }
 
     @Override
-    public Iterable<EntityBody> getAll() {
+    public Iterable<EntityBody> getAll(int skip, int max) {
         checkRights(Right.READ_GENERAL);
 
         Set<Object> binIds = new HashSet<Object>();
@@ -196,7 +196,7 @@ public class BasicService implements EntityService {
 
         if (!binIds.isEmpty()) {
             Iterable<Entity> entities = repo.findByQuery(collectionName,
-                    new Query(Criteria.where("_id").in(binIds)), 0, MAX_RESULT_SIZE);
+                    new Query(Criteria.where("_id").in(binIds)), skip, max);
 
             List<EntityBody> results = new ArrayList<EntityBody>();
             for (Entity e : entities) {
diff --git a/sli/api/src/main/java/org/slc/sli/api/service/EntityService.java b/sli/api/src/main/java/org/slc/sli/api/service/EntityService.java
index 4ab2344..c2152bf 100644
--- a/sli/api/src/main/java/org/slc/sli/api/service/EntityService.java
+++ b/sli/api/src/main/java/org/slc/sli/api/service/EntityService.java
@@ -75,8 +75,10 @@ public interface EntityService {
      * Get all accessible entities from the data store
      *
      * @return secured collection of entities
+     * @param skip
+     * @param max
      */
-    public Iterable<EntityBody> getAll();
+    public Iterable<EntityBody> getAll(int skip, int max);
 
     /**
      * Get multiple entities from the data store

commit aed27b7cc7c522500770d3a823ee80ecdf4f71b7
Merge: 1eba65f 76737b9
Author: Matthew Lane <lanemt@gmail.com>
Date:   Tue Feb 21 14:07:53 2012 -0500

    Merge branch 'master' of git.slidev.org:sli/sli into root-entities

commit 1eba65f069268e3fb52282fb2665562b74a14224
Merge: b89b077 d90b945
Author: Matthew Lane <lanemt@gmail.com>
Date:   Tue Feb 21 14:07:32 2012 -0500

    merged commits

commit 76737b9de2fb07841358f87064b4fb39525e9caa
Merge: 85f0d2c c016774
Author: Ryan Latta <rlatta@wgen.net>
Date:   Tue Feb 21 13:57:20 2012 -0500

    Merge branch 'master' of git.slidev.org:sli/sli

commit 85f0d2cab1a4765be45196f2f4ab82c2e82b1d9b
Author: Ryan Latta <rlatta@wgen.net>
Date:   Tue Feb 21 13:57:12 2012 -0500

    Unit test fix.

diff --git a/sli/databrowser/test/functional/students_controller_test.rb b/sli/databrowser/test/functional/students_controller_test.rb
index d1d1a82..d3804ef 100644
--- a/sli/databrowser/test/functional/students_controller_test.rb
+++ b/sli/databrowser/test/functional/students_controller_test.rb
@@ -11,7 +11,7 @@ class StudentsControllerTest < ActionController::TestCase
     #SessionResource.auth_id = token
     #mock_rest_client = Test::Unit::MockObject(RestClient).new
     #print("The client is #{mock_rest_client.class}\n")
-
+    cookies['iPlanetDirectoryPro'] = 'test_auth'
     SessionResource.auth_id = "test_auth"
     @api_url = "https://devapp1.slidev.org/api/rest"
     @accepts = {"Accept" => "application/json"}
@@ -21,10 +21,10 @@ class StudentsControllerTest < ActionController::TestCase
     get_students_link = "#{@api_url}/schools/test-school-1/getStudents"
 
 
-    RestClient.expects(:get).with("#{@api_url}/home?sessionId=test_auth", @accepts).returns('{"links" : [{"rel" : "getFoo"}, {"rel" : "getSchools", "href" : "' + schools_link + '"}]}')
-    RestClient.expects(:get).with(schools_link + "?sessionId=#{SessionResource.auth_id}", @accepts).returns('[{"link" : {"href" : "' +first_school_link + '"}}]')
-    RestClient.expects(:get).with(first_school_link + "?sessionId=#{SessionResource.auth_id}", @accepts).returns('{"links" : [{"rel" : "getStudents", "href": "' + get_students_link + '"}]}')
-    RestClient.expects(:get).with(get_students_link + "?sessionId=#{SessionResource.auth_id}", @accepts).returns('[{"id" : "first-student", "link" : {"href":"http://example.com"}}]')
+    RestClient.expects(:get).with("#{@api_url}/home?sessionId=", @accepts).returns('{"links" : [{"rel" : "getFoo"}, {"rel" : "getSchools", "href" : "' + schools_link + '"}]}')
+    RestClient.expects(:get).with(schools_link + "?sessionId=", @accepts).returns('[{"link" : {"href" : "' +first_school_link + '"}}]')
+    RestClient.expects(:get).with(first_school_link + "?sessionId=", @accepts).returns('{"links" : [{"rel" : "getStudents", "href": "' + get_students_link + '"}]}')
+    RestClient.expects(:get).with(get_students_link + "?sessionId=", @accepts).returns('[{"id" : "first-student", "link" : {"href":"http://example.com"}}]')
 
   end
 

commit c016774cc8358f3b4bee1004167a06abcc1cbc54
Merge: 8ed96b0 8643810
Author: Dong Liu <dliu@wgen.net>
Date:   Tue Feb 21 13:49:44 2012 -0500

    Merge branch 'master' of git.slidev.org:sli/sli

commit 8ed96b05f16d8e309a02cebb72e01405bd2bf133
Author: Dong Liu <dliu@wgen.net>
Date:   Tue Feb 21 13:49:31 2012 -0500

    add more fixture data for end user story assessment acceptance test

diff --git a/sli/acceptance-tests/test/data/assessment_fixture.json b/sli/acceptance-tests/test/data/assessment_fixture.json
index 3bff51d..8b9e026 100644
--- a/sli/acceptance-tests/test/data/assessment_fixture.json
+++ b/sli/acceptance-tests/test/data/assessment_fixture.json
@@ -11,4 +11,5 @@
 {"_id":{"$binary":"EUqZmUsgzmeDRgAAAADqvw==","$type":"03"},"type":"assessment","body":{"assessmentTitle":"Mathematics Achievement Assessment Test","assessmentIdentificationCode":[{"identificationSystem":"School","ID":"7"}],"academicSubject":"Mathematics","assessmentCategory":"Advanced Placement","gradeLevelAssessed":"Eighth grade","contentStandard":"LEA Standard","version":2},"tenantId":"Zork"}
 {"_id":{"$binary":"EUqZmUsgzmeCRgAAAADqvw==","$type":"03"},"type":"assessment","body":{"assessmentTitle":"Mathematics Achievement Assessment Test","assessmentIdentificationCode":[{"identificationSystem":"School","ID":"6"}],"academicSubject":"Mathematics","assessmentCategory":"Advanced Placement","gradeLevelAssessed":"Eighth grade","contentStandard":"LEA Standard","version":2},"tenantId":"Zork"}
 {"_id":{"$binary":"J07+fZJlkd23V7f0xb6sqA==","$type":"03"},"type":"assessment","body":{"assessmentTitle":"DIBELS-MOY","assessmentFamilyHierarchyName":"DIBELS Next","assessmentIdentificationCode":[{"identificationSystem":"School","ID":"01234B"}],"academicSubject":"Reading","assessmentCategory":"Benchmark test","gradeLevelAssessed":"Second grade", "lowestGradeLevelAssessed":"Second grade","assessmentPerformanceLevel":[{"performanceLevelDescriptor":{"codeValue":"Level 1","description":"At or Above Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":190,"maximumScore":380},{"performanceLevelDescriptor":{"codeValue":"Level 2","description":"Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":145,"maximumScore":189},{"performanceLevelDescriptor":{"codeValue":"Level 3","description":"Well Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":13,"maximumScore":144}],"assessmentPeriodDescriptor":{"codeValue":"assessment","description":"assessment","beginDate":"2012-01-01","endDate":"2012-02-01"},"maxRawScore":380,"minRawScore":13,"contentStandard":"LEA Standard","version":2},"tenantId":"Zork"}
-{"_id":{"$binary":"J08+fZJlkd32V7f0xb6sqA==","$type":"03"},"type":"assessment","body":{"assessmentTitle":"DIBELS-MOY","assessmentFamilyHierarchyName":"DIBELS Next","assessmentIdentificationCode":[{"identificationSystem":"School","ID":"01234B"}],"academicSubject":"Reading","assessmentCategory":"Benchmark test","gradeLevelAssessed":"Second grade", "lowestGradeLevelAssessed":"Second grade","assessmentPerformanceLevel":[{"performanceLevelDescriptor":{"codeValue":"Level 1","description":"At or Above Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":190,"maximumScore":380},{"performanceLevelDescriptor":{"codeValue":"Level 2","description":"Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":145,"maximumScore":189},{"performanceLevelDescriptor":{"codeValue":"Level 3","description":"Well Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":13,"maximumScore":144}],"assessmentPeriodDescriptor":{"codeValue":"assessment","description":"assessment","beginDate":"2011-01-01","endDate":"2011-02-01"},"maxRawScore":380,"minRawScore":13,"contentStandard":"LEA Standard","version":2},"tenantId":"Zork"}
\ No newline at end of file
+{"_id":{"$binary":"J08+fZJlkd32V7f0xb6sqA==","$type":"03"},"type":"assessment","body":{"assessmentTitle":"DIBELS-MOY","assessmentFamilyHierarchyName":"DIBELS Next","assessmentIdentificationCode":[{"identificationSystem":"School","ID":"01234B"}],"academicSubject":"Reading","assessmentCategory":"Benchmark test","gradeLevelAssessed":"Second grade", "lowestGradeLevelAssessed":"Second grade","assessmentPerformanceLevel":[{"performanceLevelDescriptor":{"codeValue":"Level 1","description":"At or Above Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":190,"maximumScore":380},{"performanceLevelDescriptor":{"codeValue":"Level 2","description":"Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":145,"maximumScore":189},{"performanceLevelDescriptor":{"codeValue":"Level 3","description":"Well Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":13,"maximumScore":144}],"assessmentPeriodDescriptor":{"codeValue":"assessment","description":"assessment","beginDate":"2011-01-01","endDate":"2011-02-01"},"maxRawScore":380,"minRawScore":13,"contentStandard":"LEA Standard","version":2},"tenantId":"Zork"}
+{"_id":{"$binary":"J11+fZJlkd32V7f8xb6sqA==","$type":"03"},"type":"assessment","body":{"assessmentTitle":"Writing Achievement Assessment Test","assessmentFamilyHierarchyName":"Writing test","assessmentIdentificationCode":[{"identificationSystem":"School","ID":"01234B"}],"academicSubject":"Reading","assessmentCategory":"Benchmark test","gradeLevelAssessed":"Second grade", "lowestGradeLevelAssessed":"Second grade","assessmentPerformanceLevel":[{"performanceLevelDescriptor":{"codeValue":"Level 1","description":"At or Above Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":190,"maximumScore":380},{"performanceLevelDescriptor":{"codeValue":"Level 2","description":"Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":145,"maximumScore":189},{"performanceLevelDescriptor":{"codeValue":"Level 3","description":"Well Below Benchmark"},"assessmentReportingMethod":"Composite Score","minimumScore":13,"maximumScore":144}],"assessmentPeriodDescriptor":{"codeValue":"assessment","description":"assessment","beginDate":"2011-01-01","endDate":"2011-02-01"},"maxRawScore":380,"minRawScore":13,"contentStandard":"LEA Standard","version":2},"tenantId":"Zork"}
\ No newline at end of file
diff --git a/sli/acceptance-tests/test/data/studentAssessmentAssociation_fixture.json b/sli/acceptance-tests/test/data/studentAssessmentAssociation_fixture.json
index 421580f..f8bd090 100644
--- a/sli/acceptance-tests/test/data/studentAssessmentAssociation_fixture.json
+++ b/sli/acceptance-tests/test/data/studentAssessmentAssociation_fixture.json
@@ -166,3 +166,13 @@
 {"_id":{"$binary":"eE6X/erXc+TPFJbo6CiXmQ==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"a63ee073-cd6c-9a12-a124-fa6a1b4dfc7c","assessmentId":"dd916592-7dfe-4e27-a8ac-bec5f4b757b7","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
 {"_id":{"$binary":"nkwaRqdaW+j3ee1hJND7jw==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"51dbb0cd-4f25-2d58-b587-5fac7605e4b3","assessmentId":"dd916592-7dfe-4e27-a8ac-bec5f4b757b7","administrationDate":"2012-01-10","administrationEndDate":"2012-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
 {"_id":{"$binary":"nkwaRqdaW+j4ee1hJND7jw==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"51dbb0cd-4f25-2d58-b587-5fac7605e4b3","assessmentId":"dd916592-7dfe-4e27-a8ac-bec5f4b757b7","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"fu9ah/veDR5aEXZWuzPDuA==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"2899a720-4196-6112-9874-edde0e2541db","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2012-01-10","administrationEndDate":"2012-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"fU9ha/veDR6aEXZWuzPDuA==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"2899a720-4196-6112-9874-edde0e2541db","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"NkVBII7s+4h5LASrBRHXqg==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"9e6d1d73-a488-4311-877a-718b897a17c5","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2012-01-10","administrationEndDate":"2012-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"NkVBI7is+2h3LASrBRHXqg==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"9e6d1d73-a488-4311-877a-718b897a17c5","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"10tpCTstZ8gKFcBbOdW1oQ==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"54c6548e-1196-86ca-ad5c-b8d72496bf78","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2012-01-10","administrationEndDate":"2012-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"10pTTCstZ8gKFcBbOdW1oQ==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"54c6548e-1196-86ca-ad5c-b8d72496bf78","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"eEx6/erXc+TPFJboC6iXmQ==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"a63ee073-cd6c-9a12-a124-fa6a1b4dfc7c","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2012-01-10","administrationEndDate":"2012-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"eE6X/erXc+TPFJbo6CiXmQ==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"a63ee073-cd6c-9a12-a124-fa6a1b4dfc7c","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"nkwaRqdaW+j3ee1hJND7jw==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"51dbb0cd-4f25-2d58-b587-5fac7605e4b3","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2012-01-10","administrationEndDate":"2012-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}
+{"_id":{"$binary":"nkwaRqdaW+j4ee1hJND7jw==","$type":"03"},"type":"studentAssessmentAssociation","body":{"studentId":"51dbb0cd-4f25-2d58-b587-5fac7605e4b3","assessmentId":"dd916592-7d7e-5d27-a8ac-bec5fcb757f6","administrationDate":"2011-01-10","administrationEndDate":"2011-01-15","retestIndicator":"1st Retest","gradeLevelWhenAssessed":"Second grade","scoreResults":[{"assessmentReportingMethod":"Scale score","result":"120"}],"performanceLevelDescriptors":[{"codeValue":"Level 2","description":"Below Benchmark"}]},"tenantId":"Zork"}

commit 864381044191c54a29f3b0c00d0b57b06b456868
Merge: 4050cb8 5c5d4af
Author: Jeffrey Stokes <jstokes@wgen.net>
Date:   Tue Feb 21 13:48:13 2012 -0500

    Merge branch 'master' of git.slidev.org:sli/sli

commit 4050cb81851ee3fe60d1bff824545ba28960df9c
Author: Jeffrey Stokes <jstokes@wgen.net>
Date:   Tue Feb 21 13:47:53 2012 -0500

    cleaning up clutter in paramater constants

diff --git a/sli/api/src/main/java/org/slc/sli/api/resources/v1/ParameterConstants.java b/sli/api/src/main/java/org/slc/sli/api/resources/v1/ParameterConstants.java
index 96ff9e9..96e3344 100644
--- a/sli/api/src/main/java/org/slc/sli/api/resources/v1/ParameterConstants.java
+++ b/sli/api/src/main/java/org/slc/sli/api/resources/v1/ParameterConstants.java
@@ -33,20 +33,22 @@ public class ParameterConstants {
      * Number of links to traverse when presenting a high-level document.
      */
     public static final String EXPAND_DEPTH = "expandDepth";
-
+    
     /**
-     * Entity reference to an ID in the school collection.
+     * Query parameter for fields to include.
      */
-    public static final String SCHOOL_ID = "schoolId";
-
+    public static final String INCLUDE_FIELDS = "includeFields";
+    
     /**
-     * Entity reference to an ID in the school collection.
+     * Query parameter for fields to exclude.
      */
-    public static final String TEACHER_SCHOOL_ASSOCIATION_ID = "teacherSchoolAssociationId";
+    public static final String EXCLUDE_FIELDS = "excludeFields";
     
     /**
-     * Entity reference to an ID in the student collection.
+     * Entity/Association IDs 
      */
+    public static final String SCHOOL_ID = "schoolId";
+    public static final String TEACHER_SCHOOL_ASSOCIATION_ID = "teacherSchoolAssociationId";
     public static final String STUDENT_ID = "studentId";
     public static final String ASSESSMENT_ID = "assessmentId";
     public static final String BELL_SCHEDULE_ID = "bellScheduleId";
@@ -59,15 +61,5 @@ public class ParameterConstants {
     public static final String TEACHER_ID = "teacherId";
     public static final String COURSE_ID = "courseId";
     public static final String TEACHER_SCHOOL_ASSOC_ID = "teacherSchoolAssociationId";
-    
-    /**
-     * Query parameter for fields to include.
-     */
-    public static final String INCLUDE_FIELDS = "includeFields";
-    
-    /**
-     * Query parameter for fields to exclude.
-     */
-    public static final String EXCLUDE_FIELDS = "excludeFields";
 
 }

commit 5c5d4af42ec3782d056d9180ca76cfcfca3fe18b
Merge: 6518205 1ec5003
Author: James Short <jshort@wgen.net>
Date:   Tue Feb 21 13:46:58 2012 -0500

    Merge branch 'master' of git.slidev.org:sli/sli

commit 651820506854256bdfa1f06ec8913dae3feafc5b
Author: James Short <jshort@wgen.net>
Date:   Tue Feb 21 13:46:50 2012 -0500

    Making local the default props for ingestion tests and force Jenkins to override

diff --git a/sli/acceptance-tests/test/features/utils/properties.yml b/sli/acceptance-tests/test/features/utils/properties.yml
index 626fcc7..a9e5f87 100644
--- a/sli/acceptance-tests/test/features/utils/properties.yml
+++ b/sli/acceptance-tests/test/features/utils/properties.yml
@@ -17,9 +17,9 @@ sea_idp_server_url: "http://devdanil.slidev.org:8080/idp"
 lea_idp_server_url: "http://devdanil.slidev.org:8080/idp"
 
 ingestion_landing_zone: "/home/ingestion/lz/inbound/"
-ingestion_db: "testdal1.slidev.org"
+ingestion_db: "localhost"
 ingestion_database_name: "sli"
 ingestion_server_url: "testing1.slidev.org"
-ingestion_mode: "remote"
+ingestion_mode: "local"
 
 DB_HOST: "localhost"

commit 1ec50033edcfc33f608544a392f3efedc4f7010a
Merge: d255a6b 63bb52b
Author: Suneth Rupasinghe <srupasinghe@wgen.net>
Date:   Tue Feb 21 13:44:29 2012 -0500

    Merge branch 'master' into docnew

commit d255a6bb8ad0a3676f7970f1b1682e1b39bd1d9a
Author: Suneth Rupasinghe <srupasinghe@wgen.net>
Date:   Tue Feb 21 13:43:35 2012 -0500

    adding teacherschoolassociation resource and moving the packages around a bit

diff --git a/sli/api/src/main/java/org/slc/sli/api/resources/v1/AssessmentResource.java b/sli/api/src/main/java/org/slc/sli/api/resources/v1/AssessmentResource.java
deleted file mode 100644
index 3899eb5..0000000
--- a/sli/api/src/main/java/org/slc/sli/api/resources/v1/AssessmentResource.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package org.slc.sli.api.resources.v1;
-
-import javax.ws.rs.Consumes;
-import javax.ws.rs.DELETE;
-import javax.ws.rs.DefaultValue;
-import javax.ws.rs.GET;
-import javax.ws.rs.POST;
-import javax.ws.rs.PUT;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.QueryParam;
-import javax.ws.rs.core.Context;
-import javax.ws.rs.core.HttpHeaders;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-import javax.ws.rs.core.UriInfo;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Component;
-
-import org.slc.sli.api.config.ResourceNames;
-import org.slc.sli.api.config.EntityDefinitionStore;
-import org.slc.sli.api.representation.EntityBody;
-
-/**
- * Prototype new api end points and versioning
- * 
- * @author jstokes
- * 
- */
-@Path(PathConstants.V1 + "/" + PathConstants.ASSESSMENTS)
-@Component
-@Scope("request")
-@Produces({ MediaType.APPLICATION_JSON, HypermediaType.VENDOR_SLC_JSON })
-public class AssessmentResource {
-    
-    /**
-     * Logging utility.
-     */
-    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentResource.class);
-    
-    /*
-     * Interface capable of performing CRUD operations.
-     */
-    private final CrudEndpoint crudDelegate;
-
-    @Autowired
-    public AssessmentResource(EntityDefinitionStore entityDefs) {
-        this.crudDelegate = new DefaultCrudEndpoint(entityDefs, LOGGER);
-    }
-
-    /**
-     * Returns all $$assessments$$ entities for which the logged in User has permission and context.
-     * 
-     * @param offset
-     *            starting position in results to return to user
-     * @param limit
-     *            maximum number of results to return to user (starting from offset)
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return result of CRUD operation
-     */
-    @Produces({ MediaType.APPLICATION_JSON, HypermediaType.VENDOR_SLC_JSON })
-    @GET
-    public Response readAll(@QueryParam(ParameterConstants.OFFSET) @DefaultValue(ParameterConstants.DEFAULT_OFFSET) final int offset,
-            @QueryParam(ParameterConstants.LIMIT) @DefaultValue(ParameterConstants.DEFAULT_LIMIT) final int limit, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.readAll(ResourceNames.ASSESSMENTS, offset, limit, headers, uriInfo);
-    }
-
-    /**
-     * Create a new $$assessments$$ entity.
-     * 
-     * @param newEntityBody
-     *            entity data
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *              URI information including path and query parameters
-     * @return result of CRUD operation
-     * @response.param {@name Location} {@style header} {@type
-     *                 {http://www.w3.org/2001/XMLSchema}anyURI} {@doc The URI where the created
-     *                 item is accessable.}
-     */
-    @POST
-    @Consumes({ MediaType.APPLICATION_JSON })
-    public Response create(final EntityBody newEntityBody, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.create(ResourceNames.ASSESSMENTS, newEntityBody, headers, uriInfo);
-    }
-
-    /**
-     * Get a single $$assessments$$ entity
-     * 
-     * @param assessmentId
-     *            The Id of the $$assessments$$.
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return A single assessment entity
-     */
-    @GET
-    @Path("{" + ParameterConstants.ASSESSMENT_ID + "}")
-    @Produces({ MediaType.APPLICATION_JSON, HypermediaType.VENDOR_SLC_JSON })
-    public Response read(@PathParam(ParameterConstants.ASSESSMENT_ID) final String assessmentId,
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.read(ResourceNames.ASSESSMENTS, assessmentId, headers, uriInfo);
-    }
-
-    /**
-     * Delete a $$assessments$$ entity
-     * 
-     * @param assessmentId
-     *            The Id of the $$assessments$$.
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return Returns a NOT_CONTENT status code
-     * @response.representation.204.mediaType HTTP headers with a Not-Content status code.
-     */
-    @DELETE
-    @Path("{" + ParameterConstants.ASSESSMENT_ID + "}")
-    public Response delete(@PathParam(ParameterConstants.ASSESSMENT_ID) final String assessmentId, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.delete(ResourceNames.ASSESSMENTS, assessmentId, headers, uriInfo);
-    }
-
-    /**
-     * Update an existing $$assessments$$ entity.
-     * 
-     * @param assessmentId
-     *            The id of the $$assessments$$.
-     * @param newEntityBody
-     *            entity data
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return Response with a NOT_CONTENT status code
-     * @response.representation.204.mediaType HTTP headers with a Not-Content status code.
-     */
-    @PUT
-    @Path("{" + ParameterConstants.ASSESSMENT_ID + "}")
-    public Response update(@PathParam(ParameterConstants.ASSESSMENT_ID) final String assessmentId,
-            final EntityBody newEntityBody, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.update(ResourceNames.ASSESSMENTS, assessmentId, newEntityBody, headers, uriInfo);
-    }
-}
diff --git a/sli/api/src/main/java/org/slc/sli/api/resources/v1/BellScheduleResource.java b/sli/api/src/main/java/org/slc/sli/api/resources/v1/BellScheduleResource.java
deleted file mode 100644
index f560f7c..0000000
--- a/sli/api/src/main/java/org/slc/sli/api/resources/v1/BellScheduleResource.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package org.slc.sli.api.resources.v1;
-
-import javax.ws.rs.Consumes;
-import javax.ws.rs.DELETE;
-import javax.ws.rs.DefaultValue;
-import javax.ws.rs.GET;
-import javax.ws.rs.POST;
-import javax.ws.rs.PUT;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.QueryParam;
-import javax.ws.rs.core.Context;
-import javax.ws.rs.core.HttpHeaders;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-import javax.ws.rs.core.UriInfo;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Component;
-
-import org.slc.sli.api.config.ResourceNames;
-import org.slc.sli.api.config.EntityDefinitionStore;
-import org.slc.sli.api.representation.EntityBody;
-
-/**
- * Prototype new api end points and versioning
- * 
- * @author jstokes
- * 
- */
-@Path(PathConstants.V1 + "/" + PathConstants.BELL_SCHEDULES)
-@Component
-@Scope("request")
-@Produces({ MediaType.APPLICATION_JSON, HypermediaType.VENDOR_SLC_JSON })
-public class BellScheduleResource {
-    
-    /**
-     * Logging utility.
-     */
-    private static final Logger LOGGER = LoggerFactory.getLogger(BellScheduleResource.class);
-    
-    /*
-     * Interface capable of performing CRUD operations.
-     */
-    private final CrudEndpoint crudDelegate;
-
-    @Autowired
-    public BellScheduleResource(EntityDefinitionStore entityDefs) {
-        this.crudDelegate = new DefaultCrudEndpoint(entityDefs, LOGGER);
-    }
-
-    /**
-     * Returns all $$bellSchedules$$ entities for which the logged in User has permission and context.
-     * 
-     * @param offset
-     *            starting position in results to return to user
-     * @param limit
-     *            maximum number of results to return to user (starting from offset)
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return result of CRUD operation
-     */
-    @Produces({ MediaType.APPLICATION_JSON, HypermediaType.VENDOR_SLC_JSON })
-    @GET
-    public Response readAll(@QueryParam(ParameterConstants.OFFSET) @DefaultValue(ParameterConstants.DEFAULT_OFFSET) final int offset,
-            @QueryParam(ParameterConstants.LIMIT) @DefaultValue(ParameterConstants.DEFAULT_LIMIT) final int limit, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.readAll(ResourceNames.BELL_SCHEDULES, offset, limit, headers, uriInfo);
-    }
-
-    /**
-     * Create a new $$bellSchedules$$ entity.
-     * 
-     * @param newEntityBody
-     *            entity data
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *              URI information including path and query parameters
-     * @return result of CRUD operation
-     * @response.param {@name Location} {@style header} {@type
-     *                 {http://www.w3.org/2001/XMLSchema}anyURI} {@doc The URI where the created
-     *                 item is accessable.}
-     */
-    @POST
-    @Consumes({ MediaType.APPLICATION_JSON })
-    public Response create(final EntityBody newEntityBody, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.create(ResourceNames.BELL_SCHEDULES, newEntityBody, headers, uriInfo);
-    }
-
-    /**
-     * Get a single $$bellSchedules$$ entity
-     * 
-     * @param bellScheduleId
-     *            The Id of the $$bellSchedules$$.
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return A single bellSchedule entity
-     */
-    @GET
-    @Path("{" + ParameterConstants.BELL_SCHEDULE_ID + "}")
-    @Produces({ MediaType.APPLICATION_JSON, HypermediaType.VENDOR_SLC_JSON })
-    public Response read(@PathParam(ParameterConstants.BELL_SCHEDULE_ID) final String bellScheduleId,
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.read(ResourceNames.BELL_SCHEDULES, bellScheduleId, headers, uriInfo);
-    }
-
-    /**
-     * Delete a $$bellSchedules$$ entity
-     * 
-     * @param bellScheduleId
-     *            The Id of the $$bellSchedules$$.
-     * @param headers
-     *            HTTP Request Headers
-     * @param uriInfo
-     *            URI information including path and query parameters
-     * @return Returns a NOT_CONTENT status code
-     * @response.representation.204.mediaType HTTP headers with a Not-Content status code.
-     */
-    @DELETE
-    @Path("{" + ParameterConstants.BELL_SCHEDULE_ID + "}")
-    public Response delete(@PathParam(ParameterConstants.BELL_SCHEDULE_ID) final String bellScheduleId, 
-            @Context HttpHeaders headers, @Context final UriInfo uriInfo) {
-        return this.crudDelegate.delete(ResourceNames.BELL_SCHEDULES, bellScheduleId, headers, uriInfo);
-    }
-

package org.slc.sli.test.exportTool;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class GenerateStudentAssessment {
    private String begin = new StringBuilder()
        .append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
        .append("<!--Sample XML file generated by XMLSpy v2012 sp1 (http://www.altova.com)-->\n")
        .append("<InterchangeStudentAssessment xsi:schemaLocation=\"http://ed-fi.org/0100 Interchange-StudentAssessment.xsd\" xmlns=\"http://ed-fi.org/0100\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n")
        .toString();

    private String end = new StringBuilder()
        .append("</InterchangeStudentAssessment>\n")
        .toString();

    private String body = new StringBuilder()
//        .append("   <StudentAssessment id=\"ID_1\">\n")
        .append("   <StudentAssessment>\n")
        .append("       <AdministrationDate>--AdministrationDate--</AdministrationDate>\n")
        .append("       <AdministrationEndDate>--AdministrationEndDate--</AdministrationEndDate>\n")
        .append("       <SerialNumber>--SerialNumber--</SerialNumber>\n")
        .append("       <AdministrationLanguage>--AdministrationLanguage--</AdministrationLanguage>\n")
        .append("       <AdministrationEnvironment>--AdministrationEnvironment--</AdministrationEnvironment>\n")

        .append("--SpecialAccommodationses--\n")

        .append("--LinguisticAccommodationses--\n")


        .append("       <RetestIndicator>--RetestIndicator--</RetestIndicator>\n")
        .append("       <ReasonNotTested>--ReasonNotTested--</ReasonNotTested>\n")

        .append("--ScoreResultses--\n")

        .append("       <GradeLevelWhenAssessed>--GradeLevelWhenAssessed--</GradeLevelWhenAssessed>\n")

        .append("--PerformanceLevelses--\n")

//        .append("       <StudentReference id=\"ID_3\" ref=\"ID_1\">\n")
        .append("       <StudentReference>\n")
        .append("           <StudentIdentity>\n")
        .append("               <StudentUniqueStateId>--StudentUniqueStateId--</StudentUniqueStateId>\n")
//        .append("               <StudentIdentificationCode IdentificationSystem=\"--StudentIdentificationCode_IdentificationSystem--\" AssigningOrganizationCode=\"--StudentIdentificationCode_AssigningOrganizationCode--\">\n")
//        .append("                   <IdentificationCode>--IdentificationCode--</IdentificationCode>\n")
//        .append("               </StudentIdentificationCode>\n")
//        .append("               <Name Verification=\"--Verification--\">\n")
//        .append("                   <PersonalTitlePrefix>--PersonalTitlePrefix--</PersonalTitlePrefix>\n")
//        .append("                   <FirstName>--FirstName--</FirstName>\n")
//        .append("                   <MiddleName>--MiddleName--</MiddleName>\n")
//        .append("                   <LastSurname>--LastSurname--</LastSurname>\n")
//        .append("                   <GenerationCodeSuffix>--GenerationCodeSuffix--</GenerationCodeSuffix>\n")
//        .append("                   <MaidenName>--MaidenName--</MaidenName>\n")
//        .append("               </Name>\n")
//        .append("               <OtherName OtherNameType=\"--OtherNameType--\">\n")
//        .append("                   <PersonalTitlePrefix>--PersonalTitlePrefix--</PersonalTitlePrefix>\n")
//        .append("                   <FirstName>--FirstName--</FirstName>\n")
//        .append("                   <MiddleName>--MiddleName--</MiddleName>\n")
//        .append("                   <LastSurname>--LastSurname--</LastSurname>\n")
//        .append("                   <GenerationCodeSuffix>--GenerationCodeSuffix--</GenerationCodeSuffix>\n")
//        .append("               </OtherName>\n")
//        .append("               <BirthDate>--BirthDate--</BirthDate>\n")
//        .append("               <Sex>--Sex--</Sex>\n")
//        .append("               <HispanicLatinoEthnicity>--HispanicLatinoEthnicity--</HispanicLatinoEthnicity>\n")
//        .append("               <Race>\n")
//        .append("                   <RacialCategory>--RacialCategory--</RacialCategory>\n")
//        .append("               </Race>\n")
        .append("           </StudentIdentity>\n")
        .append("       </StudentReference>\n")
//        .append("       <AssessmentReference id=\"ID_4\" ref=\"ID_4\">\n")
        .append("       <AssessmentReference>\n")
        .append("           <AssessmentIdentity>\n")

        .append("--AssessmentIdentificationCodes--\n")

        .append("           </AssessmentIdentity>\n")
        .append("       </AssessmentReference>\n")
        .append("   </StudentAssessment>\n")
        .toString();


    private String specialAccommodationses = new StringBuilder()
        .append("       <SpecialAccommodations>\n")
        .append("           <SpecialAccommodation>--SpecialAccommodation--</SpecialAccommodation>\n")
        .append("       </SpecialAccommodations>\n")
        .toString();

    private String linguisticAccommodationses = new StringBuilder()
        .append("       <LinguisticAccommodations>\n")
        .append("           <LinguisticAccommodation>--LinguisticAccommodation--</LinguisticAccommodation>\n")
        .append("       </LinguisticAccommodations>\n")
        .toString();

    private String scoreResultses = new StringBuilder()
        .append("       <ScoreResults AssessmentReportingMethod=\"--AssessmentReportingMethod--\">\n")
        .append("           <Result>--Result--</Result>\n")
        .append("       </ScoreResults>\n")
        .toString();

    private String performanceLevelses = new StringBuilder()
//        .append("       <PerformanceLevels id=\"ID_2\" ref=\"ID_1\">\n")
        .append("       <PerformanceLevels>\n")
        .append("           <CodeValue>--CodeValue--</CodeValue>\n")
        .append("       </PerformanceLevels>\n")
        .toString();

    private String assessmentIdentificationCodes = new StringBuilder()
        .append("               <AssessmentIdentificationCode IdentificationSystem=\"--AssessmentIdentificationCode_IdentificationSystem--\" AssigningOrganizationCode=\"--AssessmentIdentificationCode_AssigningOrganizationCode--\">\n")
        .append("                   <ID>--ID--</ID>\n")
        .append("               </AssessmentIdentificationCode>\n")
        .toString();


    private ResultSet studentAssessmentResultSet;
    private String studentAssessmentQuery = new StringBuilder()
        .append("SELECT sa.StudentUSI\n")
        .append("      ,sa.AssessmentTitle\n")
        .append("      ,sa.AcademicSubjectTypeId\n")
        .append("      ,sa.AssessedGradeLevelTypeId\n")
        .append("      ,ast.CodeValue as AcademicSubject\n")
        .append("      ,glt.CodeValue as AssessedGradeLevel\n")
        .append("      ,sa.Version\n")
        .append("      ,sa.AdministrationDate\n")
        .append("      ,sa.AdministrationEndDate\n")
        .append("      ,sa.SerialNumber\n")
        .append("      ,lt.CodeValue as AdministrationLanguageType\n")
        .append("      ,aet.CodeValue as AdministrationEnvironmentType\n")
        .append("      ,rit.CodeValue as RetestIndicatorType\n")
        .append("      ,rntt.CodeValue as ReasonNotTestedType\n")
        .append("      ,glt.CodeValue as WhenAssessedGradeLevelType\n")
        .append("  FROM EdFi.edfi.StudentAssessment sa\n")
        .append("   LEFT JOIN EdFi.edfi.AcademicSubjectType ast ON sa.AcademicSubjectTypeId = ast.AcademicSubjectTypeId\n")
        .append("   LEFT JOIN EdFi.edfi.GradeLevelType glt ON sa.AssessedGradeLevelTypeId = glt.GradeLevelTypeId\n")
        .append("   LEFT JOIN EdFi.edfi.LanguagesType lt ON sa.AdministrationLanguageTypeId = lt.LanguageTypeId\n")
        .append("   LEFT JOIN EdFi.edfi.AdministrationEnvironmentType aet ON sa.AdministrationEnvironmentTypeId = aet.AdministrationEnvironmentTypeId\n")
        .append("   LEFT JOIN EdFi.edfi.RetestIndicatorType rit ON sa.RetestIndicatorTypeId = rit.RetestIndicatorTypeId\n")
        .append("   LEFT JOIN EdFi.edfi.ReasonNotTestedType rntt ON sa.ReasonNotTestedTypeId = rntt.ReasonNotTestedTypeId\n")
        .append("   LEFT JOIN EdFi.edfi.GradeLevelType glt1 ON sa.WhenAssessedGradeLevelTypeId = glt1.GradeLevelTypeId\n")
//        .append("  WHERE sa.StudentUSI = 604822\n")
        .append("  ORDER BY sa.StudentUSI, sa.AssessmentTitle, sa.AcademicSubjectTypeId, sa.AssessedGradeLevelTypeId, sa.Version, sa.AdministrationDate\n")
        .toString();

    private ResultSet studentAssessmentSpecialAccommodationsResultSet;
    private String studentAssessmentSpecialAccommodationsQuery = new StringBuilder()
        .append("SELECT sasa.StudentUSI\n")
        .append("      ,sasa.AssessmentTitle\n")
        .append("      ,sasa.AcademicSubjectTypeId\n")
        .append("      ,sasa.AssessedGradeLevelTypeId\n")
        .append("      ,sasa.Version\n")
        .append("      ,sasa.AdministrationDate\n")
        .append("      ,sat.CodeValue as SpecialAccommodationsType\n")
        .append("  FROM EdFi.edfi.StudentAssessmentSpecialAccommodations sasa\n")
        .append("  LEFT JOIN EdFi.edfi.SpecialAccommodationsType sat ON sasa.SpecialAccommodationsTypeId = sat.SpecialAccommodationsTypeId\n")
//        .append("  WHERE sasa.StudentUSI = 604822\n")
        .append("  ORDER BY sasa.StudentUSI, sasa.AssessmentTitle, sasa.AcademicSubjectTypeId, sasa.AssessedGradeLevelTypeId, sasa.Version, sasa.AdministrationDate\n")
        .toString();

    private ResultSet studentAssessmentScoreResultResultSet;
    private String studentAssessmentScoreResultQuery = new StringBuilder()
        .append("SELECT sasr.StudentUSI\n")
        .append("      ,sasr.AssessmentTitle\n")
        .append("      ,sasr.AcademicSubjectTypeId\n")
        .append("      ,sasr.AssessedGradeLevelTypeId\n")
        .append("      ,sasr.Version\n")
        .append("      ,sasr.AdministrationDate\n")
        .append("      ,armt.CodeValue as AssessmentReportingMethodType\n")
        .append("      ,sasr.Result\n")
        .append("  FROM EdFi.edfi.StudentAssessmentScoreResult sasr\n")
        .append("  LEFT JOIN EdFi.edfi.AssessmentReportingMethodType armt ON sasr.AssessmentReportingMethodTypeId = armt.AssessmentReportingMethodTypeId\n")
//        .append("  WHERE sasr.StudentUSI = 604822\n")
        .append("  ORDER BY sasr.StudentUSI, sasr.AssessmentTitle, sasr.AcademicSubjectTypeId, sasr.AssessedGradeLevelTypeId, sasr.Version, sasr.AdministrationDate\n")
        .toString();

    private ResultSet performanceLevelsesResultSet;
    private String performanceLevelsesQuery = new StringBuilder()
        .append("SELECT sapl.StudentUSI\n")
        .append("      ,sapl.AssessmentTitle\n")
        .append("      ,sapl.AcademicSubjectTypeId\n")
        .append("      ,sapl.AssessedGradeLevelTypeId\n")
        .append("      ,sapl.Version\n")
        .append("      ,sapl.AdministrationDate\n")
        .append("      ,pld.Description as PerformanceLevelDescriptor\n")
        .append("      ,sapl.PerformanceLevelMet\n")
        .append("  FROM EdFi.edfi.StudentAssessmentPerformanceLevel sapl\n")
        .append("  LEFT JOIN EdFi.edfi.PerformanceLevelDescriptor pld ON sapl.PerformanceLevelDescriptorId = pld.PerformanceLevelDescriptorId\n")
//        .append("  WHERE sapl.StudentUSI = 604822\n")
        .append("  ORDER BY sapl.StudentUSI, sapl.AssessmentTitle, sapl.AcademicSubjectTypeId, sapl.AssessedGradeLevelTypeId, sapl.Version, sapl.AdministrationDate\n")
        .toString();

    private ResultSet assessmentIdentificationCodeResultSet;
    private String assessmentIdentificationCodeQuery = new StringBuilder()
        .append("SELECT sa.StudentUSI\n")
        .append("      ,aic.AssessmentTitle\n")
        .append("      ,aic.AcademicSubjectTypeId\n")
        .append("      ,aic.AssessedGradeLevelTypeId\n")
        .append("      ,aic.Version\n")
        .append("      ,sa.AdministrationDate\n")
        .append("      ,aist.CodeValue as AssessmentIdentificationSystem\n")
        .append("      ,aic.AssigningOrganizationCode\n")
        .append("      ,aic.IdentificationCode\n")
        .append("  FROM EdFi.edfi.AssessmentIdentificationCode aic\n")
        .append("  RIGHT JOIN EdFi.edfi.StudentAssessment sa \n")
        .append("   ON sa.AssessmentTitle = aic.AssessmentTitle\n")
        .append("       AND sa.AcademicSubjectTypeId = aic.AcademicSubjectTypeId\n")
        .append("       AND sa.AssessedGradeLevelTypeId = aic.AssessedGradeLevelTypeId\n")
        .append("       AND sa.Version = aic.Version\n")
        .append("  LEFT JOIN EdFi.edfi.AssessmentIdentificationSystemType aist ON aic.AssessmentIdentificationSystemTypeId = aist.AssessmentIdentificationSystemTypeId\n")
//        .append("  WHERE sa.StudentUSI = 604822\n")
        .append("  ORDER BY sa.StudentUSI, aic.AssessmentTitle, aic.AcademicSubjectTypeId, aic.AssessedGradeLevelTypeId, aic.Version, sa.AdministrationDate\n")
        .toString();


    private void getData() {
        Connection conn = Utility.getConnection();
        studentAssessmentResultSet = Utility.getResultSet(conn, this.studentAssessmentQuery);

        studentAssessmentSpecialAccommodationsResultSet =  Utility.getResultSet(conn, this.studentAssessmentSpecialAccommodationsQuery);

        studentAssessmentScoreResultResultSet =  Utility.getResultSet(conn, this.studentAssessmentScoreResultQuery);

        performanceLevelsesResultSet =  Utility.getResultSet(conn, this.performanceLevelsesQuery);

        assessmentIdentificationCodeResultSet =  Utility.getResultSet(conn, this.assessmentIdentificationCodeQuery);
    }

    private void getStudentAssessment() {
        String studentAssessment = body;
        try {
            studentAssessment = Utility.replace(studentAssessment, "--AdministrationDate--", studentAssessmentResultSet.getString("AdministrationDate"));
            studentAssessment = Utility.replace(studentAssessment, "--AdministrationEndDate--", studentAssessmentResultSet.getString("AdministrationEndDate"));
            studentAssessment = Utility.replace(studentAssessment, "--SerialNumber--", studentAssessmentResultSet.getString("SerialNumber"));
            studentAssessment = Utility.replace(studentAssessment, "--AdministrationLanguage--", studentAssessmentResultSet.getString("AdministrationLanguageType"));
            studentAssessment = Utility.replace(studentAssessment, "--AdministrationEnvironment--", studentAssessmentResultSet.getString("AdministrationEnvironmentType"));
            studentAssessment = Utility.replace(studentAssessment, "--RetestIndicator--", studentAssessmentResultSet.getString("RetestIndicatorType"));
            studentAssessment = Utility.replace(studentAssessment, "--ReasonNotTested--", studentAssessmentResultSet.getString("ReasonNotTestedType"));
            studentAssessment = Utility.replace(studentAssessment, "--GradeLevelWhenAssessed--", studentAssessmentResultSet.getString("WhenAssessedGradeLevelType"));
            studentAssessment = Utility.replace(studentAssessment, "--StudentUniqueStateId--", studentAssessmentResultSet.getString("StudentUSI"));
    //        studentAssessment = Utility.replace(studentAssessment, "", studentAssessmentResultSet.getString(""));

            // SpecialAccommodationses
            StringBuilder sasa = new StringBuilder("");
            boolean hasOne = false;
            if (studentAssessmentSpecialAccommodationsResultSet != null) {
                try {
                    while (this.studentAssessmentSpecialAccommodationsResultSet.getString("StudentUSI").equals(this.studentAssessmentResultSet.getString("StudentUSI"))
                            && this.studentAssessmentSpecialAccommodationsResultSet.getString("AssessmentTitle").equals(this.studentAssessmentResultSet.getString("AssessmentTitle"))
                            && this.studentAssessmentSpecialAccommodationsResultSet.getString("AcademicSubjectTypeId").equals(this.studentAssessmentResultSet.getString("AcademicSubjectTypeId"))
                            && this.studentAssessmentSpecialAccommodationsResultSet.getString("AssessedGradeLevelTypeId").equals(this.studentAssessmentResultSet.getString("AssessedGradeLevelTypeId"))
                            && this.studentAssessmentSpecialAccommodationsResultSet.getString("Version").equals(this.studentAssessmentResultSet.getString("Version"))
                            && this.studentAssessmentSpecialAccommodationsResultSet.getString("AdministrationDate").equals(this.studentAssessmentResultSet.getString("AdministrationDate"))) {
                        sasa.append(Utility.replace(this.specialAccommodationses, "--SpecialAccommodation--", this.studentAssessmentSpecialAccommodationsResultSet.getString("SpecialAccommodationsType")));
                        hasOne = true;
                        this.studentAssessmentSpecialAccommodationsResultSet.next();
                    }
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    //e.printStackTrace();
                }
            }
            if (!hasOne)
                sasa.append(Utility.replace(this.specialAccommodationses, "--SpecialAccommodation--", null));
            studentAssessment = Utility.replace(studentAssessment, "--SpecialAccommodationses--\n", sasa.toString());

            // LinguisticAccommodationses
            StringBuilder studentAssessmentLinguisticAccommodations = new StringBuilder("");
            studentAssessmentLinguisticAccommodations.append(Utility.replace(linguisticAccommodationses, "--LinguisticAccommodation--", null));
            studentAssessment = Utility.replace(studentAssessment, "--LinguisticAccommodationses--\n", studentAssessmentLinguisticAccommodations.toString());

            // ScoreResultses
            StringBuilder scoreResultsSB = new StringBuilder("");
            hasOne = false;
            if (studentAssessmentScoreResultResultSet != null) {
                try {
                    while (this.studentAssessmentScoreResultResultSet.getString("StudentUSI").equals(this.studentAssessmentResultSet.getString("StudentUSI"))
                            && this.studentAssessmentScoreResultResultSet.getString("AssessmentTitle").equals(this.studentAssessmentResultSet.getString("AssessmentTitle"))
                            && this.studentAssessmentScoreResultResultSet.getString("AcademicSubjectTypeId").equals(this.studentAssessmentResultSet.getString("AcademicSubjectTypeId"))
                            && this.studentAssessmentScoreResultResultSet.getString("AssessedGradeLevelTypeId").equals(this.studentAssessmentResultSet.getString("AssessedGradeLevelTypeId"))
                            && this.studentAssessmentScoreResultResultSet.getString("Version").equals(this.studentAssessmentResultSet.getString("Version"))
                            && this.studentAssessmentScoreResultResultSet.getString("AdministrationDate").equals(this.studentAssessmentResultSet.getString("AdministrationDate"))) {
    
                        String temp = Utility.replace(scoreResultses, "--AssessmentReportingMethod--", this.studentAssessmentScoreResultResultSet.getString("AssessmentReportingMethodType"));
                        temp = Utility.replace(temp, "--Result--", this.studentAssessmentScoreResultResultSet.getString("Result"));
                        scoreResultsSB.append(temp);
                        hasOne = true;
                        this.studentAssessmentScoreResultResultSet.next();
                    }
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    //e.printStackTrace();
                }
            }
            if (!hasOne) {
                String temp = Utility.replace(scoreResultses, "--AssessmentReportingMethod--", null);
                temp = Utility.replace(temp, "--Result--", null);
                scoreResultsSB.append(temp);
            }
            studentAssessment = Utility.replace(studentAssessment, "--ScoreResultses--\n", scoreResultsSB.toString());

            // performanceLevelses
            StringBuilder pl = new StringBuilder("");
            hasOne = false;
            if (performanceLevelsesResultSet != null) {
                try {
                    while (this.performanceLevelsesResultSet.getString("StudentUSI").equals(this.studentAssessmentResultSet.getString("StudentUSI"))
                            && this.performanceLevelsesResultSet.getString("AssessmentTitle").equals(this.studentAssessmentResultSet.getString("AssessmentTitle"))
                            && this.performanceLevelsesResultSet.getString("AcademicSubjectTypeId").equals(this.studentAssessmentResultSet.getString("AcademicSubjectTypeId"))
                            && this.performanceLevelsesResultSet.getString("AssessedGradeLevelTypeId").equals(this.studentAssessmentResultSet.getString("AssessedGradeLevelTypeId"))
                            && this.performanceLevelsesResultSet.getString("Version").equals(this.studentAssessmentResultSet.getString("Version"))
                            && this.performanceLevelsesResultSet.getString("AdministrationDate").equals(this.studentAssessmentResultSet.getString("AdministrationDate"))) {
                        pl.append(Utility.replace(this.performanceLevelses, "--CodeValue--", this.performanceLevelsesResultSet.getString("PerformanceLevelDescriptor")));
                        hasOne = true;
                        this.performanceLevelsesResultSet.next();
                    }
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    //e.printStackTrace();
                }
            }
            if (!hasOne)
                pl.append(Utility.replace(this.performanceLevelses, "--CodeValue--", null));
            studentAssessment = Utility.replace(studentAssessment, "--PerformanceLevelses--\n", pl.toString());

            // assessmentIdentificationCodes
            StringBuilder idCodes = new StringBuilder("");
            hasOne = false;
            if (assessmentIdentificationCodeResultSet != null) {
                try {
                    while (this.assessmentIdentificationCodeResultSet.getString("StudentUSI").equals(this.studentAssessmentResultSet.getString("StudentUSI"))
                            && this.assessmentIdentificationCodeResultSet.getString("AssessmentTitle").equals(this.studentAssessmentResultSet.getString("AssessmentTitle"))
                            && this.assessmentIdentificationCodeResultSet.getString("AcademicSubjectTypeId").equals(this.studentAssessmentResultSet.getString("AcademicSubjectTypeId"))
                            && this.assessmentIdentificationCodeResultSet.getString("AssessedGradeLevelTypeId").equals(this.studentAssessmentResultSet.getString("AssessedGradeLevelTypeId"))
                            && this.assessmentIdentificationCodeResultSet.getString("Version").equals(this.studentAssessmentResultSet.getString("Version"))
                            && this.assessmentIdentificationCodeResultSet.getString("AdministrationDate").equals(this.studentAssessmentResultSet.getString("AdministrationDate"))) {
    
                        String temp = Utility.replace(this.assessmentIdentificationCodes, "--AssessmentIdentificationCode_IdentificationSystem--", this.assessmentIdentificationCodeResultSet.getString("AssessmentIdentificationSystem"));
                        temp = Utility.replace(temp, "--AssessmentIdentificationCode_AssigningOrganizationCode--", this.assessmentIdentificationCodeResultSet.getString("AssigningOrganizationCode"));
                        temp = Utility.replace(temp, "--ID--", this.assessmentIdentificationCodeResultSet.getString("IdentificationCode"));
                        idCodes.append(temp);
                        hasOne = true;
                        this.assessmentIdentificationCodeResultSet.next();
                    }
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    //e.printStackTrace();
                }
            }
            if (!hasOne) {
                String temp = Utility.replace(this.assessmentIdentificationCodes, "--AssessmentIdentificationCode_IdentificationSystem--", null);
                temp = Utility.replace(temp, "--AssessmentIdentificationCode_AssigningOrganizationCode--", null);
                temp = Utility.replace(temp, "--ID--", null);
                idCodes.append(temp);
           }
            studentAssessment = Utility.replace(studentAssessment, "--AssessmentIdentificationCodes--\n", idCodes.toString());

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        System.out.print(studentAssessment);
    }


    public void getStudentAssessments() {
        this.getData();
        System.out.print(this.begin);
        try {
            if (studentAssessmentResultSet != null) {
                do {
                    this.getStudentAssessment();
                } while (this.studentAssessmentResultSet.next());
            }
        } catch (SQLException e) {

        }

        System.out.print(this.end);

    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        (new GenerateStudentAssessment()).getStudentAssessments();

    }

}

var search_data = {"index":{"searchIndex":["bson","bsonerror","bson_c","bson_coder","bson_java","bson_ruby","binary","bytebuffer","code","dbref","invaliddocument","invalidkeyname","invalidobjectid","invalidstringencoding","maxkey","minkey","mongodberror","mongorubyerror","objectid","orderedhash","timestamp","object","==()","==()","==()","==()","==()","==()","==()","objectid()","[]()","[]()","[]=()","append!()","as_json()","bson_type()","clear()","clear()","clone()","create_pk()","delete()","delete_if()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize()","deserialize_array_data()","deserialize_binary_data()","deserialize_boolean_data()","deserialize_code_w_scope_data()","deserialize_cstr()","deserialize_date_data()","deserialize_dbref_data()","deserialize_number_data()","deserialize_number_int_data()","deserialize_number_long_data()","deserialize_object_data()","deserialize_oid_data()","deserialize_regex_data()","deserialize_string_data()","deserialize_timestamp_data()","dump()","dup()","each()","each()","each_pair()","encoded_str()","eql?()","eql?()","from_string()","from_time()","generation_time()","get()","get_double()","get_int()","get_long()","hash()","hash()","hex_dump()","inspect()","inspect()","inspect()","inspect()","keys()","legal?()","length()","length()","machine_id()","max_bson_size()","max_bson_size()","max_bson_size()","max_bson_size()","merge()","merge!()","more?()","new()","new()","new()","new()","new()","new()","new()","new()","order=()","position()","position=()","prepend!()","put()","put_array()","put_binary()","put_double()","put_int()","put_long()","read_bson_document()","reject()","reject!()","replace()","rewind()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize_array_element()","serialize_binary_element()","serialize_boolean_element()","serialize_code_w_scope()","serialize_cstr()","serialize_cstr()","serialize_date_element()","serialize_dbref_element()","serialize_eoo_element()","serialize_key()","serialize_key_value()","serialize_max_key_element()","serialize_min_key_element()","serialize_null_element()","serialize_number_element()","serialize_object_element()","serialize_oid_element()","serialize_regex_element()","serialize_string_element()","serialize_timestamp_element()","size()","to_a()","to_a()","to_a()","to_a()","to_bson_code()","to_hash()","to_json()","to_s()","to_s()","to_s()","to_s()","to_s()","to_utf8_binary()","to_utf8_binary()","unpack()","unpack()","update()","update_max_bson_size()","update_max_bson_size()","update_max_bson_size()","update_max_bson_size()","values()","yaml_initialize()"],"longSearchIndex":["bson","bson::bsonerror","bson::bson_c","bson::bson_coder","bson::bson_java","bson::bson_ruby","bson::binary","bson::bytebuffer","bson::code","bson::dbref","bson::invaliddocument","bson::invalidkeyname","bson::invalidobjectid","bson::invalidstringencoding","bson::maxkey","bson::minkey","bson::mongodberror","bson::mongorubyerror","bson::objectid","bson::orderedhash","bson::timestamp","object","bson::bytebuffer#==()","bson::code#==()","bson::maxkey#==()","bson::minkey#==()","bson::objectid#==()","bson::orderedhash#==()","bson::timestamp#==()","bson::objectid()","bson::orderedhash::[]()","bson::timestamp#[]()","bson::orderedhash#[]=()","bson::bytebuffer#append!()","bson::objectid#as_json()","bson::bson_ruby#bson_type()","bson::bytebuffer#clear()","bson::orderedhash#clear()","bson::orderedhash#clone()","bson::objectid::create_pk()","bson::orderedhash#delete()","bson::orderedhash#delete_if()","bson::deserialize()","bson::bson_c::deserialize()","bson::bson_java::deserialize()","bson::bson_java::deserialize()","bson::bson_ruby::deserialize()","bson::bson_ruby#deserialize()","bson::bson_ruby#deserialize_array_data()","bson::bson_ruby#deserialize_binary_data()","bson::bson_ruby#deserialize_boolean_data()","bson::bson_ruby#deserialize_code_w_scope_data()","bson::bson_ruby#deserialize_cstr()","bson::bson_ruby#deserialize_date_data()","bson::bson_ruby#deserialize_dbref_data()","bson::bson_ruby#deserialize_number_data()","bson::bson_ruby#deserialize_number_int_data()","bson::bson_ruby#deserialize_number_long_data()","bson::bson_ruby#deserialize_object_data()","bson::bson_ruby#deserialize_oid_data()","bson::bson_ruby#deserialize_regex_data()","bson::bson_ruby#deserialize_string_data()","bson::bson_ruby#deserialize_timestamp_data()","bson::bytebuffer#dump()","bson::orderedhash#dup()","bson::orderedhash#each()","bson::timestamp#each()","bson::orderedhash#each_pair()","bson::bson_ruby#encoded_str()","bson::objectid#eql?()","bson::orderedhash#eql?()","bson::objectid::from_string()","bson::objectid::from_time()","bson::objectid#generation_time()","bson::bytebuffer#get()","bson::bytebuffer#get_double()","bson::bytebuffer#get_int()","bson::bytebuffer#get_long()","bson::objectid#hash()","bson::orderedhash#hash()","bson::bson_ruby#hex_dump()","bson::binary#inspect()","bson::code#inspect()","bson::objectid#inspect()","bson::orderedhash#inspect()","bson::orderedhash#keys()","bson::objectid::legal?()","bson::bytebuffer#length()","bson::code#length()","bson::objectid::machine_id()","bson::bson_c::max_bson_size()","bson::bson_java::max_bson_size()","bson::bson_java::max_bson_size()","bson::bson_ruby::max_bson_size()","bson::orderedhash#merge()","bson::orderedhash#merge!()","bson::bytebuffer#more?()","bson::bson_ruby::new()","bson::binary::new()","bson::bytebuffer::new()","bson::code::new()","bson::dbref::new()","bson::objectid::new()","bson::orderedhash::new()","bson::timestamp::new()","bson::bytebuffer#order=()","bson::bytebuffer#position()","bson::bytebuffer#position=()","bson::bytebuffer#prepend!()","bson::bytebuffer#put()","bson::bytebuffer#put_array()","bson::bytebuffer#put_binary()","bson::bytebuffer#put_double()","bson::bytebuffer#put_int()","bson::bytebuffer#put_long()","bson::read_bson_document()","bson::orderedhash#reject()","bson::orderedhash#reject!()","bson::orderedhash#replace()","bson::bytebuffer#rewind()","bson::serialize()","bson::bson_c::serialize()","bson::bson_java::serialize()","bson::bson_java::serialize()","bson::bson_ruby::serialize()","bson::bson_ruby#serialize()","bson::bson_ruby#serialize_array_element()","bson::bson_ruby#serialize_binary_element()","bson::bson_ruby#serialize_boolean_element()","bson::bson_ruby#serialize_code_w_scope()","bson::bson_ruby::serialize_cstr()","bson::bytebuffer::serialize_cstr()","bson::bson_ruby#serialize_date_element()","bson::bson_ruby#serialize_dbref_element()","bson::bson_ruby#serialize_eoo_element()","bson::bson_ruby::serialize_key()","bson::bson_ruby#serialize_key_value()","bson::bson_ruby#serialize_max_key_element()","bson::bson_ruby#serialize_min_key_element()","bson::bson_ruby#serialize_null_element()","bson::bson_ruby#serialize_number_element()","bson::bson_ruby#serialize_object_element()","bson::bson_ruby#serialize_oid_element()","bson::bson_ruby#serialize_regex_element()","bson::bson_ruby#serialize_string_element()","bson::bson_ruby#serialize_timestamp_element()","bson::bytebuffer#size()","bson::bson_ruby#to_a()","bson::bytebuffer#to_a()","bson::objectid#to_a()","bson::orderedhash#to_a()","bson::code#to_bson_code()","bson::dbref#to_hash()","bson::objectid#to_json()","bson::bson_ruby#to_s()","bson::bytebuffer#to_s()","bson::dbref#to_s()","bson::objectid#to_s()","bson::timestamp#to_s()","bson::bson_ruby::to_utf8_binary()","bson::bytebuffer::to_utf8_binary()","bson::bson_ruby#unpack()","bson::bytebuffer#unpack()","bson::orderedhash#update()","bson::bson_c::update_max_bson_size()","bson::bson_java::update_max_bson_size()","bson::bson_java::update_max_bson_size()","bson::bson_ruby::update_max_bson_size()","bson::orderedhash#values()","bson::orderedhash#yaml_initialize()"],"info":[["BSON","","BSON.html","","<p>A thin wrapper for the CBson class\n<p>– Copyright (C) 2008-2011 10gen Inc.\n<p>Licensed under the Apache License …\n"],["BSON::BSONError","","BSON/BSONError.html","","<p>This will replace MongoDBError.\n"],["BSON::BSON_C","","BSON/BSON_C.html","",""],["BSON::BSON_CODER","","BSON/BSON_JAVA.html","",""],["BSON::BSON_JAVA","","BSON/BSON_JAVA.html","",""],["BSON::BSON_RUBY","","BSON/BSON_RUBY.html","","<p>A BSON seralizer/deserializer in pure Ruby.\n"],["BSON::Binary","","BSON/Binary.html","","<p>An array of binary bytes with a MongoDB subtype. See the subtype constants\nfor reference.\n<p>Use this class …\n"],["BSON::ByteBuffer","","BSON/ByteBuffer.html","",""],["BSON::Code","","BSON/Code.html","","<p>JavaScript code to be evaluated by MongoDB.\n"],["BSON::DBRef","","BSON/DBRef.html","","<p>A reference to another object in a MongoDB database.\n"],["BSON::InvalidDocument","","BSON/InvalidDocument.html","","<p>Raised when trying to insert a document that exceeds the 4MB limit or when\nthe document contains objects …\n"],["BSON::InvalidKeyName","","BSON/InvalidKeyName.html","","<p>Raised when an invalid name is used.\n"],["BSON::InvalidObjectId","","BSON/InvalidObjectId.html","","<p>Raised when attempting to initialize an invalid ObjectId.\n"],["BSON::InvalidStringEncoding","","BSON/InvalidStringEncoding.html","","<p>Raised when given a string is not valid utf-8 (Ruby 1.8 only).\n"],["BSON::MaxKey","","BSON/MaxKey.html","","<p>A class representing the BSON MaxKey type. MaxKey will always compare\ngreater than all other BSON types …\n"],["BSON::MinKey","","BSON/MinKey.html","","<p>A class representing the BSON MinKey type. MinKey will always compare less\nthan all other BSON types …\n"],["BSON::MongoDBError","","BSON/MongoDBError.html","","<p>Raised when MongoDB itself has returned an error.\n"],["BSON::MongoRubyError","","BSON/MongoRubyError.html","","<p>Generic Mongo Ruby Driver exception class.\n"],["BSON::ObjectId","","BSON/ObjectId.html","","<p>Generates MongoDB object ids.\n<p>@core objectids\n"],["BSON::OrderedHash","","BSON/OrderedHash.html","",""],["BSON::Timestamp","","BSON/Timestamp.html","","<p>A class for representing BSON Timestamps. The Timestamp type is used by\nMongoDB internally; thus, it …\n"],["Object","","Object.html","",""],["==","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-3D-3D","(other)",""],["==","BSON::Code","BSON/Code.html#method-i-3D-3D","(other)",""],["==","BSON::MaxKey","BSON/MaxKey.html#method-i-3D-3D","(obj)",""],["==","BSON::MinKey","BSON/MinKey.html#method-i-3D-3D","(obj)",""],["==","BSON::ObjectId","BSON/ObjectId.html#method-i-3D-3D","(object_id)",""],["==","BSON::OrderedHash","BSON/OrderedHash.html#method-i-3D-3D","(other)",""],["==","BSON::Timestamp","BSON/Timestamp.html#method-i-3D-3D","(other)",""],["ObjectId","BSON","BSON.html#method-c-ObjectId","(s)",""],["[]","BSON::OrderedHash","BSON/OrderedHash.html#method-c-5B-5D","(*args)",""],["[]","BSON::Timestamp","BSON/Timestamp.html#method-i-5B-5D","(index)","<p>This is for backward-compatibility. Timestamps in the Ruby driver used to\ndeserialize as arrays. So we …\n"],["[]=","BSON::OrderedHash","BSON/OrderedHash.html#method-i-5B-5D-3D","(key, value)",""],["append!","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-append-21","(buffer)","<p>Appends a second ByteBuffer object, <code>buffer</code>, to the current\nbuffer.\n"],["as_json","BSON::ObjectId","BSON/ObjectId.html#method-i-as_json","(options ={})","<p>Create the JSON hash structure convert to MongoDB extended format. Rails\n2.3.3  introduced as_json to …\n"],["bson_type","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-bson_type","(o)",""],["clear","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-clear","()",""],["clear","BSON::OrderedHash","BSON/OrderedHash.html#method-i-clear","()",""],["clone","BSON::OrderedHash","BSON/OrderedHash.html#method-i-clone","()",""],["create_pk","BSON::ObjectId","BSON/ObjectId.html#method-c-create_pk","(doc)","<p>Adds a primary key to the given document if needed.\n<p>@param [Hash] doc a document requiring an _id.\n<p>@return …\n"],["delete","BSON::OrderedHash","BSON/OrderedHash.html#method-i-delete","(key, &block)",""],["delete_if","BSON::OrderedHash","BSON/OrderedHash.html#method-i-delete_if","(&block)",""],["deserialize","BSON","BSON.html#method-c-deserialize","(buf=nil)",""],["deserialize","BSON::BSON_C","BSON/BSON_C.html#method-c-deserialize","(buf=nil)",""],["deserialize","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-deserialize","(buf)",""],["deserialize","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-deserialize","(buf)",""],["deserialize","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-deserialize","(buf=nil)",""],["deserialize","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize","(buf=nil)",""],["deserialize_array_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_array_data","(buf)",""],["deserialize_binary_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_binary_data","(buf)",""],["deserialize_boolean_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_boolean_data","(buf)",""],["deserialize_code_w_scope_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_code_w_scope_data","(buf)",""],["deserialize_cstr","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_cstr","(buf)",""],["deserialize_date_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_date_data","(buf)",""],["deserialize_dbref_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_dbref_data","(buf)",""],["deserialize_number_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_number_data","(buf)",""],["deserialize_number_int_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_number_int_data","(buf)",""],["deserialize_number_long_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_number_long_data","(buf)",""],["deserialize_object_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_object_data","(buf)",""],["deserialize_oid_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_oid_data","(buf)",""],["deserialize_regex_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_regex_data","(buf)",""],["deserialize_string_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_string_data","(buf)",""],["deserialize_timestamp_data","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-deserialize_timestamp_data","(buf)",""],["dump","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-dump","()",""],["dup","BSON::OrderedHash","BSON/OrderedHash.html#method-i-dup","()",""],["each","BSON::OrderedHash","BSON/OrderedHash.html#method-i-each","()",""],["each","BSON::Timestamp","BSON/Timestamp.html#method-i-each","()","<p>This method exists only for backward-compatibility.\n<p>@deprecated\n"],["each_pair","BSON::OrderedHash","BSON/OrderedHash.html#method-i-each_pair","()",""],["encoded_str","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-encoded_str","(str)",""],["eql?","BSON::ObjectId","BSON/ObjectId.html#method-i-eql-3F","(object_id)","<p>Check equality of this object id with another.\n<p>@param [BSON::ObjectId] object_id\n"],["eql?","BSON::OrderedHash","BSON/OrderedHash.html#method-i-eql-3F","(o)",""],["from_string","BSON::ObjectId","BSON/ObjectId.html#method-c-from_string","(str)","<p>Given a string representation of an ObjectId, return a new ObjectId with\nthat value.\n<p>@param [String] str …\n"],["from_time","BSON::ObjectId","BSON/ObjectId.html#method-c-from_time","(time, opts={})","<p>Create an object id from the given time. This is useful for doing range\nqueries; it works because MongoDB’s …\n"],["generation_time","BSON::ObjectId","BSON/ObjectId.html#method-i-generation_time","()","<p>Return the UTC time at which this ObjectId was generated. This may be used\nin lieu of a created_at timestamp …\n"],["get","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-get","(len=nil)",""],["get_double","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-get_double","()",""],["get_int","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-get_int","()",""],["get_long","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-get_long","()",""],["hash","BSON::ObjectId","BSON/ObjectId.html#method-i-hash","()","<p>Get a unique hashcode for this object. This is required since we’ve defined\nan #eql? method.\n<p>@return [Integer] …\n"],["hash","BSON::OrderedHash","BSON/OrderedHash.html#method-i-hash","()",""],["hex_dump","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-hex_dump","()","<p>For debugging.\n"],["inspect","BSON::Binary","BSON/Binary.html#method-i-inspect","()",""],["inspect","BSON::Code","BSON/Code.html#method-i-inspect","()",""],["inspect","BSON::ObjectId","BSON/ObjectId.html#method-i-inspect","()",""],["inspect","BSON::OrderedHash","BSON/OrderedHash.html#method-i-inspect","()",""],["keys","BSON::OrderedHash","BSON/OrderedHash.html#method-i-keys","()",""],["legal?","BSON::ObjectId","BSON/ObjectId.html#method-c-legal-3F","(str)","<p>Determine if the supplied string is legal. Legal strings will consist of 24\nhexadecimal characters.\n<p>@param …\n"],["length","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-length","()",""],["length","BSON::Code","BSON/Code.html#method-i-length","()",""],["machine_id","BSON::ObjectId","BSON/ObjectId.html#method-c-machine_id","()",""],["max_bson_size","BSON::BSON_C","BSON/BSON_C.html#method-c-max_bson_size","()",""],["max_bson_size","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-max_bson_size","()",""],["max_bson_size","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-max_bson_size","()",""],["max_bson_size","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-max_bson_size","()",""],["merge","BSON::OrderedHash","BSON/OrderedHash.html#method-i-merge","(other)",""],["merge!","BSON::OrderedHash","BSON/OrderedHash.html#method-i-merge-21","(other)",""],["more?","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-more-3F","()",""],["new","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-new","(max_bson_size=BSON::DEFAULT_MAX_BSON_SIZE)",""],["new","BSON::Binary","BSON/Binary.html#method-c-new","(data=[], subtype=SUBTYPE_SIMPLE)","<p>Create a buffer for storing binary data in MongoDB.\n<p>@param [Array, String] data to story as BSON binary. …\n"],["new","BSON::ByteBuffer","BSON/ByteBuffer.html#method-c-new","(initial_data=\"\", max_size=BSON::DEFAULT_MAX_BSON_SIZE)",""],["new","BSON::Code","BSON/Code.html#method-c-new","(code, scope={})","<p>Wrap code to be evaluated by MongoDB.\n<p>@param [String] code the JavaScript code. @param [Hash] a document …\n"],["new","BSON::DBRef","BSON/DBRef.html#method-c-new","(namespace, object_id)","<p>Create a DBRef. Use this class in conjunction with DB#dereference.\n<p>@param [String] a collection name @param …\n"],["new","BSON::ObjectId","BSON/ObjectId.html#method-c-new","(data=nil, time=nil)","<p>Create a new object id. If no parameter is given, an id corresponding to\nthe ObjectId BSON data type …\n"],["new","BSON::OrderedHash","BSON/OrderedHash.html#method-c-new","(*a, &b)",""],["new","BSON::Timestamp","BSON/Timestamp.html#method-c-new","(seconds, increment)","<p>Create a new BSON Timestamp.\n<p>@param [Integer] seconds The number of seconds  @param increment\n"],["order=","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-order-3D","(endianness)","<p><code>endianness</code> should be :little_endian or :big_endian. Default is\n:little_endian\n"],["position","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-position","()",""],["position=","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-position-3D","(val)",""],["prepend!","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-prepend-21","(buffer)","<p>Prepends a second ByteBuffer object, <code>buffer</code>, to the current\nbuffer.\n"],["put","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-put","(byte, offset=nil)",""],["put_array","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-put_array","(array, offset=nil)",""],["put_binary","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-put_binary","(data, offset=nil)",""],["put_double","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-put_double","(d, offset=nil)",""],["put_int","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-put_int","(i, offset=nil)",""],["put_long","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-put_long","(i, offset=nil)",""],["read_bson_document","BSON","BSON.html#method-c-read_bson_document","(io)","<p>Reads a single BSON document from an IO object. This method is used in the\nexecutable b2json, bundled …\n"],["reject","BSON::OrderedHash","BSON/OrderedHash.html#method-i-reject","(&block)",""],["reject!","BSON::OrderedHash","BSON/OrderedHash.html#method-i-reject-21","(&block)",""],["replace","BSON::OrderedHash","BSON/OrderedHash.html#method-i-replace","(other)",""],["rewind","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-rewind","()",""],["serialize","BSON","BSON.html#method-c-serialize","(obj, check_keys=false, move_id=false)",""],["serialize","BSON::BSON_C","BSON/BSON_C.html#method-c-serialize","(obj, check_keys=false, move_id=false, max_bson_size=BSON::DEFAULT_MAX_BSON_SIZE)",""],["serialize","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-serialize","(obj, check_keys=false, move_id=false, max_bson_size=BSON::DEFAULT_MAX_BSON_SIZE)","<p>TODO: Pool or cache instances of RubyBSONEncoder so that we don’t create a\nnew one on each call to #serialize …\n"],["serialize","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-serialize","(obj, check_keys=false, move_id=false, max_bson_size=BSON::DEFAULT_MAX_BSON_SIZE)","<p>TODO: Pool or cache instances of RubyBSONEncoder so that we don’t create a\nnew one on each call to #serialize …\n"],["serialize","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-serialize","(obj, check_keys=false, move_id=false, max_bson_size=BSON::DEFAULT_MAX_BSON_SIZE)","<p>Serializes an object. Implemented to ensure an API compatible with BSON\nextension.\n"],["serialize","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize","(obj, check_keys=false, move_id=false)",""],["serialize_array_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_array_element","(buf, key, val, check_keys)",""],["serialize_binary_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_binary_element","(buf, key, val)",""],["serialize_boolean_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_boolean_element","(buf, key, val)",""],["serialize_code_w_scope","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_code_w_scope","(buf, key, val)",""],["serialize_cstr","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-serialize_cstr","(buf, val)",""],["serialize_cstr","BSON::ByteBuffer","BSON/ByteBuffer.html#method-c-serialize_cstr","(buf, val)",""],["serialize_date_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_date_element","(buf, key, val)",""],["serialize_dbref_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_dbref_element","(buf, key, val)",""],["serialize_eoo_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_eoo_element","(buf)",""],["serialize_key","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-serialize_key","(buf, key)",""],["serialize_key_value","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_key_value","(k, v, check_keys)",""],["serialize_max_key_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_max_key_element","(buf, key)",""],["serialize_min_key_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_min_key_element","(buf, key)",""],["serialize_null_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_null_element","(buf, key)",""],["serialize_number_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_number_element","(buf, key, val, type)",""],["serialize_object_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_object_element","(buf, key, val, check_keys, opcode=OBJECT)",""],["serialize_oid_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_oid_element","(buf, key, val)",""],["serialize_regex_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_regex_element","(buf, key, val)",""],["serialize_string_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_string_element","(buf, key, val, type)",""],["serialize_timestamp_element","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-serialize_timestamp_element","(buf, key, val)",""],["size","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-size","()",""],["to_a","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-to_a","()",""],["to_a","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-to_a","(format=\"C*\")",""],["to_a","BSON::ObjectId","BSON/ObjectId.html#method-i-to_a","()","<p>Get an array representation of the object id.\n<p>@return [Array]\n"],["to_a","BSON::OrderedHash","BSON/OrderedHash.html#method-i-to_a","()",""],["to_bson_code","BSON::Code","BSON/Code.html#method-i-to_bson_code","()",""],["to_hash","BSON::DBRef","BSON/DBRef.html#method-i-to_hash","()",""],["to_json","BSON::ObjectId","BSON/ObjectId.html#method-i-to_json","(*a)","<p>Convert to MongoDB extended JSON format. Since JSON includes type\ninformation, but lacks an ObjectId …\n"],["to_s","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-to_s","()",""],["to_s","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-to_s","()",""],["to_s","BSON::DBRef","BSON/DBRef.html#method-i-to_s","()",""],["to_s","BSON::ObjectId","BSON/ObjectId.html#method-i-to_s","()","<p>Get a string representation of this object id.\n<p>@return [String]\n"],["to_s","BSON::Timestamp","BSON/Timestamp.html#method-i-to_s","()",""],["to_utf8_binary","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-to_utf8_binary","(str)",""],["to_utf8_binary","BSON::ByteBuffer","BSON/ByteBuffer.html#method-c-to_utf8_binary","(str)",""],["unpack","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-i-unpack","(arg)","<p>Returns the array stored in the buffer. Implemented to ensure an API\ncompatible with BSON extension. …\n"],["unpack","BSON::ByteBuffer","BSON/ByteBuffer.html#method-i-unpack","(format=\"C*\")",""],["update","BSON::OrderedHash","BSON/OrderedHash.html#method-i-update","(other)",""],["update_max_bson_size","BSON::BSON_C","BSON/BSON_C.html#method-c-update_max_bson_size","(connection)",""],["update_max_bson_size","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-update_max_bson_size","(connection)",""],["update_max_bson_size","BSON::BSON_JAVA","BSON/BSON_JAVA.html#method-c-update_max_bson_size","(connection)",""],["update_max_bson_size","BSON::BSON_RUBY","BSON/BSON_RUBY.html#method-c-update_max_bson_size","(connection)",""],["values","BSON::OrderedHash","BSON/OrderedHash.html#method-i-values","()",""],["yaml_initialize","BSON::OrderedHash","BSON/OrderedHash.html#method-i-yaml_initialize","(tag, val)",""]]}}
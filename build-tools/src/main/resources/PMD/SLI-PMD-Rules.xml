<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ruleset name="SLI-PMD-Rules"
   xmlns="http://pmd.sf.net/ruleset/1.0.0" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
   <description>PMD Rules for the SLI Project.</description>
   <exclude-pattern>.*/test/.*</exclude-pattern>
   <rule ref="rulesets/braces.xml/IfStmtsMustUseBraces">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/braces.xml/WhileLoopsMustUseBraces">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/braces.xml/IfElseStmtsMustUseBraces">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/braces.xml/ForLoopsMustUseBraces">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/AvoidReassigningParameters">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/ConstructorCallsOverridableMethod">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/design.xml/EqualsNull">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/design.xml/InstantiationToGetClass">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/NonThreadSafeSingleton">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/UncommentedEmptyMethod">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/UncommentedEmptyConstructor">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/PreserveStackTrace">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/design.xml/EmptyMethodInAbstractClassShouldBeAbstract">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/design.xml/ReturnEmptyArrayRatherThanNull">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidCatchingThrowable">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/ExceptionAsFlowControl">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidCatchingNPE">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidThrowingNullPointerException">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidRethrowingException">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/DoNotExtendJavaLangError">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/DoNotThrowExceptionInFinally">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidThrowingNewInstanceOfSameException">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/logging-java.xml/MoreThanOneLogger">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/logging-java.xml/LoggerIsNotStaticFinal">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/logging-java.xml/SystemPrintln">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/logging-java.xml/AvoidPrintStackTrace">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strings.xml/UseEqualsToCompareStrings">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/j2ee.xml/UseProperClassLoader">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/EmptyCatchBlock">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/OverrideBothEqualsAndHashcode">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/DoubleCheckedLocking">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/basic.xml/BooleanInstantiation">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/UselessOverridingMethod">
      <priority>1</priority>
      <example><![CDATA[public void foo(String bar) {
    super.foo(bar);      //Why bother overriding?
}

public String foo() {
    return super.foo();  //Why bother overriding?
}

@Id
public Long getId() {
    return super.getId();  //OK if 'ignoreAnnotations' is false, which is the default behavior
}

public void foo(String bar) {
    super.foo(bar);      //Why bother overriding?
}

public String foo() {
    return super.foo();  //Why bother overriding?
}

@Id
public Long getId() {
    return super.getId();  //OK if 'ignoreAnnotations' is false, which is the default behavior
}]]></example>
   </rule>
   <rule ref="rulesets/basic.xml/UselessOperationOnImmutable">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/MisplacedNullCheck">
      <priority>1</priority>
      <example><![CDATA[public class Foo {
 void bar() {
  if (a.equals(baz) && a != null) {}
 }
}

public class Foo {
 void bar() {
  if (a.equals(baz) || a == null) {}
 }
}

public class Foo {
 void bar() {
  if (a.equals(baz) && a != null) {}
 }
}

public class Foo {
 void bar() {
  if (a.equals(baz) || a == null) {}
 }
}]]></example>
   </rule>
   <rule ref="rulesets/basic.xml/AvoidThreadGroup">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/BrokenNullCheck">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/sunsecure.xml/MethodReturnsInternalArray">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/sunsecure.xml/ArrayIsStoredDirectly">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/controversial.xml/DontImportSun">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/controversial.xml/DoNotCallGarbageCollectionExplicitly">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/naming.xml/VariableNamingConventions">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/naming.xml/MethodNamingConventions">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/naming.xml/ClassNamingConventions">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/naming.xml/SuspiciousEqualsMethodName">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/finalizers.xml/AvoidCallingFinalize">
      <priority>1</priority>
   </rule>
</ruleset>
